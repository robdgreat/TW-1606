/* The following code was generated by JFlex 1.4.1_repos on 6/9/07 9:54 AM */

   
package org.twdata.TW1606U.tw;
import java.io.PipedInputStream;
import org.twdata.TW1606U.tw.data.*;
import org.twdata.TW1606U.data.*;
import org.twdata.TW1606U.tw.model.*;
import org.apache.log4j.Logger;
import org.twdata.TW1606U.Lexer;
import org.twdata.TW1606U.StreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1_repos
 * on 6/9/07 9:54 AM from the specification file
 * 
 */
public class TWLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CIMCOURSEPLOT = 20;
  public static final int COMPUTER = 10;
  public static final int SHIPCATALOG = 12;
  public static final int INFO = 8;
  public static final int STARDOCK = 28;
  public static final int STATUS = 4;
  public static final int SECTORDISPLAY = 6;
  public static final int PLANETPROMPT = 26;
  public static final int DUMMYSTATE = 30;
  public static final int YYINITIAL = 0;
  public static final int PLANETDISPLAY = 24;
  public static final int CIM = 22;
  public static final int DENSITYSCAN = 14;
  public static final int COMMERCEREPORT = 2;
  public static final int COURSEPLOT = 18;
  public static final int DEPLOYEDFTRS = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  8,  9,  9, 10, 11, 
    12, 12, 13, 13, 14, 14, 15, 15,  3,  3,  3,  3,  3,  3, 16, 16
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\45\2\0\1\57\22\0\1\16\1\0\1\0\1\66\1\0"+
    "\1\72\1\0\1\0\1\54\1\56\1\0\1\0\1\3\1\36\1\4"+
    "\1\0\1\43\1\2\1\42\7\2\1\15\1\0\1\55\1\35\1\71"+
    "\2\0\1\44\1\6\1\32\1\62\1\26\1\17\1\74\1\51\1\73"+
    "\2\100\1\76\1\100\1\47\1\21\1\46\1\1\1\67\1\5\1\37"+
    "\2\100\1\41\1\100\1\65\1\100\1\75\1\0\1\77\3\0\1\13"+
    "\1\60\1\11\1\40\1\10\1\61\1\23\1\53\1\12\1\63\1\64"+
    "\1\14\1\30\1\24\1\33\1\7\1\27\1\22\1\25\1\31\1\20"+
    "\1\50\1\70\1\101\1\34\1\52\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\34\1\1\2\1\3\6\1\1\4\7\1\1\5"+
    "\1\6\1\7\1\1\1\10\5\1\61\0\1\7\2\0"+
    "\1\10\25\0\1\11\22\0\1\12\5\0\1\13\70\0"+
    "\1\7\1\10\1\0\1\14\147\0\1\14\1\0\1\15"+
    "\4\0\1\16\53\0\1\17\34\0\1\20\1\0\1\21"+
    "\26\0\1\14\34\0\1\21\50\0\1\22\4\0\2\21"+
    "\4\0\1\22\1\0\1\23\3\0\1\24\1\25\15\0"+
    "\1\26\22\0\2\21\7\0\1\27\1\0\1\30\35\0"+
    "\2\21\21\0\1\31\21\0\1\31\1\0\2\21\14\0"+
    "\1\32\24\0\2\21\34\0\1\33\4\0\2\21\26\0"+
    "\1\34\10\0\1\21\16\0\1\35\2\0\1\36\12\0"+
    "\1\21\6\0\1\37\4\0\1\40\37\0\1\41\40\0"+
    "\1\42\16\0\1\43\25\0\1\44\47\0\1\45\15\0"+
    "\1\46\3\0\1\47\2\0\1\46\6\0\1\50\61\0"+
    "\1\51\41\0\1\52\3\0\1\53\4\0\1\53\2\0"+
    "\1\54\1\55\2\0\1\54\1\55\1\0\1\56\1\0"+
    "\1\56\16\0\1\57\26\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[1098];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0462\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0462\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0462\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u08c4\0\u098a\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u0d68\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u0fba\0\u1ce0"+
    "\0\u1d22\0\u103e\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u10c2\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c"+
    "\0\u22ce\0\u0462\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa"+
    "\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca"+
    "\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a"+
    "\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a"+
    "\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a"+
    "\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a"+
    "\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a"+
    "\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a"+
    "\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a"+
    "\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a"+
    "\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68\0\u4faa"+
    "\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba"+
    "\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca"+
    "\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da"+
    "\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea"+
    "\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8\0\u59fa"+
    "\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8\0\u5c0a"+
    "\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8\0\u5e1a"+
    "\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\u602a"+
    "\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u623a"+
    "\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a"+
    "\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a"+
    "\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6\0\u6828\0\u686a"+
    "\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\u6a7a"+
    "\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a"+
    "\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a"+
    "\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa"+
    "\0\u70ec\0\u712e\0\u7170\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba"+
    "\0\u72fc\0\u733e\0\u7380\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca"+
    "\0\u750c\0\u754e\0\u7590\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da"+
    "\0\u771c\0\u775e\0\u77a0\0\u77e2\0\u7824\0\u7866\0\u78a8\0\u78ea"+
    "\0\u792c\0\u796e\0\u79b0\0\u79f2\0\u7a34\0\u7a76\0\u7ab8\0\u7afa"+
    "\0\u7b3c\0\u7b7e\0\u7bc0\0\u7c02\0\u7c44\0\u7c86\0\u7cc8\0\u7d0a"+
    "\0\u7d4c\0\u7d8e\0\u7dd0\0\u7e12\0\u7e54\0\u7e96\0\u7ed8\0\u7f1a"+
    "\0\u7f5c\0\u7f9e\0\u7fe0\0\u8022\0\u8064\0\u0462\0\u80a6\0\u80e8"+
    "\0\u812a\0\u816c\0\u81ae\0\u81f0\0\u8232\0\u8274\0\u82b6\0\u82f8"+
    "\0\u08c4\0\u833a\0\u837c\0\u83be\0\u8400\0\u8442\0\u8484\0\u84c6"+
    "\0\u8508\0\u854a\0\u858c\0\u85ce\0\u8610\0\u8652\0\u8694\0\u86d6"+
    "\0\u8718\0\u875a\0\u879c\0\u87de\0\u8820\0\u8862\0\u88a4\0\u88e6"+
    "\0\u8928\0\u896a\0\u89ac\0\u89ee\0\u8a30\0\u8a72\0\u8ab4\0\u8af6"+
    "\0\u8b38\0\u8b7a\0\u8bbc\0\u8bfe\0\u8c40\0\u8c82\0\u8cc4\0\u8d06"+
    "\0\u8d48\0\u8d8a\0\u8dcc\0\u8e0e\0\u8e50\0\u8e92\0\u8ed4\0\u8f16"+
    "\0\u8f58\0\u8f9a\0\u8fdc\0\u901e\0\u9060\0\u90a2\0\u90e4\0\u9126"+
    "\0\u9168\0\u91aa\0\u91ec\0\u922e\0\u9270\0\u92b2\0\u92f4\0\u9336"+
    "\0\u9378\0\u93ba\0\u93fc\0\u943e\0\u9480\0\u94c2\0\u9504\0\u9546"+
    "\0\u9588\0\u95ca\0\u960c\0\u964e\0\u9690\0\u96d2\0\u9714\0\u9756"+
    "\0\u9798\0\u97da\0\u981c\0\u985e\0\u98a0\0\u98e2\0\u9924\0\u9966"+
    "\0\u99a8\0\u99ea\0\u9a2c\0\u9a6e\0\u9ab0\0\u9af2\0\u9b34\0\u9b76"+
    "\0\u9bb8\0\u9bfa\0\u9c3c\0\u9c7e\0\u0462\0\u9cc0\0\u9d02\0\u9d44"+
    "\0\u9d86\0\u9dc8\0\u9e0a\0\u9e4c\0\u9e8e\0\u9ed0\0\u9f12\0\u9f54"+
    "\0\u9f96\0\u9fd8\0\ua01a\0\ua05c\0\ua09e\0\ua0e0\0\u08c4\0\ua122"+
    "\0\ua164\0\ua1a6\0\ua1e8\0\ua22a\0\ua26c\0\ua2ae\0\ua2f0\0\ua332"+
    "\0\ua374\0\ua3b6\0\ua3f8\0\ua43a\0\ua47c\0\ua4be\0\u0462\0\ua500"+
    "\0\ua542\0\ua584\0\ua5c6\0\ua608\0\ua64a\0\ua68c\0\ua6ce\0\ua710"+
    "\0\ua752\0\ua794\0\ua7d6\0\ua818\0\ua85a\0\ua89c\0\ua8de\0\ua920"+
    "\0\ua962\0\ua9a4\0\ua9e6\0\uaa28\0\uaa6a\0\uaaac\0\uaaee\0\uab30"+
    "\0\uab72\0\uabb4\0\uabf6\0\uac38\0\uac7a\0\uacbc\0\uacfe\0\uad40"+
    "\0\uad82\0\uadc4\0\uae06\0\uae48\0\uae8a\0\uaecc\0\uaf0e\0\uaf50"+
    "\0\uaf92\0\uafd4\0\ub016\0\ub058\0\ub09a\0\ub0dc\0\ub11e\0\ub160"+
    "\0\ub1a2\0\u0462\0\ub1e4\0\ub226\0\ub268\0\ub2aa\0\ub2ec\0\ub32e"+
    "\0\ub370\0\ub3b2\0\ub3f4\0\ub436\0\ub478\0\ub4ba\0\ub4fc\0\ub53e"+
    "\0\ub580\0\ub5c2\0\ub604\0\ub646\0\ub688\0\ub6ca\0\ub70c\0\ub74e"+
    "\0\ub790\0\ub7d2\0\ub814\0\ub856\0\ub898\0\ub8da\0\ub91c\0\ub95e"+
    "\0\ub9a0\0\ub9e2\0\uba24\0\uba66\0\ubaa8\0\ubaea\0\ubb2c\0\ubb6e"+
    "\0\ubbb0\0\ubbf2\0\ubc34\0\ubc76\0\ubcb8\0\ubcfa\0\ubd3c\0\ubd7e"+
    "\0\ubdc0\0\ube02\0\ube44\0\ube86\0\ubec8\0\ubf0a\0\u0462\0\ubf4c"+
    "\0\ubf8e\0\u0462\0\ubfd0\0\uc012\0\uc054\0\uc096\0\uc0d8\0\uc11a"+
    "\0\uc15c\0\uc19e\0\uc1e0\0\uc222\0\uc264\0\uc2a6\0\uc2e8\0\uc32a"+
    "\0\uc36c\0\uc3ae\0\uc3f0\0\uc432\0\uc474\0\uc4b6\0\uc4f8\0\uc53a"+
    "\0\u0462\0\uc57c\0\uc5be\0\uc600\0\uc642\0\uc684\0\uc6c6\0\uc708"+
    "\0\uc74a\0\uc78c\0\uc7ce\0\uc810\0\uc852\0\uc894\0\uc8d6\0\uc918"+
    "\0\uc95a\0\uc99c\0\uc9de\0\uca20\0\uca62\0\ucaa4\0\ucae6\0\ucb28"+
    "\0\ucb6a\0\ucbac\0\ucbee\0\ucc30\0\ucc72\0\uccb4\0\uccf6\0\ucd38"+
    "\0\ucd7a\0\ucdbc\0\ucdfe\0\uce40\0\uce82\0\ucec4\0\ucf06\0\ucf48"+
    "\0\ucf8a\0\ucfcc\0\ud00e\0\ud050\0\ud092\0\ud0d4\0\ud116\0\ud158"+
    "\0\ud19a\0\ud1dc\0\ud21e\0\ud260\0\ud2a2\0\ud2e4\0\ud326\0\ud368"+
    "\0\ud3aa\0\ud3ec\0\ud42e\0\ud470\0\ud4b2\0\ud4f4\0\ud536\0\ud578"+
    "\0\ud5ba\0\ud5fc\0\ud63e\0\ud680\0\ud6c2\0\ud704\0\ud746\0\ud788"+
    "\0\ud7ca\0\ud80c\0\ud84e\0\ud890\0\ud8d2\0\ud914\0\ud956\0\ud998"+
    "\0\u0462\0\ud9da\0\uda1c\0\uda5e\0\udaa0\0\udae2\0\udb24\0\udb66"+
    "\0\udba8\0\udbea\0\udc2c\0\udc6e\0\udcb0\0\udcf2\0\udd34\0\udd76"+
    "\0\uddb8\0\uddfa\0\ude3c\0\ude7e\0\udec0\0\udf02\0\u0462\0\udf44"+
    "\0\udf86\0\udfc8\0\ue00a\0\ue04c\0\ue08e\0\ue0d0\0\ue112\0\ue154"+
    "\0\ue196\0\ue1d8\0\ue21a\0\ue25c\0\ue29e\0\ue2e0\0\ue322\0\ue364"+
    "\0\ue3a6\0\ue3e8\0\ue42a\0\ue46c\0\ue4ae\0\ue4f0\0\ue532\0\ue574"+
    "\0\ue5b6\0\ue5f8\0\ue63a\0\ue67c\0\ue6be\0\ue700\0\ue742\0\ue784"+
    "\0\ue7c6\0\ue808\0\ue84a\0\ue88c\0\ue8ce\0\ue910\0\ue952\0\ue994"+
    "\0\ue9d6\0\uea18\0\uea5a\0\uea9c\0\ueade\0\ueb20\0\ueb62\0\ueba4"+
    "\0\uebe6\0\uec28\0\uec6a\0\uecac\0\u0462\0\uecee\0\ued30\0\ued72"+
    "\0\uedb4\0\uedf6\0\uee38\0\u08c4\0\uee7a\0\ueebc\0\ueefe\0\uef40"+
    "\0\uef82\0\uefc4\0\u0462\0\uf006\0\uf048\0\uf08a\0\uf0cc\0\uf10e"+
    "\0\uf150\0\uf192\0\uf1d4\0\uf216\0\uf258\0\uf29a\0\uf2dc\0\uf31e"+
    "\0\uf360\0\uf3a2\0\uf3e4\0\uf426\0\uf468\0\uf4aa\0\uf4ec\0\uf52e"+
    "\0\uf570\0\uf5b2\0\uf5f4\0\uf636\0\uf678\0\uf6ba\0\uf6fc\0\uf73e"+
    "\0\uf780\0\uf7c2\0\uf804\0\uf846\0\uf888\0\uf8ca\0\uf90c\0\uf94e"+
    "\0\uf990\0\uf9d2\0\ufa14\0\ufa56\0\ufa98\0\ufada\0\ufb1c\0\ufb5e"+
    "\0\ufba0\0\ufbe2\0\ufc24\0\ufc66\0\u0462\0\ufca8\0\ufcea\0\ufd2c"+
    "\0\ufd6e\0\ufdb0\0\ufdf2\0\ufe34\0\ufe76\0\ufeb8\0\ufefa\0\uff3c"+
    "\0\uff7e\0\uffc0\1\2\1\104\1\206\1\310\1\u010a\1\u014c"+
    "\1\u018e\1\u01d0\1\u0212\1\u0254\1\u0296\1\u02d8\1\u031a\1\u035c"+
    "\1\u039e\1\u03e0\1\u0422\1\u0464\1\u04a6\1\u04e8\1\u052a\1\u056c"+
    "\1\u05ae\1\u05f0\0\u0462\1\u0632\1\u0674\1\u06b6\1\u06f8\0\u08c4"+
    "\1\u073a\1\u077c\0\u0462\0\u0462\1\u07be\1\u0800\0\u08c4\0\u08c4"+
    "\1\u0842\0\u0462\1\u0884\0\u08c4\1\u08c6\1\u0908\1\u094a\1\u098c"+
    "\1\u09ce\1\u0a10\1\u0a52\1\u0a94\1\u0ad6\1\u0b18\1\u0b5a\1\u0b9c"+
    "\1\u0bde\1\u0c20\0\u08c4\1\u0c62\1\u0ca4\1\u0ce6\1\u0d28\1\u0d6a"+
    "\1\u0dac\1\u0dee\1\u0e30\1\u0e72\1\u0eb4\1\u0ef6\1\u0f38\1\u0f7a"+
    "\1\u0fbc\1\u0ffe\1\u1040\1\u1082\1\u10c4\1\u1106\1\u1148\1\u118a"+
    "\1\u11cc\0\u0462";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1098];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\22\1\23\1\22\1\24\5\22\1\25\2\22\1\26"+
    "\11\22\1\27\1\22\1\30\1\31\1\32\2\22\1\33"+
    "\1\22\1\34\2\22\1\35\1\22\1\36\6\22\1\37"+
    "\3\22\1\40\5\22\1\41\15\22\1\23\1\22\1\24"+
    "\5\22\1\25\1\22\1\42\1\26\11\22\1\27\1\22"+
    "\1\30\1\31\1\32\2\22\1\33\1\22\1\34\2\22"+
    "\1\35\1\22\1\36\6\22\1\37\3\22\1\40\5\22"+
    "\1\41\12\22\3\43\1\44\7\43\1\45\2\43\1\46"+
    "\1\47\1\43\1\50\4\43\1\51\3\43\1\52\1\43"+
    "\1\53\10\43\1\22\7\43\1\54\7\43\1\55\14\43"+
    "\3\22\1\23\7\22\1\25\16\22\1\30\1\22\1\32"+
    "\20\22\1\37\27\22\1\23\7\22\1\25\2\22\1\56"+
    "\13\22\1\30\1\22\1\32\20\22\1\37\1\22\1\57"+
    "\25\22\1\23\2\22\1\60\4\22\1\25\2\22\1\61"+
    "\1\62\12\22\1\30\1\22\1\32\4\22\1\63\4\22"+
    "\1\64\1\65\5\22\1\37\27\22\1\23\2\22\1\60"+
    "\4\22\1\25\2\22\1\61\1\62\12\22\1\30\1\22"+
    "\1\32\4\22\1\63\4\22\1\64\1\65\5\22\1\37"+
    "\1\22\1\66\23\22\1\67\1\22\1\23\1\22\6\67"+
    "\1\70\1\67\1\22\14\67\1\71\1\67\1\72\2\22"+
    "\3\67\2\22\1\67\1\22\6\67\1\22\1\37\2\22"+
    "\6\67\1\22\2\67\2\22\2\67\1\22\1\67\1\22"+
    "\2\67\3\22\1\23\7\22\1\25\16\22\1\30\1\22"+
    "\1\32\4\22\1\73\13\22\1\37\27\22\1\23\7\22"+
    "\1\25\16\22\1\30\1\22\1\32\20\22\1\74\27\22"+
    "\1\23\1\22\1\75\5\22\1\25\16\22\1\30\1\22"+
    "\1\32\20\22\1\37\27\22\1\23\1\22\1\75\5\22"+
    "\1\25\16\22\1\30\1\22\1\32\10\22\1\76\7\22"+
    "\1\37\26\22\1\77\1\23\7\22\1\25\16\22\1\30"+
    "\1\22\1\32\5\22\2\77\11\22\1\37\26\22\1\100"+
    "\1\23\7\22\1\25\16\22\1\30\1\22\1\32\5\22"+
    "\2\100\10\22\1\101\1\37\26\22\1\102\1\23\7\22"+
    "\1\25\16\22\1\30\1\22\1\32\5\22\2\102\10\22"+
    "\1\103\1\37\27\22\1\23\7\22\1\25\1\22\1\104"+
    "\1\105\13\22\1\30\1\22\1\32\2\22\1\106\15\22"+
    "\1\37\27\22\1\23\7\22\1\25\16\22\1\30\1\22"+
    "\1\32\1\107\17\22\1\37\24\22\120\0\1\110\73\0"+
    "\1\111\115\0\1\112\62\0\1\113\104\0\1\114\124\0"+
    "\1\115\102\0\1\116\100\0\1\117\70\0\1\120\30\0"+
    "\1\121\41\0\1\122\106\0\1\123\103\0\1\124\64\0"+
    "\1\125\106\0\1\126\77\0\1\127\107\0\1\130\63\0"+
    "\16\131\1\132\26\131\1\0\52\131\1\133\26\131\1\0"+
    "\52\131\1\132\5\131\1\134\20\131\1\0\52\131\1\132"+
    "\21\131\1\135\4\131\1\0\15\131\1\136\34\131\1\132"+
    "\1\131\1\137\24\131\1\0\52\131\1\132\3\131\1\140"+
    "\22\131\1\0\52\131\1\132\10\131\1\141\15\131\1\0"+
    "\52\131\1\132\14\131\1\142\11\131\1\0\52\131\1\132"+
    "\14\131\1\143\11\131\1\0\41\131\1\144\10\131\1\132"+
    "\26\131\1\0\52\131\1\132\14\131\1\145\11\131\1\0"+
    "\34\131\45\56\1\0\34\56\10\0\1\146\107\0\1\147"+
    "\75\0\1\150\102\0\1\151\102\0\1\152\16\0\1\153"+
    "\61\0\1\154\67\0\1\155\3\0\10\155\1\156\17\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\6\155\1\157\10\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\4\155\1\160\10\155"+
    "\1\161\1\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\1\0\1\155\3\0\10\155\1\156\15\155"+
    "\1\162\1\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\53\0\1\163\33\0\1\164\1\165\10\0"+
    "\1\165\1\0\1\165\4\0\1\165\3\0\1\165\4\0"+
    "\1\165\1\0\1\165\2\0\1\165\1\0\2\165\1\0"+
    "\1\165\10\0\1\165\2\0\1\165\1\0\1\165\3\0"+
    "\2\165\1\0\1\165\1\0\1\165\11\0\1\166\71\0"+
    "\45\77\1\0\34\77\2\0\1\100\1\167\12\0\1\170"+
    "\23\0\2\100\10\0\1\167\1\0\1\171\25\0\1\100"+
    "\37\0\2\100\40\0\1\102\1\172\12\0\1\173\23\0"+
    "\2\102\10\0\1\172\1\0\1\174\25\0\1\102\37\0"+
    "\2\102\54\0\1\175\65\0\1\176\13\0\1\177\23\0"+
    "\2\176\57\0\1\200\115\0\1\201\46\0\1\202\37\0"+
    "\2\202\47\0\1\203\130\0\1\204\51\0\1\205\113\0"+
    "\1\206\107\0\1\207\61\0\1\210\111\0\1\211\74\0"+
    "\1\212\76\0\1\213\113\0\1\214\110\0\1\215\103\0"+
    "\1\216\77\0\1\217\74\0\1\220\71\0\1\221\144\0"+
    "\1\222\22\0\2\131\1\223\13\131\1\132\21\131\1\135"+
    "\1\131\2\223\1\131\1\0\15\131\1\136\34\131\1\132"+
    "\21\131\1\224\4\131\1\0\52\131\1\132\14\131\1\225"+
    "\11\131\1\0\52\131\1\132\1\131\1\226\24\131\1\0"+
    "\44\131\1\227\5\131\1\132\26\131\1\0\52\131\1\132"+
    "\4\131\1\230\21\131\1\0\52\131\1\132\1\131\1\231"+
    "\24\131\1\0\52\131\1\132\11\131\1\232\14\131\1\0"+
    "\52\131\1\132\1\131\1\233\24\131\1\0\52\131\1\132"+
    "\12\131\1\234\13\131\1\0\52\131\1\132\1\131\1\235"+
    "\24\131\1\0\34\131\13\0\1\236\104\0\1\237\106\0"+
    "\1\240\100\0\1\241\72\0\1\242\110\0\1\243\127\0"+
    "\1\244\47\0\1\245\64\0\1\155\3\0\10\155\1\156"+
    "\17\155\2\0\1\155\1\246\1\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\3\155\1\247"+
    "\4\155\1\156\17\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\10\155\1\156"+
    "\12\155\1\250\4\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\10\155\1\156"+
    "\2\155\1\251\14\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\12\0\1\252\120\0\1\217\37\0"+
    "\1\253\101\0\1\253\21\0\1\254\161\0\1\255\12\0"+
    "\1\100\13\0\1\170\23\0\2\100\10\0\1\167\116\0"+
    "\1\256\12\0\1\102\13\0\1\173\23\0\2\102\10\0"+
    "\1\172\53\0\1\257\55\0\1\176\1\260\12\0\1\261"+
    "\17\0\1\262\3\0\2\176\54\0\1\263\121\0\1\264"+
    "\45\0\1\202\1\110\12\0\1\265\23\0\2\202\67\0"+
    "\1\266\66\0\1\267\74\0\1\270\101\0\1\271\77\0"+
    "\1\272\20\0\1\273\111\0\1\274\57\0\1\275\3\0"+
    "\1\276\117\0\1\277\57\0\1\300\72\0\1\301\125\0"+
    "\1\302\126\0\1\303\34\0\1\304\76\0\1\305\104\0"+
    "\1\306\66\0\2\131\1\223\1\307\12\131\1\310\23\131"+
    "\2\223\1\131\1\0\52\131\1\311\26\131\1\0\45\131"+
    "\1\312\4\131\1\132\26\131\1\0\52\131\1\132\6\131"+
    "\1\313\17\131\1\0\50\131\1\314\1\131\1\132\26\131"+
    "\1\0\47\131\1\315\2\131\1\132\26\131\1\0\46\131"+
    "\1\316\3\131\1\132\26\131\1\0\43\131\1\317\6\131"+
    "\1\132\11\131\1\320\14\131\1\0\52\131\1\321\3\131"+
    "\1\322\22\131\1\0\47\131\1\323\2\131\1\132\26\131"+
    "\1\0\52\131\1\324\26\131\1\0\34\131\11\0\1\325"+
    "\106\0\1\326\136\0\1\327\35\0\1\330\116\0\1\331"+
    "\106\0\1\332\121\0\1\333\30\0\45\245\1\0\34\245"+
    "\1\0\1\155\3\0\10\155\1\156\1\334\16\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\10\155\1\156\17\155\2\0\1\155\1\335"+
    "\1\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\2\155\1\336\5\155\1\156\12\155\1\337"+
    "\4\155\2\0\3\155\2\0\1\155\1\0\6\155\4\0"+
    "\6\155\1\156\2\155\2\0\2\155\1\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\10\155\1\156\1\340\3\155"+
    "\1\341\12\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\11\0\1\342\70\0\45\253\1\0\34\253"+
    "\31\0\1\343\66\0\1\344\101\0\1\345\132\0\1\346"+
    "\34\0\1\176\37\0\2\176\40\0\1\347\13\0\1\261"+
    "\17\0\1\262\3\0\2\347\40\0\1\350\13\0\1\262"+
    "\17\0\1\262\3\0\2\350\127\0\1\351\46\0\1\352"+
    "\74\0\1\353\103\0\1\354\102\0\1\355\76\0\1\356"+
    "\60\0\1\357\111\0\1\360\74\0\1\361\104\0\1\362"+
    "\105\0\1\363\75\0\1\364\73\0\1\365\116\0\1\366"+
    "\66\0\1\367\105\0\1\370\73\0\1\371\113\0\1\372"+
    "\104\0\1\373\105\0\1\374\50\0\2\131\1\223\13\131"+
    "\1\132\23\131\2\223\1\131\1\0\52\131\1\132\12\131"+
    "\1\375\6\131\1\135\4\131\1\0\15\131\1\136\34\131"+
    "\1\132\15\131\1\376\3\131\1\135\4\131\1\0\15\131"+
    "\1\136\34\131\1\132\26\131\1\0\16\131\1\377\33\131"+
    "\1\132\12\131\1\u0100\13\131\1\0\52\131\1\u0101\26\131"+
    "\1\0\52\131\1\132\5\131\1\u0102\20\131\1\0\43\131"+
    "\1\u0103\6\131\1\132\26\131\1\0\52\131\1\132\1\131"+
    "\1\u0104\24\131\1\0\47\131\1\u0105\2\131\1\132\26\131"+
    "\1\0\52\131\1\132\3\131\1\u0106\15\131\1\135\4\131"+
    "\1\0\15\131\1\136\34\131\1\u0107\26\131\1\0\52\131"+
    "\1\132\3\131\1\u0108\22\131\1\0\52\131\1\132\21\131"+
    "\1\135\4\131\1\0\5\131\1\u0109\7\131\1\136\16\131"+
    "\33\0\1\u010a\64\0\1\u010b\114\0\1\u010c\75\0\1\u010d"+
    "\64\0\1\u010e\116\0\1\u010f\67\0\1\u0110\67\0\1\155"+
    "\3\0\10\155\1\156\16\155\1\u0111\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\5\155\1\u0112\2\155\1\156\17\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\2\155\1\u0113\14\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\6\155\1\u0114\1\155\1\156\17\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\4\155\1\u0115\12\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\1\u0116\16\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\53\0\1\u0117\61\0\1\u0118"+
    "\50\0\1\100\37\0\2\100\10\0\1\167\27\0\1\102"+
    "\37\0\2\102\10\0\1\172\107\0\1\u0119\21\0\1\347"+
    "\1\u011a\12\0\1\u011b\23\0\2\347\40\0\1\350\1\u011c"+
    "\12\0\1\u011d\23\0\2\350\54\0\1\u011e\101\0\1\u011f"+
    "\103\0\1\u0120\103\0\1\u0121\112\0\1\u0122\64\0\1\u0123"+
    "\101\0\1\u0124\114\0\1\u0125\74\0\1\u0126\73\0\1\u0127"+
    "\73\0\1\u0128\104\0\1\u0129\110\0\1\u012a\132\0\1\u012b"+
    "\52\0\1\u012c\116\0\1\u012d\56\0\1\u012e\145\0\1\u012f"+
    "\35\0\1\u0130\75\0\1\u0131\67\0\16\131\1\132\1\131"+
    "\1\u0132\24\131\1\0\52\131\1\132\14\131\1\u0133\11\131"+
    "\1\0\44\131\1\u0134\5\131\1\132\26\131\1\0\52\131"+
    "\1\u0135\26\131\1\0\52\131\1\132\2\131\1\u0136\16\131"+
    "\1\135\4\131\1\0\15\131\1\136\30\131\1\u0137\3\131"+
    "\1\132\26\131\1\0\52\131\1\132\11\131\1\u0138\14\131"+
    "\1\0\52\131\1\132\12\131\1\u0139\13\131\1\0\52\131"+
    "\1\132\5\131\1\u013a\20\131\1\0\44\131\1\u013b\5\131"+
    "\1\132\26\131\1\0\47\131\1\u013c\2\131\1\132\21\131"+
    "\1\135\4\131\1\0\15\131\1\136\34\131\1\132\26\131"+
    "\1\0\14\131\1\u013d\32\131\1\u013e\2\131\1\132\26\131"+
    "\1\0\34\131\24\0\1\u013f\73\0\1\u0140\73\0\1\u0141"+
    "\107\0\1\u0142\114\0\1\u0143\66\0\1\u0144\135\0\1\u0145"+
    "\30\0\1\155\3\0\10\155\1\156\15\155\1\u0146\1\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\13\155\1\u0147\3\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\13\155\1\u0148\3\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\6\155\1\u0149\10\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\3\155\1\u014a\4\155\1\156\17\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\6\155\1\u014b\1\155\1\156\17\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\16\0\1\u014c\105\0\1\u014d\152\0\1\u014e\10\0\1\347"+
    "\37\0\2\347\40\0\1\u014f\13\0\1\u011b\23\0\2\u014f"+
    "\40\0\1\350\37\0\2\350\40\0\1\u0150\13\0\1\u011d"+
    "\23\0\2\u0150\40\0\1\u0151\37\0\2\u0151\75\0\1\u0152"+
    "\64\0\1\u0153\75\0\1\u0154\103\0\1\u0155\63\0\1\u0156"+
    "\37\0\2\u0156\60\0\1\u0157\67\0\1\u0158\131\0\1\u0159"+
    "\60\0\1\u015a\73\0\1\u015b\104\0\1\u015c\103\0\1\u015d"+
    "\116\0\1\u015e\71\0\1\u015f\71\0\1\u0160\73\0\1\u0161"+
    "\2\0\1\u0162\51\0\1\u0163\52\0\1\u0164\102\0\1\u0165"+
    "\115\0\1\u0166\31\0\16\131\1\132\3\131\1\u0167\22\131"+
    "\1\0\52\131\1\132\1\131\1\u0168\24\131\1\0\52\131"+
    "\1\132\21\131\1\u0169\4\131\1\0\50\131\1\u016a\1\131"+
    "\1\132\21\131\1\135\4\131\1\0\15\131\1\136\34\131"+
    "\1\132\3\131\1\u016b\22\131\1\0\45\131\1\u016c\4\131"+
    "\1\132\26\131\1\0\44\131\1\u016d\5\131\1\132\26\131"+
    "\1\0\44\131\1\u016e\5\131\1\132\26\131\1\0\52\131"+
    "\1\132\21\131\1\u016f\4\131\1\0\45\131\1\u0170\4\131"+
    "\1\132\26\131\1\0\50\131\1\u0171\1\131\1\132\26\131"+
    "\1\0\52\131\1\132\14\131\1\u0172\11\131\1\0\52\131"+
    "\1\132\26\131\1\0\2\131\1\u0173\31\131\16\0\1\u0174"+
    "\101\0\1\u0175\105\0\1\u0176\110\0\1\u0177\75\0\1\u0178"+
    "\72\0\1\u0179\101\0\1\u017a\64\0\1\155\3\0\10\155"+
    "\1\156\2\155\1\u017b\14\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\7\155\1\u017c\7\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\3\155"+
    "\1\u017d\4\155\1\156\17\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\17\155\2\0\1\155\1\u017e\1\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\4\155"+
    "\1\u017f\3\155\1\156\17\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\7\155"+
    "\1\u0180\1\156\17\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\25\0\1\u0181\72\0\1\u0182\132\0"+
    "\1\u0183\34\0\1\u014f\1\u0184\12\0\1\u0185\23\0\2\u014f"+
    "\26\0\1\u0186\11\0\1\u0150\1\u0187\36\0\2\u0150\26\0"+
    "\1\u0186\11\0\1\u0151\1\u011e\36\0\2\u0151\60\0\1\u0188"+
    "\103\0\1\u0189\57\0\1\u018a\13\0\1\u018b\23\0\2\u018a"+
    "\54\0\1\u018c\63\0\45\u0156\1\0\34\u0156\10\0\1\u018d"+
    "\113\0\1\u018e\75\0\1\u018f\75\0\1\u0190\77\0\1\u0191"+
    "\103\0\1\u0192\136\0\1\u0193\54\0\1\u0194\75\0\1\u0195"+
    "\105\0\1\u0196\67\0\1\u0197\115\0\1\u0198\65\0\1\u0199"+
    "\102\0\1\u019a\123\0\1\u019b\56\0\1\u019c\71\0\16\131"+
    "\1\132\5\131\1\u019d\20\131\1\0\52\131\1\u019e\26\131"+
    "\1\0\52\131\1\u019f\26\131\1\0\44\131\1\u01a0\5\131"+
    "\1\132\26\131\1\0\44\131\1\u01a1\5\131\1\132\26\131"+
    "\1\0\52\131\1\132\6\131\1\u01a1\17\131\1\0\52\131"+
    "\1\132\5\131\1\u01a2\20\131\1\0\52\131\1\132\3\131"+
    "\1\u01a3\22\131\1\0\52\131\1\u01a4\26\131\1\0\44\131"+
    "\1\u01a5\5\131\1\132\26\131\1\0\46\131\1\u01a6\3\131"+
    "\1\132\26\131\1\0\45\131\1\u01a7\4\131\1\132\26\131"+
    "\1\0\44\131\1\u01a8\5\131\1\132\26\131\1\0\34\131"+
    "\16\0\1\u01a9\101\0\1\u01aa\110\0\1\u01ab\107\0\1\u01ac"+
    "\64\0\1\u01ad\101\0\1\u01ae\101\0\1\u01af\64\0\1\155"+
    "\3\0\10\155\1\156\1\u01b0\16\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\1\u01b1\16\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\4\155\1\u01b2\12\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\1\u01b3\16\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\3\155\1\u01b4"+
    "\4\155\1\156\17\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\5\155\1\u01b5"+
    "\2\155\1\156\17\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\53\0\1\u01b6\26\0\45\u0182\1\0"+
    "\34\u0182\37\0\1\u01b7\44\0\1\u014f\37\0\2\u014f\40\0"+
    "\1\u01b8\13\0\1\u0185\23\0\2\u01b8\54\0\1\u01b9\17\0"+
    "\1\u01b9\45\0\1\u0150\37\0\2\u0150\51\0\1\u01ba\104\0"+
    "\1\u01bb\6\0\1\u01bc\56\0\1\u018a\1\u01bd\12\0\1\u01be"+
    "\23\0\2\u018a\53\0\1\u01bf\162\0\1\u01c0\12\0\1\u01c1"+
    "\110\0\1\u01c2\160\0\1\u01c3\27\0\1\u01c4\70\0\1\u01c5"+
    "\112\0\1\u01c6\71\0\1\u01c7\117\0\1\u01c8\101\0\1\u01c9"+
    "\57\0\1\u01ca\106\0\1\u01cb\116\0\1\u01cc\75\0\1\u01cd"+
    "\140\0\1\u01ce\35\0\1\u01cf\77\0\1\u01d0\63\0\16\131"+
    "\1\u01d1\6\131\1\u01d2\17\131\1\0\52\131\1\132\21\131"+
    "\1\135\4\131\1\0\15\131\1\136\12\131\1\u01d3\3\131"+
    "\45\u019f\1\0\34\u019f\16\131\1\132\26\131\1\0\13\131"+
    "\1\u01d4\20\131\16\u01a1\1\u01d5\26\u01a1\1\0\34\u01a1\16\131"+
    "\1\132\12\131\1\u01a1\13\131\1\0\52\131\1\u01d6\26\131"+
    "\1\0\52\131\1\132\21\131\1\135\4\131\1\0\15\131"+
    "\1\136\11\131\1\u01d7\16\131\1\u01d8\3\131\1\132\26\131"+
    "\1\0\52\131\1\132\4\131\1\u01d9\21\131\1\0\52\131"+
    "\1\132\26\131\1\0\16\131\1\u01da\33\131\1\u01db\26\131"+
    "\1\0\34\131\15\0\1\u01dc\102\0\1\u01dd\100\0\1\u01de"+
    "\102\0\1\u01df\100\0\1\u01e0\101\0\1\u01e1\101\0\1\u01e2"+
    "\65\0\1\155\3\0\10\155\1\156\17\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\u01e3\1\0\2\155\1\0\1\155"+
    "\3\0\10\155\1\156\1\u01e4\16\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\1\u01e5\16\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\17\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\u01c3\1\155"+
    "\1\0\2\155\1\0\1\155\3\0\5\155\1\u01e6\2\155"+
    "\1\156\17\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\1\0\1\155\3\0\10\155\1\156\5\155"+
    "\1\u01e7\11\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\12\0\1\u01e8\115\0\1\u01e9\55\0\1\u01b8"+
    "\1\u01ea\12\0\1\u0185\23\0\2\u01b8\40\0\1\u01eb\13\0"+
    "\1\u01b9\17\0\1\u01b9\3\0\2\u01eb\76\0\1\u01ec\55\0"+
    "\1\u01ed\103\0\1\u01bb\65\0\1\u018a\37\0\2\u018a\111\0"+
    "\1\u01ee\44\0\1\u01ef\104\0\1\u01f0\113\0\1\u01f1\57\0"+
    "\1\u01f2\127\0\1\u01f3\115\0\1\u01f4\76\0\1\u01f5\55\0"+
    "\1\u01f6\105\0\1\u01f7\61\0\1\u01f8\124\0\1\u01f9\60\0"+
    "\1\u01fa\150\0\1\u01fb\30\0\1\u01fc\122\0\1\u01fd\141\0"+
    "\1\u01fe\26\0\1\u01ff\145\0\1\u0200\17\0\14\131\1\u0201"+
    "\1\131\1\132\21\131\1\135\4\131\1\0\15\131\1\136"+
    "\34\131\1\u01d1\26\131\1\0\52\131\1\132\2\131\1\u0202"+
    "\23\131\1\0\52\131\1\132\12\131\1\u019f\13\131\1\0"+
    "\34\131\16\u01a1\1\u01d5\21\u01a1\1\u0203\4\u01a1\1\0\15\u01a1"+
    "\1\u0204\16\u01a1\11\131\1\u0205\4\131\1\132\21\131\1\135"+
    "\4\131\1\0\15\131\1\136\34\131\1\132\20\131\1\u0206"+
    "\5\131\1\0\52\131\1\132\26\131\1\0\2\131\1\u0207"+
    "\47\131\1\132\5\131\1\u0208\20\131\1\0\52\131\1\132"+
    "\26\131\1\0\23\131\1\u0209\12\131\1\u020a\13\131\1\132"+
    "\21\131\1\135\1\131\2\u020a\1\131\1\0\15\131\1\136"+
    "\16\131\16\0\1\u020b\101\0\1\u020c\101\0\1\u020d\70\0"+
    "\1\u020e\112\0\1\u020f\101\0\1\u0210\101\0\1\u0211\64\0"+
    "\1\155\3\0\10\155\1\156\3\155\1\u0212\13\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\10\155\1\156\1\u0213\16\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\4\155\1\u0214\3\155\1\156\17\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\10\155\1\156\17\155\2\0\3\155\2\0\1\155"+
    "\1\0\2\155\1\u0215\3\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\10\155\1\156\6\155\1\u0216\10\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\7\0\1\u0217"+
    "\161\0\1\u0218\14\0\1\u01b8\37\0\2\u01b8\40\0\1\u01eb"+
    "\1\u0219\12\0\1\u021a\23\0\2\u01eb\46\0\1\u021b\101\0"+
    "\1\u021c\104\0\1\u021d\70\0\1\u021e\37\0\2\u021e\43\0"+
    "\1\u021f\116\0\1\u0220\112\0\1\u0221\144\0\1\u0222\34\0"+
    "\1\u0223\60\0\1\u0224\121\0\1\u0225\61\0\1\u0226\116\0"+
    "\1\u0227\72\0\1\u0228\107\0\1\u0229\73\0\1\u022a\105\0"+
    "\1\u022b\101\0\1\u022c\61\0\1\u022d\37\0\2\u022d\46\0"+
    "\1\u022e\71\0\10\131\1\u022f\5\131\1\132\26\131\1\0"+
    "\41\131\1\u0230\10\131\1\132\26\131\1\0\34\131\16\u01a1"+
    "\1\u01d5\14\u01a1\1\u0231\11\u01a1\1\0\52\u01a1\1\u01d5\1\u01a1"+
    "\1\u0232\24\u01a1\1\0\34\u01a1\16\131\1\132\14\131\1\u0233"+
    "\11\131\1\0\52\131\1\132\26\131\1\0\30\131\1\u0234"+
    "\13\131\1\u0235\5\131\1\132\26\131\1\0\52\131\1\132"+
    "\11\131\1\u0236\14\131\1\0\36\131\1\u020a\1\u0237\12\131"+
    "\1\u0238\23\131\2\u020a\1\131\1\0\34\131\45\u020b\1\0"+
    "\34\u020b\54\0\1\u020f\1\u0239\26\0\1\u023a\37\0\2\u023a"+
    "\46\0\1\u023b\71\0\45\u020f\1\0\34\u020f\45\u0210\1\0"+
    "\34\u0210\2\0\1\u023c\37\0\2\u023c\37\0\1\155\3\0"+
    "\1\u023d\7\155\1\156\17\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\1\u023e\16\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\10\155\1\156"+
    "\15\155\1\u023f\1\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\3\155\1\u0240"+
    "\4\155\1\156\17\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\10\155\1\156"+
    "\12\155\1\u0241\4\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\16\0\1\u0242\152\0\1\u0243\14\0"+
    "\1\u01eb\37\0\2\u01eb\40\0\1\u0244\13\0\1\u021a\23\0"+
    "\2\u0244\54\0\1\u0245\144\0\1\u0246\45\0\1\u0247\54\0"+
    "\45\u021e\1\0\34\u021e\26\0\1\u0248\104\0\1\u0249\100\0"+
    "\1\u024a\106\0\1\u024b\54\0\1\u024c\107\0\1\u024d\73\0"+
    "\1\u024e\107\0\1\u024f\114\0\1\u0250\55\0\1\u0251\117\0"+
    "\1\u0252\140\0\1\u0253\31\0\1\u0254\122\0\1\u0255\50\0"+
    "\1\u022d\1\u01ff\12\0\1\u0256\23\0\2\u022d\62\0\1\u0257"+
    "\55\0\16\131\1\132\26\131\1\0\13\131\1\u0258\36\131"+
    "\1\132\7\131\1\u0259\16\131\1\0\34\131\11\u01a1\1\u025a"+
    "\4\u01a1\1\u01d5\26\u01a1\1\0\52\u01a1\1\u01d5\6\u01a1\1\u025b"+
    "\17\u01a1\1\0\34\u01a1\16\131\1\132\11\131\1\u025c\14\131"+
    "\1\0\52\131\1\132\16\131\1\u025d\7\131\1\0\52\131"+
    "\1\u025e\26\131\1\0\44\131\1\u025f\5\131\1\132\26\131"+
    "\1\0\36\131\1\u020a\13\131\1\132\23\131\2\u020a\1\131"+
    "\1\0\45\131\1\u0260\4\131\1\132\21\131\1\135\4\131"+
    "\1\0\15\131\1\136\16\131\55\0\1\u0261\24\0\45\u023a"+
    "\1\0\34\u023a\11\0\1\u0262\72\0\1\u023c\1\u0211\36\0"+
    "\2\u023c\37\0\1\155\3\0\10\155\1\156\10\155\1\u0263"+
    "\6\155\2\0\3\155\2\0\1\155\1\0\6\155\4\0"+
    "\6\155\1\156\2\155\2\0\2\155\1\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\10\155\1\156\1\u0264\16\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\12\155\1\u0265\4\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\1\u0266\16\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\3\155\1\u0267\4\155\1\156\17\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\13\0"+
    "\1\u0268\107\0\1\u0269\62\0\1\u0244\1\u026a\36\0\2\u0244"+
    "\26\0\1\u026b\50\0\1\u026c\71\0\1\u026d\66\0\1\u026e"+
    "\101\0\1\u026f\101\0\1\u0270\113\0\1\u0271\53\0\1\u0272"+
    "\37\0\2\u0272\60\0\1\u0273\61\0\1\u0274\37\0\2\u0274"+
    "\62\0\1\u0275\73\0\1\u0276\101\0\1\u0277\73\0\1\u0278"+
    "\107\0\1\u0279\73\0\1\u027a\115\0\1\u027b\111\0\1\u027c"+
    "\77\0\1\u027d\74\0\1\u027e\54\0\16\131\1\132\12\131"+
    "\1\u027f\13\131\1\0\52\131\1\u0280\26\131\1\0\34\131"+
    "\16\u01a1\1\u01d5\26\u01a1\1\0\16\u01a1\1\u0281\33\u01a1\1\u01d5"+
    "\12\u01a1\1\u0282\13\u01a1\1\0\34\u01a1\16\131\1\132\11\131"+
    "\1\u0283\14\131\1\0\36\131\1\u0284\13\131\1\132\23\131"+
    "\2\u0284\1\131\1\0\36\131\1\u0285\13\131\1\132\21\131"+
    "\1\135\1\131\2\u0285\1\131\1\0\15\131\1\136\34\131"+
    "\1\132\5\131\1\u0286\20\131\1\0\52\131\1\132\3\131"+
    "\1\u0287\22\131\1\0\34\131\55\0\1\u0288\55\0\1\u0289"+
    "\51\0\1\155\3\0\10\155\1\156\1\u028a\16\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\10\155\1\156\1\u028b\16\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\10\155\1\156\12\155\1\u028c\4\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\1\0\1\155"+
    "\1\u0274\2\0\10\155\1\156\17\155\2\0\3\155\2\u0274"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\6\155\1\u028d\10\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\22\0\1\u028e\153\0"+
    "\1\u028f\7\0\1\u0244\37\0\2\u0244\54\0\1\u0290\17\0"+
    "\1\u0290\56\0\1\u0291\156\0\1\u0292\13\0\1\u0293\37\0"+
    "\2\u0293\117\0\1\u0294\33\0\1\u0295\70\0\1\u0296\37\0"+
    "\2\u0296\54\0\1\u0297\65\0\1\u0274\1\u024d\12\0\1\u0298"+
    "\23\0\2\u0274\67\0\1\u0299\66\0\1\u029a\72\0\1\u029b"+
    "\103\0\1\u029c\121\0\1\u029d\75\0\1\u029e\77\0\1\u029f"+
    "\66\0\1\u02a0\104\0\1\u02a1\100\0\1\u02a2\67\0\2\131"+
    "\1\u02a3\13\131\1\132\21\131\1\135\1\131\2\u02a3\1\131"+
    "\1\0\15\131\1\136\16\131\10\u01a1\1\u02a4\5\u01a1\1\u01d5"+
    "\26\u01a1\1\0\52\u01a1\1\u02a5\26\u01a1\1\0\34\u01a1\13\131"+
    "\1\u02a6\2\131\1\132\26\131\1\0\36\131\1\u02a7\13\131"+
    "\1\132\23\131\2\u02a7\1\131\1\0\36\131\1\u0285\1\u02a8"+
    "\12\131\1\u02a9\23\131\2\u0285\1\131\1\0\52\131\1\132"+
    "\12\131\1\u02aa\13\131\1\0\44\131\1\u02ab\5\131\1\132"+
    "\26\131\1\0\34\131\55\0\1\u02ac\57\0\1\u02ad\47\0"+
    "\1\155\1\u0293\2\0\10\155\1\156\17\155\2\0\3\155"+
    "\2\u0293\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\10\155\1\156\1\u02ae\16\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\6\155\1\u02af\1\155\1\156\17\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\1\0\1\155\3\0"+
    "\10\155\1\156\13\155\1\u02b0\3\155\2\0\3\155\2\0"+
    "\1\155\1\0\6\155\4\0\6\155\1\156\2\155\2\0"+
    "\2\155\1\0\1\155\1\0\2\155\10\0\1\u02b1\73\0"+
    "\1\u02b2\13\0\1\u0290\17\0\1\u0290\3\0\2\u02b2\60\0"+
    "\1\u02b3\72\0\1\u02b4\70\0\1\u0293\1\u026f\12\0\1\u02b5"+
    "\23\0\2\u0293\71\0\1\u02b6\72\0\1\u02b7\72\0\1\u02b8"+
    "\102\0\1\u02b9\73\0\1\u02ba\107\0\1\u02bb\101\0\1\u02bc"+
    "\76\0\1\u02bd\117\0\1\u02be\103\0\1\u02bf\77\0\1\u02c0"+
    "\66\0\1\u02c1\123\0\1\u02c2\63\0\1\u02c3\110\0\1\u02c4"+
    "\50\0\2\131\1\u02a3\1\u02c5\12\131\1\u02c6\23\131\2\u02a3"+
    "\1\131\1\0\34\131\16\u01a1\1\u01d5\21\u01a1\1\u02c7\4\u01a1"+
    "\1\0\50\u01a1\1\u02c8\1\u01a1\1\u01d5\21\u01a1\1\u0203\4\u01a1"+
    "\1\0\15\u01a1\1\u0204\16\u01a1\16\131\1\132\5\131\1\u02c9"+
    "\20\131\1\0\51\131\1\u02ca\1\132\26\131\1\0\36\131"+
    "\1\u0285\13\131\1\132\23\131\2\u0285\1\131\1\0\44\131"+
    "\1\u02cb\5\131\1\132\21\131\1\135\4\131\1\0\15\131"+
    "\1\136\34\131\1\u02cc\26\131\1\0\52\131\1\132\21\131"+
    "\1\u02cd\4\131\1\0\34\131\16\0\1\u02ce\105\0\1\u02cf"+
    "\60\0\1\155\3\0\10\155\1\156\1\u02d0\16\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\10\155\1\156\6\155\1\u02d1\10\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\2\155\2\0\2\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\3\0\10\155\1\156\1\u02d2\16\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\2\155"+
    "\2\0\2\155\1\0\1\155\1\0\2\155\16\0\1\u02d3"+
    "\65\0\1\u02b2\1\u02d4\12\0\1\u02d5\23\0\2\u02b2\63\0"+
    "\1\u02d6\76\0\1\u02d7\67\0\1\u02d8\113\0\1\u02d9\117\0"+
    "\1\u02da\43\0\1\u02db\37\0\2\u02db\43\0\1\u02dc\175\0"+
    "\1\u02dd\70\0\1\u02de\26\0\1\u02df\115\0\1\u02e0\103\0"+
    "\1\u02e1\64\0\1\u02e2\105\0\1\u02e3\104\0\1\u02e4\77\0"+
    "\1\u02e5\112\0\1\u02e6\45\0\2\131\1\u02a3\13\131\1\132"+
    "\23\131\2\u02a3\1\131\1\0\44\131\1\u02e7\5\131\1\132"+
    "\21\131\1\135\4\131\1\0\15\131\1\136\16\131\16\u01a1"+
    "\1\u019f\26\u01a1\1\0\44\u01a1\1\u02e8\5\u01a1\1\u01d5\26\u01a1"+
    "\1\0\34\u01a1\16\131\1\132\21\131\1\u02e9\4\131\1\0"+
    "\36\131\1\u02ea\13\131\1\132\23\131\2\u02ea\1\131\1\0"+
    "\52\131\1\132\26\131\1\0\33\131\1\u02eb\16\131\1\132"+
    "\21\131\1\135\4\131\1\0\15\131\1\136\4\131\1\u02ec"+
    "\23\131\1\u02ed\3\131\1\132\26\131\1\0\34\131\54\0"+
    "\1\u020f\101\0\1\u02ee\26\0\1\155\3\0\10\155\1\u02ef"+
    "\17\155\2\0\3\155\2\0\1\155\1\0\6\155\4\0"+
    "\6\155\1\156\2\155\2\0\2\155\1\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\10\155\1\156\17\155\2\0"+
    "\1\155\1\u02f0\1\155\2\0\1\155\1\0\6\155\4\0"+
    "\6\155\1\156\2\155\2\0\2\155\1\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\10\155\1\156\17\155\2\0"+
    "\3\155\2\0\1\155\1\0\6\155\4\0\6\155\1\156"+
    "\1\155\1\u02f1\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\34\0\1\u02f2\47\0\1\u02b2\37\0\2\u02b2\40\0\1\u02f3"+
    "\13\0\1\u02d5\23\0\2\u02f3\54\0\1\u02f4\72\0\1\u02f5"+
    "\173\0\1\u02f6\16\0\1\u02f7\101\0\1\u02f8\65\0\1\u02f9"+
    "\37\0\2\u02f9\47\0\1\u02fa\77\0\1\u02fb\102\0\1\u02fc"+
    "\71\0\45\u02df\1\0\34\u02df\53\0\1\u02fd\50\0\1\u02fe"+
    "\104\0\1\u02ff\74\0\1\u0300\71\0\1\u0301\124\0\1\u0302"+
    "\64\0\1\u0303\63\0\16\131\1\132\26\131\1\0\33\131"+
    "\1\u0304\16\u01a1\1\u01d5\26\u01a1\1\0\13\u01a1\1\u0305\20\u01a1"+
    "\16\131\1\u0306\26\131\1\0\36\131\1\u0307\13\131\1\132"+
    "\23\131\2\u0307\1\131\1\0\43\131\1\u0308\6\131\1\132"+
    "\26\131\1\0\44\131\1\u0309\5\131\1\132\26\131\1\0"+
    "\52\131\1\132\12\131\1\u030a\13\131\1\0\34\131\25\0"+
    "\1\u030b\72\0\1\u030c\64\0\1\155\3\0\10\155\1\156"+
    "\1\u030d\16\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\1\0\1\155\3\0\3\155\1\u030e\4\155"+
    "\1\156\17\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\33\0\1\u030f\50\0\1\u02f3\1\u0310\36\0"+
    "\2\u02f3\26\0\1\u0311\51\0\1\u0312\64\0\1\u0313\63\0"+
    "\1\u0314\167\0\1\u0315\21\0\1\u0316\74\0\1\u0317\115\0"+
    "\1\u0318\73\0\1\u0319\101\0\1\u031a\73\0\1\u031b\102\0"+
    "\1\u031c\101\0\1\u031d\106\0\1\u031e\70\0\1\u031f\74\0"+
    "\7\131\1\u0320\6\131\1\132\26\131\1\0\34\131\16\u01a1"+
    "\1\u01d5\12\u01a1\1\u019f\13\u01a1\1\0\34\u01a1\16\131\1\132"+
    "\21\131\1\135\4\131\1\0\15\131\1\136\11\131\1\u0321"+
    "\21\131\1\u0322\1\132\26\131\1\0\44\131\1\u0323\5\131"+
    "\1\132\26\131\1\0\52\131\1\132\5\131\1\u0324\20\131"+
    "\1\0\52\131\1\132\6\131\1\u0325\17\131\1\0\34\131"+
    "\56\0\1\u0326\23\0\45\u030c\1\0\34\u030c\1\0\1\155"+
    "\3\0\10\155\1\156\17\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\u0315\1\155\1\0\2\155\1\0\1\155\3\0\10\155"+
    "\1\156\6\155\1\u0327\10\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\20\0\1\u0328\63\0\1\u02f3"+
    "\37\0\2\u02f3\101\0\1\u0329\54\0\1\u032a\73\0\1\u032b"+
    "\130\0\1\u032c\44\0\1\u032d\37\0\2\u032d\60\0\1\u032e"+
    "\110\0\1\u032f\124\0\1\u0330\27\0\1\u0331\37\0\2\u0331"+
    "\47\0\1\u0332\121\0\1\u0333\101\0\1\u0334\121\0\1\u0335"+
    "\41\0\1\u0336\70\0\10\131\1\u0337\5\131\1\132\26\131"+
    "\1\0\52\131\1\132\20\131\1\u0338\5\131\1\0\36\131"+
    "\1\u0339\13\131\1\132\23\131\2\u0339\1\131\1\0\52\131"+
    "\1\132\3\131\1\u033a\22\131\1\0\52\131\1\132\12\131"+
    "\1\u033b\13\131\1\0\52\131\1\u033c\26\131\1\0\34\131"+
    "\16\0\1\u033d\64\0\1\155\3\0\10\155\1\156\13\155"+
    "\1\u033e\3\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\16\0\1\u033f\126\0\1\u0340\67\0\1\u0341"+
    "\72\0\1\u0342\155\0\1\u0343\5\0\1\u0344\37\0\2\u0344"+
    "\50\0\1\u0345\105\0\1\u0346\65\0\1\u0347\37\0\2\u0347"+
    "\40\0\1\u0331\1\u031a\36\0\2\u0331\67\0\1\u0348\75\0"+
    "\1\u02c2\107\0\1\u0349\101\0\1\u034a\61\0\1\u034b\66\0"+
    "\16\131\1\132\3\131\1\u034c\22\131\1\0\52\131\1\132"+
    "\26\131\1\0\30\131\1\u034d\5\131\1\u034e\13\131\1\132"+
    "\23\131\2\u034e\1\131\1\0\46\131\1\u034f\3\131\1\132"+
    "\26\131\1\0\52\131\1\u0350\26\131\1\0\47\131\1\u0351"+
    "\2\131\1\132\21\131\1\135\4\131\1\0\15\131\1\136"+
    "\16\131\15\0\1\u0352\65\0\1\155\3\0\10\155\1\156"+
    "\1\u0353\16\155\2\0\3\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\12\0\1\u0354\131\0\1\u0355\72\0\1\u0356"+
    "\60\0\1\u0357\124\0\1\u0358\143\0\1\u0359\12\0\1\u035a"+
    "\111\0\1\u035b\17\0\1\u035c\43\0\1\u0347\1\u0330\12\0"+
    "\1\u035d\23\0\2\u0347\71\0\1\u035e\70\0\1\u035f\73\0"+
    "\1\u0360\111\0\1\u0361\55\0\12\131\1\u0362\3\131\1\132"+
    "\26\131\1\0\52\131\1\132\16\131\1\u0363\7\131\1\0"+
    "\52\131\1\132\26\131\1\0\31\131\1\u0364\12\131\1\u0365"+
    "\5\131\1\132\26\131\1\0\52\131\1\132\1\131\1\u0366"+
    "\17\131\1\u0367\4\131\1\0\15\131\1\136\34\131\1\132"+
    "\5\131\1\u0368\20\131\1\0\34\131\45\u0352\1\0\34\u0352"+
    "\1\0\1\155\3\0\10\155\1\156\2\155\1\u0369\14\155"+
    "\2\0\1\155\1\u036a\1\155\2\0\1\155\1\0\6\155"+
    "\4\0\6\155\1\156\2\155\2\0\2\155\1\0\1\155"+
    "\1\0\2\155\24\0\1\u036b\73\0\1\u036c\101\0\1\u036d"+
    "\73\0\1\u036e\73\0\1\u036f\37\0\2\u036f\53\0\1\u0370"+
    "\110\0\1\u0371\64\0\1\u0372\125\0\1\u0373\121\0\1\u0374"+
    "\50\0\1\u0375\75\0\1\u0376\123\0\1\u0377\41\0\10\131"+
    "\1\u0378\5\131\1\132\26\131\1\0\36\131\1\u0379\13\131"+
    "\1\132\23\131\2\u0379\1\131\1\0\51\131\1\u037a\1\132"+
    "\26\131\1\0\52\131\1\132\5\131\1\u037b\20\131\1\0"+
    "\43\131\1\u037c\6\131\1\132\26\131\1\0\52\131\1\132"+
    "\14\131\1\u037d\11\131\1\0\52\131\1\132\21\131\1\u037e"+
    "\4\131\1\0\34\131\1\0\1\155\3\0\2\155\1\u037f"+
    "\5\155\1\156\17\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\10\155\1\156"+
    "\15\155\1\u0380\1\155\2\0\3\155\2\0\1\155\1\0"+
    "\6\155\4\0\6\155\1\156\2\155\2\0\2\155\1\0"+
    "\1\155\1\0\2\155\31\0\1\u0381\106\0\1\u0382\70\0"+
    "\1\u0383\100\0\1\u0384\57\0\1\u0385\37\0\2\u0385\133\0"+
    "\1\u0386\15\0\1\u0387\106\0\1\u0388\153\0\1\u0389\44\0"+
    "\1\u038a\64\0\1\u038b\100\0\1\u038c\64\0\16\131\1\132"+
    "\5\131\1\u038d\20\131\1\0\36\131\1\u038e\13\131\1\132"+
    "\23\131\2\u038e\1\131\1\0\52\131\1\132\26\131\1\0"+
    "\27\131\1\u038f\15\131\1\u0390\4\131\1\132\26\131\1\0"+
    "\52\131\1\u0391\26\131\1\0\45\131\1\312\4\131\1\132"+
    "\26\131\1\0\22\131\1\u0392\27\131\1\u0393\26\131\1\0"+
    "\34\131\1\0\1\155\3\0\10\155\1\156\1\u0394\16\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\10\155\1\156\17\155\2\0\3\155"+
    "\2\0\1\155\1\0\6\155\4\0\6\155\1\156\1\155"+
    "\1\u0395\2\0\2\155\1\0\1\155\1\0\2\155\10\0"+
    "\1\u0396\127\0\1\u0397\53\0\1\u0398\102\0\1\u0399\105\0"+
    "\1\u039a\66\0\1\u039b\37\0\2\u039b\46\0\1\u039c\151\0"+
    "\1\u039d\45\0\1\u0372\64\0\1\u039e\74\0\1\u039f\37\0"+
    "\2\u039f\54\0\1\u03a0\63\0\11\131\1\u03a1\4\131\1\132"+
    "\26\131\1\0\51\131\1\u03a2\1\132\26\131\1\0\36\131"+
    "\1\u03a3\13\131\1\132\23\131\2\u03a3\1\131\1\0\44\131"+
    "\1\u03a4\5\131\1\132\26\131\1\0\52\131\1\132\21\131"+
    "\1\135\4\131\1\0\12\131\1\u03a5\2\131\1\136\34\131"+
    "\1\132\5\131\1\u037c\20\131\1\0\36\131\1\u03a6\13\131"+
    "\1\132\21\131\1\135\1\131\2\u03a6\1\131\1\0\15\131"+
    "\1\136\16\131\1\0\1\155\3\0\10\155\1\156\17\155"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\1\u03a7"+
    "\5\155\1\156\2\155\2\0\2\155\1\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\10\155\1\156\6\155\1\u037f"+
    "\10\155\2\0\3\155\2\0\1\155\1\0\6\155\4\0"+
    "\6\155\1\156\2\155\2\0\2\155\1\0\1\155\1\0"+
    "\2\155\22\0\1\u03a8\114\0\1\u03a9\55\0\1\u03aa\100\0"+
    "\1\u03ab\73\0\1\u03ac\37\0\2\u03ac\40\0\1\u039b\1\u0386"+
    "\36\0\2\u039b\33\0\1\u03ad\20\0\1\u03ae\117\0\1\u03af"+
    "\72\0\1\u03b0\56\0\1\u039f\1\u038b\36\0\2\u039f\40\0"+
    "\1\u03b1\37\0\2\u03b1\36\0\10\131\1\u03b2\5\131\1\132"+
    "\26\131\1\0\36\131\1\u03b3\13\131\1\132\23\131\2\u03b3"+
    "\1\131\1\0\36\131\1\u03a3\1\u038f\12\131\1\132\23\131"+
    "\2\u03a3\1\131\1\0\31\131\1\u03b4\20\131\1\u03b5\26\131"+
    "\1\0\52\131\1\132\15\131\1\u03b6\10\131\1\0\36\131"+
    "\1\u03a6\1\u03b7\12\131\1\u03b8\23\131\2\u03a6\1\131\1\0"+
    "\34\131\1\0\1\155\3\0\10\155\1\156\16\155\1\u03b9"+
    "\2\0\3\155\2\0\1\155\1\0\6\155\4\0\6\155"+
    "\1\156\2\155\2\0\2\155\1\0\1\155\1\0\2\155"+
    "\10\0\1\u03ba\126\0\1\u03bb\75\0\1\u03bc\66\0\1\u03bd"+
    "\65\0\1\u03be\37\0\2\u03be\45\0\1\u03bf\110\0\1\u03c0"+
    "\66\0\1\u03c1\100\0\1\u03b1\1\u03a0\36\0\2\u03b1\36\0"+
    "\16\131\1\u03c2\26\131\1\0\36\131\1\u03c3\13\131\1\132"+
    "\23\131\2\u03c3\1\131\1\0\43\131\1\u03c4\6\131\1\132"+
    "\21\131\1\135\4\131\1\0\15\131\1\136\34\131\1\u03c5"+
    "\26\131\1\0\36\131\1\u03a6\13\131\1\132\23\131\2\u03a6"+
    "\1\131\1\0\44\131\1\u03c6\5\131\1\132\21\131\1\135"+
    "\4\131\1\0\15\131\1\136\16\131\1\0\1\155\3\0"+
    "\10\155\1\156\1\u03c7\16\155\2\0\3\155\2\0\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\25\0\1\u03c8\107\0\1\u03c9"+
    "\55\0\1\u03ca\107\0\1\u03cb\117\0\1\u03cc\50\0\1\u03cd"+
    "\37\0\2\u03cd\54\0\1\u03ce\63\0\7\131\1\u03cf\6\131"+
    "\1\132\21\131\1\135\4\131\1\0\15\131\1\136\33\131"+
    "\1\u03d0\1\132\26\131\1\0\52\131\1\132\14\131\1\u03d1"+
    "\11\131\1\0\36\131\1\u03d2\13\131\1\132\21\131\1\135"+
    "\1\131\2\u03d2\1\131\1\0\15\131\1\136\34\131\1\132"+
    "\11\131\1\u03d3\14\131\1\0\34\131\1\0\1\155\1\u03cd"+
    "\2\0\10\155\1\156\17\155\2\0\3\155\2\u03cd\1\155"+
    "\1\0\6\155\4\0\6\155\1\156\2\155\2\0\2\155"+
    "\1\0\1\155\1\0\2\155\31\0\1\u03d4\72\0\1\u03d5"+
    "\112\0\1\u03d6\50\0\1\u03d7\37\0\2\u03d7\50\0\1\u03d8"+
    "\71\0\1\u03cd\1\u03c0\12\0\1\u03d9\23\0\2\u03cd\40\0"+
    "\1\u03da\37\0\2\u03da\36\0\16\131\1\132\14\131\1\u03db"+
    "\11\131\1\0\36\131\1\u03dc\13\131\1\132\23\131\2\u03dc"+
    "\1\131\1\0\46\131\1\u03dd\3\131\1\132\26\131\1\0"+
    "\36\131\1\u03d2\1\u03de\12\131\1\u03df\23\131\2\u03d2\1\131"+
    "\1\0\43\131\1\u03e0\6\131\1\132\26\131\1\0\34\131"+
    "\10\0\1\u03e1\145\0\1\u03e2\37\0\1\u03e3\71\0\1\u03e4"+
    "\37\0\2\u03e4\62\0\1\u03e5\64\0\1\u03e6\74\0\1\u03da"+
    "\1\u03ce\12\0\1\u03e7\23\0\2\u03da\36\0\12\131\1\u03e8"+
    "\3\131\1\132\26\131\1\0\36\131\1\u03e9\13\131\1\132"+
    "\23\131\2\u03e9\1\131\1\0\52\131\1\132\5\131\1\u03ea"+
    "\20\131\1\0\36\131\1\u03d2\13\131\1\132\23\131\2\u03d2"+
    "\1\131\1\0\43\131\1\u03eb\6\131\1\132\21\131\1\135"+
    "\4\131\1\0\15\131\1\136\34\131\1\132\12\131\1\u03ec"+
    "\13\131\1\0\34\131\40\0\1\u03ed\66\0\1\u03ee\100\0"+
    "\1\u03ef\154\0\1\u03f0\33\0\1\u03f1\103\0\1\u03f2\77\0"+
    "\1\u03f3\50\0\16\131\1\132\5\131\1\u03f4\20\131\1\0"+
    "\52\131\1\132\26\131\1\0\31\131\1\u03f5\20\131\1\132"+
    "\12\131\1\u03f6\13\131\1\0\52\131\1\132\14\131\1\u03f7"+
    "\11\131\1\0\52\131\1\132\15\131\1\u03f8\10\131\1\0"+
    "\34\131\56\0\1\u03f9\54\0\1\u03fa\65\0\1\u03fb\140\0"+
    "\1\u03fc\37\0\1\u03fd\107\0\1\u03fe\61\0\16\131\1\132"+
    "\12\131\1\u03ff\13\131\1\0\51\131\1\u0400\1\132\26\131"+
    "\1\0\52\131\1\132\26\131\1\0\6\131\1\u0401\37\131"+
    "\1\u0402\3\131\1\132\26\131\1\0\52\131\1\u0403\26\131"+
    "\1\0\34\131\16\0\1\u0404\137\0\1\u0405\122\0\1\u0406"+
    "\31\0\1\u0407\100\0\1\u0408\77\0\1\u0409\57\0\16\131"+
    "\1\132\26\131\1\0\6\131\1\u040a\43\131\1\132\26\131"+
    "\1\0\27\131\1\u040b\22\131\1\132\6\131\1\u040c\17\131"+
    "\1\0\52\131\1\132\5\131\1\u040d\20\131\1\0\45\131"+
    "\1\u040e\4\131\1\132\21\131\1\135\4\131\1\0\15\131"+
    "\1\136\16\131\15\0\1\u040f\111\0\1\u0410\56\0\1\u0411"+
    "\37\0\2\u0411\114\0\1\u0412\54\0\1\u0413\74\0\1\u0414"+
    "\55\0\16\131\1\132\6\131\1\u0415\17\131\1\0\36\131"+
    "\1\u0416\13\131\1\132\23\131\2\u0416\1\131\1\0\52\131"+
    "\1\132\26\131\1\0\10\131\1\u0417\41\131\1\132\12\131"+
    "\1\u0418\13\131\1\0\47\131\1\u0419\2\131\1\132\26\131"+
    "\1\0\34\131\45\u040f\1\0\34\u040f\56\0\1\u041a\25\0"+
    "\1\u0411\1\u0406\36\0\2\u0411\33\0\1\u041b\6\0\1\u041c"+
    "\122\0\1\u041d\54\0\16\131\1\132\26\131\1\0\10\131"+
    "\1\u041e\25\131\1\u0416\1\u040b\12\131\1\132\23\131\2\u0416"+
    "\1\131\1\0\31\131\1\u041f\6\131\1\u0420\11\131\1\132"+
    "\26\131\1\0\52\131\1\132\3\131\1\u0421\22\131\1\0"+
    "\34\131\4\0\1\u0422\153\0\1\u0423\23\0\4\131\1\u0424"+
    "\11\131\1\132\26\131\1\0\52\131\1\132\4\131\1\u0425"+
    "\21\131\1\0\34\131\16\0\1\u0426\63\0\16\131\1\132"+
    "\14\131\1\u0427\11\131\1\0\34\131\61\0\1\u0428\20\0"+
    "\16\131\1\u0429\26\131\1\0\34\131\22\0\1\u042a\57\0"+
    "\16\131\1\132\21\131\1\135\4\131\1\0\5\131\1\u042b"+
    "\7\131\1\136\16\131\33\0\1\u042c\46\0\16\131\1\132"+
    "\14\131\1\u042d\11\131\1\0\34\131\30\0\1\u042e\51\0"+
    "\14\131\1\u042f\1\131\1\132\26\131\1\0\34\131\16\0"+
    "\1\u0430\63\0\16\131\1\132\21\131\1\u0431\4\131\1\0"+
    "\34\131\25\0\1\u0432\54\0\16\131\1\132\6\131\1\u0433"+
    "\17\131\1\0\34\131\10\0\1\u0434\102\0\1\u0435\121\0"+
    "\1\u0436\103\0\1\u0437\70\0\1\u0438\75\0\1\u0439\65\0"+
    "\1\u043a\37\0\2\u043a\40\0\1\u043a\1\u0439\12\0\1\u043b"+
    "\23\0\2\u043a\67\0\1\u043c\103\0\1\u043d\64\0\1\u043e"+
    "\110\0\1\u043f\64\0\1\u0440\102\0\1\u0441\121\0\1\u0442"+
    "\103\0\1\u0443\70\0\1\u0444\75\0\1\u0445\65\0\1\u0446"+
    "\37\0\2\u0446\40\0\1\u0446\1\u0445\12\0\1\u0447\23\0"+
    "\2\u0446\50\0\1\u0448\114\0\1\u0449\71\0\1\u044a\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[70158];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\11\34\1\1\11\6\1\1\11\7\1\1\11"+
    "\11\1\61\0\1\1\2\0\1\1\25\0\1\11\22\0"+
    "\1\1\5\0\1\1\70\0\2\1\1\0\1\1\147\0"+
    "\1\1\1\0\1\1\4\0\1\1\53\0\1\1\34\0"+
    "\1\1\1\0\1\1\26\0\1\1\34\0\1\1\50\0"+
    "\1\11\4\0\2\1\4\0\1\1\1\0\1\1\3\0"+
    "\2\1\15\0\1\1\22\0\2\1\7\0\1\1\1\0"+
    "\1\1\35\0\2\1\21\0\1\11\21\0\1\1\1\0"+
    "\2\1\14\0\1\11\24\0\2\1\34\0\1\11\4\0"+
    "\2\1\26\0\1\1\10\0\1\1\16\0\1\11\2\0"+
    "\1\11\12\0\1\1\6\0\1\1\4\0\1\11\37\0"+
    "\1\1\40\0\1\1\16\0\1\11\25\0\1\11\47\0"+
    "\1\1\15\0\1\11\3\0\1\1\2\0\1\1\6\0"+
    "\1\11\61\0\1\11\41\0\1\1\3\0\1\11\4\0"+
    "\1\1\2\0\2\11\2\0\2\1\1\0\1\11\1\0"+
    "\1\1\16\0\1\1\26\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1098];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   private boolean firstCommand = true; 
  
   private TradeParser tradeParser;
   private SectorDisplayParser sectorDisplayParser;
   private StatusParser statusParser;
   private ScanParser scanParser;
   private ComputerParser computerParser;
   private CimParser cimParser;
   private PlanetParser planetParser;
   private StreamReader streamReader;
   private ShipTypeDao shipTypeDao;
   private Logger log;
    
    
    public void setStreamReader(StreamReader sr) {
        this.streamReader = sr;
    }  
   
    public void setTradeParser(TradeParser tp) {
        tradeParser = tp;
    }
    
    public void setComputerParser(ComputerParser cp) {
        this.computerParser = cp;
    }    
    
    public void setShipTypeDao(ShipTypeDao dao) {
      this.shipTypeDao = dao;
    }
    
    public void setPlanetParser(PlanetParser pp) {
        planetParser = pp;
    }
    
    public void setCimParser(CimParser tp) {
        cimParser = tp;
    }
    
    public void setSectorDisplayParser(SectorDisplayParser sd) {
        sectorDisplayParser = sd;
    }
    
    public void setStatusParser(StatusParser sp) {
        statusParser = sp;
    }
    
    public void setScanParser(ScanParser sp) {
        scanParser = sp;
    }

    public void setFirstCommand(boolean first) {
        this.firstCommand = first;
    }    

   public void init()
   {
       log = Logger.getLogger(getClass());
       log.info("Initializing lexer debug:"+log.isDebugEnabled());
       setState(DUMMYSTATE);
   }   
   
   public void setState(int state) {
     yybegin(state);
     if (state != DUMMYSTATE) {
      setFirstCommand(false);
     } 
   }
   
   public int getState() {
    return yystate();
   } 
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TWLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TWLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzEndReadL = zzEndRead;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { log.debug("Starting deployed fighters");
	yybegin(DEPLOYEDFTRS);
          }
        case 49: break;
        case 21: 
          { sectorDisplayParser.parsePorts(yytext());
          }
        case 50: break;
        case 46: 
          { statusParser.parseLoseExperience(yytext());
          }
        case 51: break;
        case 22: 
          { sectorDisplayParser.parseSectorNumber(yytext());
    log.debug("Starting sector display");
    yybegin(SECTORDISPLAY);
          }
        case 52: break;
        case 10: 
          { statusParser.parseInfoLine(yytext());
          }
        case 53: break;
        case 44: 
          { if (log.isDebugEnabled()) {
    log.debug("Starting computer state");
  }
  yybegin(COMPUTER);
          }
        case 54: break;
        case 26: 
          { log.debug("Ending cim");
    yybegin(YYINITIAL);
          }
        case 55: break;
        case 32: 
          { cimParser.parsePort(yytext());
          }
        case 56: break;
        case 47: 
          { tradeParser.parseCreditsAndHolds(yytext());
          }
        case 57: break;
        case 11: 
          { computerParser.parseShipEntry(yytext());
          }
        case 58: break;
        case 8: 
          { cimParser.parseCoursePlot(yytext());
    log.debug("Starting cim from course plot");
    yybegin(CIM);
          }
        case 59: break;
        case 24: 
          { sectorDisplayParser.parseNavHaz(yytext());
          }
        case 60: break;
        case 38: 
          { log.debug("At command prompt");
    
    // Initialize the session on first command prompt
    if (firstCommand) {
      if (shipTypeDao.getAll().size() == 0) {
        streamReader.write("CC?QQ".getBytes("Cp1252"));
      }  
      streamReader.write("I".getBytes("Cp1252"));
      streamReader.write("/#".getBytes("Cp1252"));
      streamReader.write("V".getBytes("Cp1252"));
      // streamReader.write("CTQ".getBytes("Cp1252"));
      firstCommand = false;
    }

    statusParser.parseCommandPrompt(yytext());
    yybegin(YYINITIAL);
          }
        case 61: break;
        case 17: 
          { tradeParser.parseReportLine(yytext());
          }
        case 62: break;
        case 13: 
          { yybegin(CIMCOURSEPLOT);
          }
        case 63: break;
        case 4: 
          { log.debug("Ending sector display");
    yybegin(YYINITIAL);
          }
        case 64: break;
        case 42: 
          { scanParser.parseSectorWarps(yytext());
          }
        case 65: break;
        case 2: 
          { String l = yytext();
    log.debug("parsing line:"+l+":"+l.length());
    if (l.length() < 5) {
        StringBuffer sb = new StringBuffer();
        for (int x=0; x<yytext().length(); x++) {
            sb.append("code "+(int)yytext().charAt(x)+":");
        }
        log.debug("code: "+sb.toString());
    }
            
    statusParser.parseCompactStatus(yytext());
          }
        case 66: break;
        case 48: 
          { // cimParser.parseComputerPlot(yytext());
    log.debug("Starting course plot");
    yybegin(COURSEPLOT);
          }
        case 67: break;
        case 34: 
          { sectorDisplayParser.parseWarps(yytext());
          }
        case 68: break;
        case 5: 
          { log.debug("Ending density scan");
	yybegin(YYINITIAL);
          }
        case 69: break;
        case 33: 
          { statusParser.parseWarpMove(yytext());
          }
        case 70: break;
        case 15: 
          { scanParser.parseDensityScan(yytext());
          }
        case 71: break;
        case 35: 
          { log.debug("Starting density scan");
	yybegin(DENSITYSCAN);
          }
        case 72: break;
        case 41: 
          { if (log.isDebugEnabled()) {
    log.debug("Starting ship catalog");
  }
  yybegin(SHIPCATALOG);
          }
        case 73: break;
        case 39: 
          { log.debug("starting ether probing");
  scanParser.parseEtherProbe(yytext());
          }
        case 74: break;
        case 12: 
          { cimParser.parseWarps(yytext());
          }
        case 75: break;
        case 27: 
          { log.debug("end ether probing");
  scanParser.endEtherProbe();
          }
        case 76: break;
        case 14: 
          { statusParser.reset();
   statusParser.parseCompactStatus(yytext());
   log.debug("Starting status report");
   yybegin(STATUS);
          }
        case 77: break;
        case 3: 
          { log.debug("Ending status report");
    yybegin(YYINITIAL);
          }
        case 78: break;
        case 25: 
          { statusParser.parseTurnsLeft(yytext());
          }
        case 79: break;
        case 7: 
          { cimParser.parseCoursePlot(yytext());
    log.debug("Ending course plot");
    yybegin(YYINITIAL);
          }
        case 80: break;
        case 40: 
          { log.debug("Starting initial state");
    yybegin(YYINITIAL);
          }
        case 81: break;
        case 45: 
          { statusParser.parseGainExperience(yytext());
          }
        case 82: break;
        case 37: 
          { statusParser.parseAutoWarpMove(yytext());
          }
        case 83: break;
        case 19: 
          { sectorDisplayParser.parseBeacon(yytext());
          }
        case 84: break;
        case 36: 
          { tradeParser.parseBusted(yytext());
          }
        case 85: break;
        case 29: 
          { tradeParser.reset();
    log.debug("Starting commerce report");
	yybegin(COMMERCEREPORT);
          }
        case 86: break;
        case 6: 
          { scanParser.parseDeployedFighters(yytext());
          }
        case 87: break;
        case 31: 
          { statusParser.parseInfoLine(yytext());
    yybegin(YYINITIAL);
          }
        case 88: break;
        case 20: 
          { sectorDisplayParser.parsePlanets(yytext());
          }
        case 89: break;
        case 9: 
          { log.debug("Starting cim");
    yybegin(CIM);
          }
        case 90: break;
        case 18: 
          { statusParser.parseStardockPrompt(yytext());
    log.debug("Starting stardock");
	yybegin(STARDOCK);
          }
        case 91: break;
        case 43: 
          { statusParser.parseChangeAlignment(yytext());
          }
        case 92: break;
        case 28: 
          { statusParser.reset();
    statusParser.parseInfoLine(yytext());
    log.debug("Starting info report");
    yybegin(INFO);
          }
        case 93: break;
        case 16: 
          { tradeParser.parseLastDocked(yytext());
          }
        case 94: break;
        case 23: 
          { sectorDisplayParser.parseFighters(yytext());
          }
        case 95: break;
        case 1: 
          { 
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
