/* The following code was generated by JFlex 1.4.3 on 9/22/11 3:47 PM */

   
package org.twdata.TW1606U.tw;
import java.io.PipedInputStream;
import org.twdata.TW1606U.tw.data.*;
import org.twdata.TW1606U.data.*;
import org.twdata.TW1606U.tw.model.*;
import org.apache.log4j.Logger;
import org.twdata.TW1606U.Lexer;
import org.twdata.TW1606U.StreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/22/11 3:47 PM from the specification file
 * <tt>TWLexer.flex</tt>
 */
public class TWLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CIMCOURSEPLOT = 20;
  public static final int COMPUTER = 10;
  public static final int SHIPCATALOG = 12;
  public static final int INFO = 8;
  public static final int STARDOCK = 28;
  public static final int STATUS = 4;
  public static final int SECTORDISPLAY = 6;
  public static final int PLANETPROMPT = 26;
  public static final int DUMMYSTATE = 30;
  public static final int YYINITIAL = 0;
  public static final int PLANETDISPLAY = 24;
  public static final int CIM = 22;
  public static final int DENSITYSCAN = 14;
  public static final int COMMERCEREPORT = 2;
  public static final int COURSEPLOT = 18;
  public static final int DEPLOYEDFTRS = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  8,  9,  9, 10, 11, 
    12, 12, 13, 13, 14, 14, 15, 15,  3,  3,  3,  3,  3,  3, 16, 16
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\46\2\0\1\60\22\0\1\17\1\0\1\0\1\67\1\0"+
    "\1\73\1\0\1\2\1\55\1\57\1\0\1\0\1\4\1\37\1\5"+
    "\1\0\1\44\1\3\1\43\7\3\1\16\1\0\1\56\1\36\1\72"+
    "\2\0\1\45\1\7\1\33\1\63\1\27\1\20\1\75\1\52\1\74"+
    "\2\101\1\77\1\101\1\50\1\22\1\47\1\1\1\70\1\6\1\40"+
    "\2\101\1\42\1\101\1\66\1\101\1\76\1\0\1\100\3\0\1\14"+
    "\1\61\1\12\1\41\1\11\1\62\1\24\1\54\1\13\1\64\1\65"+
    "\1\15\1\31\1\25\1\34\1\10\1\30\1\23\1\26\1\32\1\21"+
    "\1\51\1\71\1\102\1\35\1\53\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\35\1\1\2\1\3\6\1\1\4\7\1\1\5"+
    "\1\6\1\7\1\1\1\10\5\1\62\0\1\7\2\0"+
    "\1\10\25\0\1\11\23\0\1\12\5\0\1\13\71\0"+
    "\1\7\1\10\1\0\1\14\151\0\1\14\1\0\1\15"+
    "\4\0\1\16\55\0\1\17\34\0\1\20\1\0\1\21"+
    "\30\0\1\14\34\0\1\21\52\0\1\22\4\0\2\21"+
    "\6\0\1\22\1\0\1\23\3\0\1\24\1\25\15\0"+
    "\1\26\22\0\2\21\11\0\1\27\1\0\1\30\35\0"+
    "\2\21\23\0\1\31\21\0\1\31\1\0\2\21\16\0"+
    "\1\32\24\0\2\21\36\0\1\33\4\0\2\21\30\0"+
    "\1\34\10\0\1\21\20\0\1\35\2\0\1\36\12\0"+
    "\1\21\10\0\1\37\4\0\1\40\41\0\1\41\44\0"+
    "\1\42\16\0\1\43\30\0\1\44\54\0\1\45\17\0"+
    "\1\46\3\0\1\47\2\0\1\46\10\0\1\50\67\0"+
    "\1\51\1\0\1\52\12\0\1\53\27\0\1\54\3\0"+
    "\1\55\4\0\1\55\2\0\1\56\1\57\2\0\1\56"+
    "\1\57\1\0\1\60\1\0\1\60\16\0\1\61\26\0"+
    "\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[1153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0473"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0473\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0473\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u08e6\0\u09af\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u0ddf\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u103a\0\u1dd6\0\u1e19\0\u10c0\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1146\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u0473\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef"+
    "\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f"+
    "\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237"+
    "\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f"+
    "\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667"+
    "\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f"+
    "\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97"+
    "\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7"+
    "\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df"+
    "\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7"+
    "\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc\0\u550f"+
    "\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u5727"+
    "\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f"+
    "\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57"+
    "\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f"+
    "\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87"+
    "\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f"+
    "\0\u61e2\0\u6225\0\u6268\0\u62ab\0\u62ee\0\u6331\0\u6374\0\u63b7"+
    "\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf"+
    "\0\u6612\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761\0\u67a4\0\u67e7"+
    "\0\u682a\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff"+
    "\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e\0\u6b91\0\u6bd4\0\u6c17"+
    "\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23\0\u6d66\0\u6da9\0\u6dec\0\u6e2f"+
    "\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\u6fc1\0\u7004\0\u7047"+
    "\0\u708a\0\u70cd\0\u7110\0\u7153\0\u7196\0\u71d9\0\u721c\0\u725f"+
    "\0\u72a2\0\u72e5\0\u7328\0\u736b\0\u73ae\0\u73f1\0\u7434\0\u7477"+
    "\0\u74ba\0\u74fd\0\u7540\0\u7583\0\u75c6\0\u7609\0\u764c\0\u768f"+
    "\0\u76d2\0\u7715\0\u7758\0\u779b\0\u77de\0\u7821\0\u7864\0\u78a7"+
    "\0\u78ea\0\u792d\0\u7970\0\u79b3\0\u79f6\0\u7a39\0\u7a7c\0\u7abf"+
    "\0\u7b02\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94\0\u7cd7"+
    "\0\u7d1a\0\u7d5d\0\u7da0\0\u7de3\0\u7e26\0\u7e69\0\u7eac\0\u7eef"+
    "\0\u7f32\0\u7f75\0\u7fb8\0\u7ffb\0\u803e\0\u8081\0\u80c4\0\u8107"+
    "\0\u814a\0\u818d\0\u81d0\0\u8213\0\u8256\0\u8299\0\u82dc\0\u831f"+
    "\0\u8362\0\u83a5\0\u83e8\0\u842b\0\u846e\0\u84b1\0\u84f4\0\u8537"+
    "\0\u857a\0\u0473\0\u85bd\0\u8600\0\u8643\0\u8686\0\u86c9\0\u870c"+
    "\0\u874f\0\u8792\0\u87d5\0\u8818\0\u885b\0\u889e\0\u08e6\0\u88e1"+
    "\0\u8924\0\u8967\0\u89aa\0\u89ed\0\u8a30\0\u8a73\0\u8ab6\0\u8af9"+
    "\0\u8b3c\0\u8b7f\0\u8bc2\0\u8c05\0\u8c48\0\u8c8b\0\u8cce\0\u8d11"+
    "\0\u8d54\0\u8d97\0\u8dda\0\u8e1d\0\u8e60\0\u8ea3\0\u8ee6\0\u8f29"+
    "\0\u8f6c\0\u8faf\0\u8ff2\0\u9035\0\u9078\0\u90bb\0\u90fe\0\u9141"+
    "\0\u9184\0\u91c7\0\u920a\0\u924d\0\u9290\0\u92d3\0\u9316\0\u9359"+
    "\0\u939c\0\u93df\0\u9422\0\u9465\0\u94a8\0\u94eb\0\u952e\0\u9571"+
    "\0\u95b4\0\u95f7\0\u963a\0\u967d\0\u96c0\0\u9703\0\u9746\0\u9789"+
    "\0\u97cc\0\u980f\0\u9852\0\u9895\0\u98d8\0\u991b\0\u995e\0\u99a1"+
    "\0\u99e4\0\u9a27\0\u9a6a\0\u9aad\0\u9af0\0\u9b33\0\u9b76\0\u9bb9"+
    "\0\u9bfc\0\u9c3f\0\u9c82\0\u9cc5\0\u9d08\0\u9d4b\0\u9d8e\0\u9dd1"+
    "\0\u9e14\0\u9e57\0\u9e9a\0\u9edd\0\u9f20\0\u9f63\0\u9fa6\0\u9fe9"+
    "\0\ua02c\0\ua06f\0\ua0b2\0\ua0f5\0\ua138\0\ua17b\0\ua1be\0\ua201"+
    "\0\ua244\0\ua287\0\ua2ca\0\ua30d\0\ua350\0\ua393\0\u0473\0\ua3d6"+
    "\0\ua419\0\ua45c\0\ua49f\0\ua4e2\0\ua525\0\ua568\0\ua5ab\0\ua5ee"+
    "\0\ua631\0\ua674\0\ua6b7\0\ua6fa\0\ua73d\0\ua780\0\ua7c3\0\ua806"+
    "\0\u08e6\0\ua849\0\ua88c\0\ua8cf\0\ua912\0\ua955\0\ua998\0\ua9db"+
    "\0\uaa1e\0\uaa61\0\uaaa4\0\uaae7\0\uab2a\0\uab6d\0\uabb0\0\uabf3"+
    "\0\uac36\0\uac79\0\u0473\0\uacbc\0\uacff\0\uad42\0\uad85\0\uadc8"+
    "\0\uae0b\0\uae4e\0\uae91\0\uaed4\0\uaf17\0\uaf5a\0\uaf9d\0\uafe0"+
    "\0\ub023\0\ub066\0\ub0a9\0\ub0ec\0\ub12f\0\ub172\0\ub1b5\0\ub1f8"+
    "\0\ub23b\0\ub27e\0\ub2c1\0\ub304\0\ub347\0\ub38a\0\ub3cd\0\ub410"+
    "\0\ub453\0\ub496\0\ub4d9\0\ub51c\0\ub55f\0\ub5a2\0\ub5e5\0\ub628"+
    "\0\ub66b\0\ub6ae\0\ub6f1\0\ub734\0\ub777\0\ub7ba\0\ub7fd\0\ub840"+
    "\0\ub883\0\ub8c6\0\ub909\0\ub94c\0\ub98f\0\ub9d2\0\uba15\0\u0473"+
    "\0\uba58\0\uba9b\0\ubade\0\ubb21\0\ubb64\0\ubba7\0\ubbea\0\ubc2d"+
    "\0\ubc70\0\ubcb3\0\ubcf6\0\ubd39\0\ubd7c\0\ubdbf\0\ube02\0\ube45"+
    "\0\ube88\0\ubecb\0\ubf0e\0\ubf51\0\ubf94\0\ubfd7\0\uc01a\0\uc05d"+
    "\0\uc0a0\0\uc0e3\0\uc126\0\uc169\0\uc1ac\0\uc1ef\0\uc232\0\uc275"+
    "\0\uc2b8\0\uc2fb\0\uc33e\0\uc381\0\uc3c4\0\uc407\0\uc44a\0\uc48d"+
    "\0\uc4d0\0\uc513\0\uc556\0\uc599\0\uc5dc\0\uc61f\0\uc662\0\uc6a5"+
    "\0\uc6e8\0\uc72b\0\uc76e\0\uc7b1\0\uc7f4\0\uc837\0\uc87a\0\uc8bd"+
    "\0\u0473\0\uc900\0\uc943\0\u0473\0\uc986\0\uc9c9\0\uca0c\0\uca4f"+
    "\0\uca92\0\ucad5\0\ucb18\0\ucb5b\0\ucb9e\0\ucbe1\0\ucc24\0\ucc67"+
    "\0\uccaa\0\ucced\0\ucd30\0\ucd73\0\ucdb6\0\ucdf9\0\uce3c\0\uce7f"+
    "\0\ucec2\0\ucf05\0\ucf48\0\ucf8b\0\u0473\0\ucfce\0\ud011\0\ud054"+
    "\0\ud097\0\ud0da\0\ud11d\0\ud160\0\ud1a3\0\ud1e6\0\ud229\0\ud26c"+
    "\0\ud2af\0\ud2f2\0\ud335\0\ud378\0\ud3bb\0\ud3fe\0\ud441\0\ud484"+
    "\0\ud4c7\0\ud50a\0\ud54d\0\ud590\0\ud5d3\0\ud616\0\ud659\0\ud69c"+
    "\0\ud6df\0\ud722\0\ud765\0\ud7a8\0\ud7eb\0\ud82e\0\ud871\0\ud8b4"+
    "\0\ud8f7\0\ud93a\0\ud97d\0\ud9c0\0\uda03\0\uda46\0\uda89\0\udacc"+
    "\0\udb0f\0\udb52\0\udb95\0\udbd8\0\udc1b\0\udc5e\0\udca1\0\udce4"+
    "\0\udd27\0\udd6a\0\uddad\0\uddf0\0\ude33\0\ude76\0\udeb9\0\udefc"+
    "\0\udf3f\0\udf82\0\udfc5\0\ue008\0\ue04b\0\ue08e\0\ue0d1\0\ue114"+
    "\0\ue157\0\ue19a\0\ue1dd\0\ue220\0\ue263\0\ue2a6\0\ue2e9\0\ue32c"+
    "\0\ue36f\0\ue3b2\0\ue3f5\0\ue438\0\ue47b\0\ue4be\0\ue501\0\ue544"+
    "\0\ue587\0\ue5ca\0\u0473\0\ue60d\0\ue650\0\ue693\0\ue6d6\0\ue719"+
    "\0\ue75c\0\ue79f\0\ue7e2\0\ue825\0\ue868\0\ue8ab\0\ue8ee\0\ue931"+
    "\0\ue974\0\ue9b7\0\ue9fa\0\uea3d\0\uea80\0\ueac3\0\ueb06\0\ueb49"+
    "\0\ueb8c\0\uebcf\0\uec12\0\u0473\0\uec55\0\uec98\0\uecdb\0\ued1e"+
    "\0\ued61\0\ueda4\0\uede7\0\uee2a\0\uee6d\0\ueeb0\0\ueef3\0\uef36"+
    "\0\uef79\0\uefbc\0\uefff\0\uf042\0\uf085\0\uf0c8\0\uf10b\0\uf14e"+
    "\0\uf191\0\uf1d4\0\uf217\0\uf25a\0\uf29d\0\uf2e0\0\uf323\0\uf366"+
    "\0\uf3a9\0\uf3ec\0\uf42f\0\uf472\0\uf4b5\0\uf4f8\0\uf53b\0\uf57e"+
    "\0\uf5c1\0\uf604\0\uf647\0\uf68a\0\uf6cd\0\uf710\0\uf753\0\uf796"+
    "\0\uf7d9\0\uf81c\0\uf85f\0\uf8a2\0\uf8e5\0\uf928\0\uf96b\0\uf9ae"+
    "\0\uf9f1\0\ufa34\0\ufa77\0\ufaba\0\ufafd\0\ufb40\0\ufb83\0\ufbc6"+
    "\0\u0473\0\ufc09\0\ufc4c\0\ufc8f\0\ufcd2\0\ufd15\0\ufd58\0\u08e6"+
    "\0\ufd9b\0\ufdde\0\ufe21\0\ufe64\0\ufea7\0\ufeea\0\uff2d\0\uff70"+
    "\0\u0473\0\uffb3\0\ufff6\1\71\1\174\1\277\1\u0102\1\u0145"+
    "\1\u0188\1\u01cb\1\u020e\1\u0251\1\u0294\1\u02d7\1\u031a\1\u035d"+
    "\1\u03a0\1\u03e3\1\u0426\1\u0469\1\u04ac\1\u04ef\1\u0532\1\u0575"+
    "\1\u05b8\1\u05fb\1\u063e\1\u0681\1\u06c4\1\u0707\1\u074a\1\u078d"+
    "\1\u07d0\1\u0813\1\u0856\1\u0899\1\u08dc\1\u091f\1\u0962\1\u09a5"+
    "\1\u09e8\1\u0a2b\1\u0a6e\1\u0ab1\1\u0af4\1\u0b37\1\u0b7a\1\u0bbd"+
    "\1\u0c00\1\u0c43\1\u0c86\1\u0cc9\1\u0d0c\1\u0d4f\1\u0d92\1\u0dd5"+
    "\0\u08e6\1\u0e18\0\u0473\1\u0e5b\1\u0e9e\1\u0ee1\1\u0f24\1\u0f67"+
    "\1\u0faa\1\u0fed\1\u1030\1\u1073\1\u10b6\0\u08e6\1\u10f9\1\u113c"+
    "\1\u117f\1\u11c2\1\u1205\1\u1248\1\u128b\1\u12ce\1\u1311\1\u1354"+
    "\1\u1397\1\u13da\1\u141d\1\u1460\1\u14a3\1\u14e6\1\u1529\1\u156c"+
    "\1\u15af\1\u15f2\1\u1635\1\u1678\1\u16bb\1\u16fe\1\u1741\1\u1784"+
    "\1\u17c7\0\u0473\1\u180a\1\u184d\1\u1890\1\u18d3\0\u08e6\1\u1916"+
    "\1\u1959\0\u0473\0\u0473\1\u199c\1\u19df\0\u08e6\0\u08e6\1\u1a22"+
    "\0\u0473\1\u1a65\0\u08e6\1\u1aa8\1\u1aeb\1\u1b2e\1\u1b71\1\u1bb4"+
    "\1\u1bf7\1\u1c3a\1\u1c7d\1\u1cc0\1\u1d03\1\u1d46\1\u1d89\1\u1dcc"+
    "\1\u1e0f\0\u08e6\1\u1e52\1\u1e95\1\u1ed8\1\u1f1b\1\u1f5e\1\u1fa1"+
    "\1\u1fe4\1\u2027\1\u206a\1\u20ad\1\u20f0\1\u2133\1\u2176\1\u21b9"+
    "\1\u21fc\1\u223f\1\u2282\1\u22c5\1\u2308\1\u234b\1\u238e\1\u23d1"+
    "\0\u0473";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\22\1\23\1\22\1\24\5\22\1\25\2\22\1\26"+
    "\11\22\1\27\1\22\1\30\1\31\1\32\2\22\1\33"+
    "\1\22\1\34\2\22\1\35\1\22\1\36\6\22\1\37"+
    "\3\22\1\40\5\22\1\41\16\22\1\23\1\22\1\24"+
    "\5\22\1\25\1\22\1\42\1\26\11\22\1\27\1\22"+
    "\1\30\1\31\1\32\2\22\1\33\1\22\1\34\2\22"+
    "\1\35\1\22\1\36\6\22\1\37\3\22\1\40\5\22"+
    "\1\41\12\22\4\43\1\44\7\43\1\45\2\43\1\46"+
    "\1\47\1\43\1\50\4\43\1\51\3\43\1\52\1\43"+
    "\1\53\4\43\1\54\3\43\1\22\7\43\1\55\7\43"+
    "\1\56\14\43\4\22\1\23\7\22\1\25\16\22\1\30"+
    "\1\22\1\32\20\22\1\37\30\22\1\23\7\22\1\25"+
    "\2\22\1\57\13\22\1\30\1\22\1\32\20\22\1\37"+
    "\1\22\1\60\26\22\1\23\2\22\1\61\4\22\1\25"+
    "\2\22\1\62\1\63\12\22\1\30\1\22\1\32\4\22"+
    "\1\64\4\22\1\65\1\66\5\22\1\37\30\22\1\23"+
    "\2\22\1\61\4\22\1\25\2\22\1\62\1\63\12\22"+
    "\1\30\1\22\1\32\4\22\1\64\4\22\1\65\1\66"+
    "\5\22\1\37\1\22\1\67\23\22\1\70\2\22\1\23"+
    "\1\22\6\70\1\71\1\70\1\22\14\70\1\72\1\70"+
    "\1\73\2\22\3\70\2\22\1\70\1\22\6\70\1\22"+
    "\1\37\2\22\6\70\1\22\2\70\2\22\2\70\1\22"+
    "\1\70\1\22\2\70\4\22\1\23\7\22\1\25\16\22"+
    "\1\30\1\22\1\32\4\22\1\74\13\22\1\37\30\22"+
    "\1\23\7\22\1\25\16\22\1\30\1\22\1\32\20\22"+
    "\1\75\30\22\1\23\1\22\1\76\5\22\1\25\16\22"+
    "\1\30\1\22\1\32\20\22\1\37\30\22\1\23\1\22"+
    "\1\76\5\22\1\25\16\22\1\30\1\22\1\32\10\22"+
    "\1\77\7\22\1\37\27\22\1\100\1\23\7\22\1\25"+
    "\16\22\1\30\1\22\1\32\5\22\2\100\11\22\1\37"+
    "\27\22\1\101\1\23\7\22\1\25\16\22\1\30\1\22"+
    "\1\32\5\22\2\101\10\22\1\102\1\37\27\22\1\103"+
    "\1\23\7\22\1\25\16\22\1\30\1\22\1\32\5\22"+
    "\2\103\10\22\1\104\1\37\30\22\1\23\7\22\1\25"+
    "\1\22\1\105\1\106\13\22\1\30\1\22\1\32\2\22"+
    "\1\107\15\22\1\37\30\22\1\23\7\22\1\25\16\22"+
    "\1\30\1\22\1\32\1\110\17\22\1\37\24\22\122\0"+
    "\1\111\74\0\1\112\116\0\1\113\63\0\1\114\105\0"+
    "\1\115\125\0\1\116\103\0\1\117\101\0\1\120\71\0"+
    "\1\121\30\0\1\122\42\0\1\123\107\0\1\124\104\0"+
    "\1\125\65\0\1\126\107\0\1\127\100\0\1\130\110\0"+
    "\1\131\63\0\17\132\1\133\26\132\1\0\53\132\1\134"+
    "\26\132\1\0\53\132\1\133\5\132\1\135\20\132\1\0"+
    "\53\132\1\133\21\132\1\136\4\132\1\0\15\132\1\137"+
    "\35\132\1\133\1\132\1\140\24\132\1\0\53\132\1\133"+
    "\3\132\1\141\22\132\1\0\53\132\1\133\10\132\1\142"+
    "\15\132\1\0\53\132\1\133\14\132\1\143\11\132\1\0"+
    "\53\132\1\133\14\132\1\144\11\132\1\0\45\132\1\145"+
    "\5\132\1\133\26\132\1\0\42\132\1\146\10\132\1\133"+
    "\26\132\1\0\53\132\1\133\14\132\1\147\11\132\1\0"+
    "\34\132\46\57\1\0\34\57\11\0\1\150\110\0\1\151"+
    "\76\0\1\152\103\0\1\153\103\0\1\154\16\0\1\155"+
    "\62\0\1\156\67\0\1\157\4\0\10\157\1\160\17\157"+
    "\2\0\3\157\2\0\1\157\1\0\6\157\4\0\6\157"+
    "\1\160\2\157\2\0\2\157\1\0\1\157\1\0\2\157"+
    "\1\0\1\157\4\0\10\157\1\160\6\157\1\161\10\157"+
    "\2\0\3\157\2\0\1\157\1\0\6\157\4\0\6\157"+
    "\1\160\2\157\2\0\2\157\1\0\1\157\1\0\2\157"+
    "\1\0\1\157\4\0\10\157\1\160\4\157\1\162\10\157"+
    "\1\163\1\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\15\157"+
    "\1\164\1\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\54\0\1\165\34\0\1\166\1\167\10\0"+
    "\1\167\1\0\1\167\4\0\1\167\3\0\1\167\4\0"+
    "\1\167\1\0\1\167\2\0\1\167\1\0\2\167\1\0"+
    "\1\167\10\0\1\167\2\0\1\167\1\0\1\167\3\0"+
    "\2\167\1\0\1\167\1\0\1\167\12\0\1\170\71\0"+
    "\46\100\1\0\34\100\3\0\1\101\1\171\12\0\1\172"+
    "\23\0\2\101\10\0\1\171\1\0\1\173\26\0\1\101"+
    "\37\0\2\101\41\0\1\103\1\174\12\0\1\175\23\0"+
    "\2\103\10\0\1\174\1\0\1\176\26\0\1\103\37\0"+
    "\2\103\55\0\1\177\66\0\1\200\13\0\1\201\23\0"+
    "\2\200\60\0\1\202\116\0\1\203\47\0\1\204\37\0"+
    "\2\204\50\0\1\205\131\0\1\206\52\0\1\207\114\0"+
    "\1\210\110\0\1\211\62\0\1\212\112\0\1\213\75\0"+
    "\1\214\77\0\1\215\114\0\1\216\111\0\1\217\104\0"+
    "\1\220\100\0\1\221\75\0\1\222\72\0\1\223\145\0"+
    "\1\224\22\0\3\132\1\225\13\132\1\133\21\132\1\136"+
    "\1\132\2\225\1\132\1\0\15\132\1\137\35\132\1\133"+
    "\21\132\1\226\4\132\1\0\53\132\1\133\14\132\1\227"+
    "\11\132\1\0\53\132\1\133\1\132\1\230\24\132\1\0"+
    "\45\132\1\231\5\132\1\133\26\132\1\0\53\132\1\133"+
    "\4\132\1\232\21\132\1\0\53\132\1\133\1\132\1\233"+
    "\24\132\1\0\53\132\1\133\11\132\1\234\14\132\1\0"+
    "\53\132\1\133\1\132\1\235\24\132\1\0\36\132\1\236"+
    "\14\132\1\133\26\132\1\0\53\132\1\133\12\132\1\237"+
    "\13\132\1\0\53\132\1\133\1\132\1\240\24\132\1\0"+
    "\34\132\14\0\1\241\105\0\1\242\107\0\1\243\101\0"+
    "\1\244\73\0\1\245\111\0\1\246\130\0\1\247\50\0"+
    "\1\250\64\0\1\157\4\0\10\157\1\160\17\157\2\0"+
    "\1\157\1\251\1\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\3\157\1\252\4\157\1\160"+
    "\17\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\10\157\1\160\12\157\1\253"+
    "\4\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\10\157\1\160\2\157\1\254"+
    "\14\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\13\0\1\255\121\0\1\221\37\0\1\256\102\0"+
    "\1\256\22\0\1\257\162\0\1\260\13\0\1\101\13\0"+
    "\1\172\23\0\2\101\10\0\1\171\117\0\1\261\13\0"+
    "\1\103\13\0\1\175\23\0\2\103\10\0\1\174\54\0"+
    "\1\262\56\0\1\200\1\263\12\0\1\264\17\0\1\265"+
    "\3\0\2\200\55\0\1\266\122\0\1\267\46\0\1\204"+
    "\1\111\12\0\1\270\23\0\2\204\70\0\1\271\67\0"+
    "\1\272\75\0\1\273\102\0\1\274\100\0\1\275\20\0"+
    "\1\276\112\0\1\277\60\0\1\300\3\0\1\301\120\0"+
    "\1\302\60\0\1\303\73\0\1\304\126\0\1\305\127\0"+
    "\1\306\35\0\1\307\77\0\1\310\105\0\1\311\66\0"+
    "\3\132\1\225\1\312\12\132\1\313\23\132\2\225\1\132"+
    "\1\0\53\132\1\314\26\132\1\0\46\132\1\315\4\132"+
    "\1\133\26\132\1\0\53\132\1\133\6\132\1\316\17\132"+
    "\1\0\51\132\1\317\1\132\1\133\26\132\1\0\50\132"+
    "\1\320\2\132\1\133\26\132\1\0\47\132\1\321\3\132"+
    "\1\133\26\132\1\0\44\132\1\322\6\132\1\133\11\132"+
    "\1\323\14\132\1\0\53\132\1\324\3\132\1\325\22\132"+
    "\1\0\51\132\1\326\1\132\1\133\26\132\1\0\50\132"+
    "\1\327\2\132\1\133\26\132\1\0\53\132\1\330\26\132"+
    "\1\0\34\132\12\0\1\331\107\0\1\332\137\0\1\333"+
    "\36\0\1\334\117\0\1\335\107\0\1\336\122\0\1\337"+
    "\30\0\46\250\1\0\34\250\1\0\1\157\4\0\10\157"+
    "\1\160\1\340\16\157\2\0\3\157\2\0\1\157\1\0"+
    "\6\157\4\0\6\157\1\160\2\157\2\0\2\157\1\0"+
    "\1\157\1\0\2\157\1\0\1\157\4\0\10\157\1\160"+
    "\17\157\2\0\1\157\1\341\1\157\2\0\1\157\1\0"+
    "\6\157\4\0\6\157\1\160\2\157\2\0\2\157\1\0"+
    "\1\157\1\0\2\157\1\0\1\157\4\0\2\157\1\342"+
    "\5\157\1\160\12\157\1\343\4\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\1\344\3\157\1\345\12\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\12\0\1\346"+
    "\70\0\46\256\1\0\34\256\32\0\1\347\67\0\1\350"+
    "\102\0\1\351\133\0\1\352\35\0\1\200\37\0\2\200"+
    "\41\0\1\353\13\0\1\264\17\0\1\265\3\0\2\353"+
    "\41\0\1\354\13\0\1\265\17\0\1\265\3\0\2\354"+
    "\130\0\1\355\47\0\1\356\75\0\1\357\104\0\1\360"+
    "\103\0\1\361\77\0\1\362\61\0\1\363\112\0\1\364"+
    "\75\0\1\365\105\0\1\366\106\0\1\367\76\0\1\370"+
    "\74\0\1\371\117\0\1\372\67\0\1\373\106\0\1\374"+
    "\74\0\1\375\114\0\1\376\105\0\1\377\106\0\1\u0100"+
    "\50\0\3\132\1\225\13\132\1\133\23\132\2\225\1\132"+
    "\1\0\53\132\1\133\12\132\1\u0101\6\132\1\136\4\132"+
    "\1\0\15\132\1\137\35\132\1\133\15\132\1\u0102\3\132"+
    "\1\136\4\132\1\0\15\132\1\137\35\132\1\133\26\132"+
    "\1\0\16\132\1\u0103\34\132\1\133\12\132\1\u0104\13\132"+
    "\1\0\53\132\1\u0105\26\132\1\0\53\132\1\133\5\132"+
    "\1\u0106\20\132\1\0\44\132\1\u0107\6\132\1\133\26\132"+
    "\1\0\53\132\1\133\1\132\1\u0108\24\132\1\0\50\132"+
    "\1\u0109\2\132\1\133\26\132\1\0\53\132\1\133\3\132"+
    "\1\u010a\15\132\1\136\4\132\1\0\15\132\1\137\35\132"+
    "\1\u010b\26\132\1\0\51\132\1\u010c\1\132\1\133\26\132"+
    "\1\0\53\132\1\133\3\132\1\u010d\22\132\1\0\53\132"+
    "\1\133\21\132\1\136\4\132\1\0\5\132\1\u010e\7\132"+
    "\1\137\16\132\34\0\1\u010f\65\0\1\u0110\115\0\1\u0111"+
    "\76\0\1\u0112\65\0\1\u0113\117\0\1\u0114\70\0\1\u0115"+
    "\67\0\1\157\4\0\10\157\1\160\16\157\1\u0116\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\5\157\1\u0117\2\157\1\160\17\157\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\10\157\1\160\2\157\1\u0118\14\157\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\6\157\1\u0119\1\157\1\160\17\157\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\10\157\1\160\4\157\1\u011a\12\157\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\10\157\1\160\1\u011b\16\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\54\0\1\u011c"+
    "\62\0\1\u011d\51\0\1\101\37\0\2\101\10\0\1\171"+
    "\30\0\1\103\37\0\2\103\10\0\1\174\110\0\1\u011e"+
    "\22\0\1\353\1\u011f\12\0\1\u0120\23\0\2\353\41\0"+
    "\1\354\1\u0121\12\0\1\u0122\23\0\2\354\55\0\1\u0123"+
    "\102\0\1\u0124\104\0\1\u0125\104\0\1\u0126\113\0\1\u0127"+
    "\65\0\1\u0128\102\0\1\u0129\115\0\1\u012a\75\0\1\u012b"+
    "\74\0\1\u012c\74\0\1\u012d\105\0\1\u012e\111\0\1\u012f"+
    "\133\0\1\u0130\53\0\1\u0131\117\0\1\u0132\57\0\1\u0133"+
    "\146\0\1\u0134\36\0\1\u0135\76\0\1\u0136\67\0\17\132"+
    "\1\133\1\132\1\u0137\24\132\1\0\53\132\1\133\14\132"+
    "\1\u0138\11\132\1\0\45\132\1\u0139\5\132\1\133\26\132"+
    "\1\0\53\132\1\u013a\26\132\1\0\53\132\1\133\2\132"+
    "\1\u013b\16\132\1\136\4\132\1\0\15\132\1\137\31\132"+
    "\1\u013c\3\132\1\133\26\132\1\0\53\132\1\133\11\132"+
    "\1\u013d\14\132\1\0\53\132\1\133\12\132\1\u013e\13\132"+
    "\1\0\53\132\1\133\5\132\1\u013f\20\132\1\0\45\132"+
    "\1\u0140\5\132\1\133\26\132\1\0\50\132\1\u0141\2\132"+
    "\1\133\21\132\1\136\4\132\1\0\15\132\1\137\35\132"+
    "\1\u0142\26\132\1\0\53\132\1\133\26\132\1\0\14\132"+
    "\1\u0143\33\132\1\u0144\2\132\1\133\26\132\1\0\34\132"+
    "\25\0\1\u0145\74\0\1\u0146\74\0\1\u0147\110\0\1\u0148"+
    "\115\0\1\u0149\67\0\1\u014a\136\0\1\u014b\30\0\1\157"+
    "\4\0\10\157\1\160\15\157\1\u014c\1\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\13\157\1\u014d\3\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\13\157\1\u014e\3\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\6\157\1\u014f\10\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\3\157\1\u0150\4\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\6\157\1\u0151\1\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\17\0\1\u0152"+
    "\106\0\1\u0153\153\0\1\u0154\11\0\1\353\37\0\2\353"+
    "\41\0\1\u0155\13\0\1\u0120\23\0\2\u0155\41\0\1\354"+
    "\37\0\2\354\41\0\1\u0156\13\0\1\u0122\23\0\2\u0156"+
    "\41\0\1\u0157\37\0\2\u0157\76\0\1\u0158\65\0\1\u0159"+
    "\76\0\1\u015a\104\0\1\u015b\64\0\1\u015c\37\0\2\u015c"+
    "\61\0\1\u015d\70\0\1\u015e\132\0\1\u015f\61\0\1\u0160"+
    "\74\0\1\u0161\105\0\1\u0162\104\0\1\u0163\117\0\1\u0164"+
    "\72\0\1\u0165\72\0\1\u0166\74\0\1\u0167\2\0\1\u0168"+
    "\51\0\1\u0169\53\0\1\u016a\103\0\1\u016b\116\0\1\u016c"+
    "\31\0\17\132\1\133\3\132\1\u016d\22\132\1\0\53\132"+
    "\1\133\1\132\1\u016e\24\132\1\0\53\132\1\133\21\132"+
    "\1\u016f\4\132\1\0\51\132\1\u0170\1\132\1\133\21\132"+
    "\1\136\4\132\1\0\15\132\1\137\35\132\1\133\3\132"+
    "\1\u0171\22\132\1\0\46\132\1\u0172\4\132\1\133\26\132"+
    "\1\0\45\132\1\u0173\5\132\1\133\26\132\1\0\45\132"+
    "\1\u0174\5\132\1\133\26\132\1\0\53\132\1\133\21\132"+
    "\1\u0175\4\132\1\0\46\132\1\u0176\4\132\1\133\26\132"+
    "\1\0\51\132\1\u0177\1\132\1\133\26\132\1\0\53\132"+
    "\1\133\6\132\1\u0178\12\132\1\136\4\132\1\0\12\132"+
    "\1\u0179\2\132\1\137\35\132\1\133\14\132\1\u017a\11\132"+
    "\1\0\53\132\1\133\26\132\1\0\2\132\1\u017b\31\132"+
    "\17\0\1\u017c\102\0\1\u017d\106\0\1\u017e\111\0\1\u017f"+
    "\76\0\1\u0180\73\0\1\u0181\102\0\1\u0182\64\0\1\157"+
    "\4\0\10\157\1\160\2\157\1\u0183\14\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\7\157\1\u0184\7\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\3\157\1\u0185\4\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\17\157\2\0\1\157\1\u0186\1\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\4\157\1\u0187\3\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\7\157\1\u0188\1\160\17\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\26\0\1\u0189\73\0"+
    "\1\u018a\133\0\1\u018b\35\0\1\u0155\1\u018c\12\0\1\u018d"+
    "\23\0\2\u0155\26\0\1\u018e\12\0\1\u0156\1\u018f\36\0"+
    "\2\u0156\26\0\1\u018e\12\0\1\u0157\1\u0123\36\0\2\u0157"+
    "\61\0\1\u0190\104\0\1\u0191\60\0\1\u0192\13\0\1\u0193"+
    "\23\0\2\u0192\55\0\1\u0194\63\0\46\u015c\1\0\34\u015c"+
    "\11\0\1\u0195\114\0\1\u0196\76\0\1\u0197\76\0\1\u0198"+
    "\100\0\1\u0199\104\0\1\u019a\137\0\1\u019b\55\0\1\u019c"+
    "\76\0\1\u019d\106\0\1\u019e\70\0\1\u019f\116\0\1\u01a0"+
    "\66\0\1\u01a1\103\0\1\u01a2\124\0\1\u01a3\57\0\1\u01a4"+
    "\71\0\17\132\1\133\5\132\1\u01a5\20\132\1\0\53\132"+
    "\1\u01a6\26\132\1\0\53\132\1\u01a7\26\132\1\0\45\132"+
    "\1\u01a8\5\132\1\133\26\132\1\0\45\132\1\u01a9\5\132"+
    "\1\133\26\132\1\0\53\132\1\133\6\132\1\u01a9\17\132"+
    "\1\0\53\132\1\133\5\132\1\u01aa\20\132\1\0\53\132"+
    "\1\133\3\132\1\u01ab\22\132\1\0\53\132\1\u01ac\26\132"+
    "\1\0\45\132\1\u01ad\5\132\1\133\26\132\1\0\47\132"+
    "\1\u01ae\3\132\1\133\26\132\1\0\45\132\1\u01af\5\132"+
    "\1\133\26\132\1\0\53\132\1\133\1\132\1\u01b0\24\132"+
    "\1\0\46\132\1\u01b1\4\132\1\133\26\132\1\0\45\132"+
    "\1\u01b2\5\132\1\133\26\132\1\0\34\132\17\0\1\u01b3"+
    "\102\0\1\u01b4\111\0\1\u01b5\110\0\1\u01b6\65\0\1\u01b7"+
    "\102\0\1\u01b8\102\0\1\u01b9\64\0\1\157\4\0\10\157"+
    "\1\160\1\u01ba\16\157\2\0\3\157\2\0\1\157\1\0"+
    "\6\157\4\0\6\157\1\160\2\157\2\0\2\157\1\0"+
    "\1\157\1\0\2\157\1\0\1\157\4\0\10\157\1\160"+
    "\1\u01bb\16\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\4\157"+
    "\1\u01bc\12\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\1\u01bd"+
    "\16\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\3\157\1\u01be\4\157\1\160"+
    "\17\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\5\157\1\u01bf\2\157\1\160"+
    "\17\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\54\0\1\u01c0\26\0\46\u018a\1\0\34\u018a\40\0"+
    "\1\u01c1\45\0\1\u0155\37\0\2\u0155\41\0\1\u01c2\13\0"+
    "\1\u018d\23\0\2\u01c2\55\0\1\u01c3\17\0\1\u01c3\46\0"+
    "\1\u0156\37\0\2\u0156\52\0\1\u01c4\105\0\1\u01c5\6\0"+
    "\1\u01c6\57\0\1\u0192\1\u01c7\12\0\1\u01c8\23\0\2\u0192"+
    "\54\0\1\u01c9\163\0\1\u01ca\13\0\1\u01cb\111\0\1\u01cc"+
    "\161\0\1\u01cd\30\0\1\u01ce\71\0\1\u01cf\113\0\1\u01d0"+
    "\72\0\1\u01d1\120\0\1\u01d2\102\0\1\u01d3\60\0\1\u01d4"+
    "\107\0\1\u01d5\117\0\1\u01d6\76\0\1\u01d7\141\0\1\u01d8"+
    "\36\0\1\u01d9\100\0\1\u01da\63\0\17\132\1\u01db\6\132"+
    "\1\u01dc\17\132\1\0\53\132\1\133\21\132\1\136\4\132"+
    "\1\0\15\132\1\137\12\132\1\u01dd\3\132\46\u01a7\1\0"+
    "\34\u01a7\17\132\1\133\26\132\1\0\13\132\1\u01de\20\132"+
    "\17\u01a9\1\u01df\26\u01a9\1\0\34\u01a9\17\132\1\133\12\132"+
    "\1\u01a9\13\132\1\0\53\132\1\u01e0\26\132\1\0\53\132"+
    "\1\133\21\132\1\136\4\132\1\0\15\132\1\137\11\132"+
    "\1\u01e1\17\132\1\u01e2\3\132\1\133\26\132\1\0\53\132"+
    "\1\133\4\132\1\u01e3\21\132\1\0\51\132\1\u01e4\1\132"+
    "\1\133\26\132\1\0\53\132\1\133\15\132\1\u01e5\10\132"+
    "\1\0\53\132\1\133\26\132\1\0\16\132\1\u01e6\34\132"+
    "\1\u01e7\26\132\1\0\34\132\16\0\1\u01e8\103\0\1\u01e9"+
    "\101\0\1\u01ea\103\0\1\u01eb\101\0\1\u01ec\102\0\1\u01ed"+
    "\102\0\1\u01ee\65\0\1\157\4\0\10\157\1\160\17\157"+
    "\2\0\3\157\2\0\1\157\1\0\6\157\4\0\6\157"+
    "\1\160\2\157\2\0\2\157\1\0\1\u01ef\1\0\2\157"+
    "\1\0\1\157\4\0\10\157\1\160\1\u01f0\16\157\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\10\157\1\160\1\u01f1\16\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\17\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\u01cd\1\157\1\0\2\157\1\0\1\157\4\0\5\157"+
    "\1\u01f2\2\157\1\160\17\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\1\0\1\157\4\0\10\157"+
    "\1\160\5\157\1\u01f3\11\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\13\0\1\u01f4\116\0\1\u01f5"+
    "\56\0\1\u01c2\1\u01f6\12\0\1\u018d\23\0\2\u01c2\41\0"+
    "\1\u01f7\13\0\1\u01c3\17\0\1\u01c3\3\0\2\u01f7\77\0"+
    "\1\u01f8\56\0\1\u01f9\104\0\1\u01c5\66\0\1\u0192\37\0"+
    "\2\u0192\112\0\1\u01fa\45\0\1\u01fb\105\0\1\u01fc\114\0"+
    "\1\u01fd\60\0\1\u01fe\130\0\1\u01ff\116\0\1\u0200\77\0"+
    "\1\u0201\56\0\1\u0202\106\0\1\u0203\62\0\1\u0204\125\0"+
    "\1\u0205\61\0\1\u0206\151\0\1\u0207\31\0\1\u0208\123\0"+
    "\1\u0209\142\0\1\u020a\27\0\1\u020b\146\0\1\u020c\17\0"+
    "\15\132\1\u020d\1\132\1\133\21\132\1\136\4\132\1\0"+
    "\15\132\1\137\35\132\1\u01db\26\132\1\0\53\132\1\133"+
    "\2\132\1\u020e\23\132\1\0\53\132\1\133\12\132\1\u01a7"+
    "\13\132\1\0\34\132\17\u01a9\1\u01df\21\u01a9\1\u020f\4\u01a9"+
    "\1\0\15\u01a9\1\u0210\16\u01a9\12\132\1\u0211\4\132\1\133"+
    "\21\132\1\136\4\132\1\0\15\132\1\137\35\132\1\133"+
    "\20\132\1\u0212\5\132\1\0\53\132\1\133\26\132\1\0"+
    "\2\132\1\u0213\50\132\1\133\5\132\1\u0214\20\132\1\0"+
    "\51\132\1\u0215\1\132\1\133\26\132\1\0\53\132\1\u0216"+
    "\26\132\1\0\53\132\1\133\26\132\1\0\23\132\1\u0217"+
    "\13\132\1\u0218\13\132\1\133\21\132\1\136\1\132\2\u0218"+
    "\1\132\1\0\15\132\1\137\16\132\17\0\1\u0219\102\0"+
    "\1\u021a\102\0\1\u021b\71\0\1\u021c\113\0\1\u021d\102\0"+
    "\1\u021e\102\0\1\u021f\64\0\1\157\4\0\10\157\1\160"+
    "\3\157\1\u0220\13\157\2\0\3\157\2\0\1\157\1\0"+
    "\6\157\4\0\6\157\1\160\2\157\2\0\2\157\1\0"+
    "\1\157\1\0\2\157\1\0\1\157\4\0\10\157\1\160"+
    "\1\u0221\16\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\4\157\1\u0222\3\157"+
    "\1\160\17\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\17\157"+
    "\2\0\3\157\2\0\1\157\1\0\2\157\1\u0223\3\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\6\157"+
    "\1\u0224\10\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\10\0\1\u0225\162\0\1\u0226\15\0\1\u01c2"+
    "\37\0\2\u01c2\41\0\1\u01f7\1\u0227\12\0\1\u0228\23\0"+
    "\2\u01f7\47\0\1\u0229\102\0\1\u022a\105\0\1\u022b\71\0"+
    "\1\u022c\37\0\2\u022c\44\0\1\u022d\117\0\1\u022e\113\0"+
    "\1\u022f\145\0\1\u0230\35\0\1\u0231\61\0\1\u0232\122\0"+
    "\1\u0233\62\0\1\u0234\117\0\1\u0235\73\0\1\u0236\110\0"+
    "\1\u0237\74\0\1\u0238\106\0\1\u0239\102\0\1\u023a\62\0"+
    "\1\u023b\37\0\2\u023b\47\0\1\u023c\71\0\11\132\1\u023d"+
    "\5\132\1\133\26\132\1\0\42\132\1\u023e\10\132\1\133"+
    "\26\132\1\0\34\132\17\u01a9\1\u01df\14\u01a9\1\u023f\11\u01a9"+
    "\1\0\53\u01a9\1\u01df\1\u01a9\1\u0240\24\u01a9\1\0\34\u01a9"+
    "\17\132\1\133\14\132\1\u0241\11\132\1\0\53\132\1\133"+
    "\26\132\1\0\30\132\1\u0242\14\132\1\u0243\5\132\1\133"+
    "\26\132\1\0\53\132\1\133\11\132\1\u0244\14\132\1\0"+
    "\53\132\1\u0245\26\132\1\0\53\132\1\133\12\132\1\u0246"+
    "\6\132\1\136\4\132\1\0\15\132\1\137\21\132\1\u0218"+
    "\1\u0247\12\132\1\u0248\23\132\2\u0218\1\132\1\0\34\132"+
    "\46\u0219\1\0\34\u0219\55\0\1\u021d\1\u0249\27\0\1\u024a"+
    "\37\0\2\u024a\47\0\1\u024b\71\0\46\u021d\1\0\34\u021d"+
    "\46\u021e\1\0\34\u021e\3\0\1\u024c\37\0\2\u024c\37\0"+
    "\1\157\4\0\1\u024d\7\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\10\157\1\160\1\u024e\16\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\15\157\1\u024f\1\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\3\157\1\u0250\4\157\1\160\17\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\12\157\1\u0251\4\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\17\0\1\u0252\153\0"+
    "\1\u0253\15\0\1\u01f7\37\0\2\u01f7\41\0\1\u0254\13\0"+
    "\1\u0228\23\0\2\u0254\55\0\1\u0255\145\0\1\u0256\46\0"+
    "\1\u0257\54\0\46\u022c\1\0\34\u022c\27\0\1\u0258\105\0"+
    "\1\u0259\101\0\1\u025a\107\0\1\u025b\55\0\1\u025c\110\0"+
    "\1\u025d\74\0\1\u025e\110\0\1\u025f\115\0\1\u0260\56\0"+
    "\1\u0261\120\0\1\u0262\141\0\1\u0263\32\0\1\u0264\123\0"+
    "\1\u0265\51\0\1\u023b\1\u020b\12\0\1\u0266\23\0\2\u023b"+
    "\63\0\1\u0267\55\0\17\132\1\133\26\132\1\0\13\132"+
    "\1\u0268\37\132\1\133\7\132\1\u0269\16\132\1\0\34\132"+
    "\12\u01a9\1\u026a\4\u01a9\1\u01df\26\u01a9\1\0\53\u01a9\1\u01df"+
    "\6\u01a9\1\u026b\17\u01a9\1\0\34\u01a9\17\132\1\133\11\132"+
    "\1\u026c\14\132\1\0\53\132\1\133\16\132\1\u026d\7\132"+
    "\1\0\53\132\1\u026e\26\132\1\0\45\132\1\u026f\5\132"+
    "\1\133\26\132\1\0\53\132\1\133\12\132\1\u0270\6\132"+
    "\1\136\4\132\1\0\15\132\1\137\35\132\1\133\26\132"+
    "\1\0\5\132\1\u0271\31\132\1\u0218\13\132\1\133\23\132"+
    "\2\u0218\1\132\1\0\46\132\1\u0272\4\132\1\133\21\132"+
    "\1\136\4\132\1\0\15\132\1\137\16\132\56\0\1\u0273"+
    "\24\0\46\u024a\1\0\34\u024a\12\0\1\u0274\73\0\1\u024c"+
    "\1\u021f\36\0\2\u024c\37\0\1\157\4\0\10\157\1\160"+
    "\10\157\1\u0275\6\157\2\0\3\157\2\0\1\157\1\0"+
    "\6\157\4\0\6\157\1\160\2\157\2\0\2\157\1\0"+
    "\1\157\1\0\2\157\1\0\1\157\4\0\10\157\1\160"+
    "\1\u0276\16\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\12\157"+
    "\1\u0277\4\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\1\u0278"+
    "\16\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\3\157\1\u0279\4\157\1\160"+
    "\17\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\14\0\1\u027a\110\0\1\u027b\63\0\1\u0254\1\u027c"+
    "\36\0\2\u0254\26\0\1\u027d\51\0\1\u027e\72\0\1\u027f"+
    "\67\0\1\u0280\102\0\1\u0281\102\0\1\u0282\114\0\1\u0283"+
    "\54\0\1\u0284\37\0\2\u0284\61\0\1\u0285\62\0\1\u0286"+
    "\37\0\2\u0286\63\0\1\u0287\74\0\1\u0288\102\0\1\u0289"+
    "\74\0\1\u028a\110\0\1\u028b\74\0\1\u028c\116\0\1\u028d"+
    "\112\0\1\u028e\100\0\1\u028f\75\0\1\u0290\54\0\17\132"+
    "\1\133\12\132\1\u0291\13\132\1\0\53\132\1\u0292\26\132"+
    "\1\0\34\132\17\u01a9\1\u01df\26\u01a9\1\0\16\u01a9\1\u0293"+
    "\34\u01a9\1\u01df\12\u01a9\1\u0294\13\u01a9\1\0\34\u01a9\17\132"+
    "\1\133\11\132\1\u0295\14\132\1\0\37\132\1\u0296\13\132"+
    "\1\133\23\132\2\u0296\1\132\1\0\37\132\1\u0297\13\132"+
    "\1\133\21\132\1\136\1\132\2\u0297\1\132\1\0\15\132"+
    "\1\137\35\132\1\133\5\132\1\u0298\20\132\1\0\53\132"+
    "\1\133\26\132\1\0\5\132\1\u0299\37\132\1\u029a\5\132"+
    "\1\133\26\132\1\0\53\132\1\133\3\132\1\u029b\22\132"+
    "\1\0\34\132\56\0\1\u029c\56\0\1\u029d\51\0\1\157"+
    "\4\0\10\157\1\160\1\u029e\16\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\1\u029f\16\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\1\0\1\157\4\0\10\157"+
    "\1\160\12\157\1\u02a0\4\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\1\0\1\157\1\0\1\u0286"+
    "\2\0\10\157\1\160\17\157\2\0\3\157\2\u0286\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\1\0\1\157\4\0\10\157"+
    "\1\160\6\157\1\u02a1\10\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\23\0\1\u02a2\154\0\1\u02a3"+
    "\10\0\1\u0254\37\0\2\u0254\55\0\1\u02a4\17\0\1\u02a4"+
    "\57\0\1\u02a5\157\0\1\u02a6\14\0\1\u02a7\37\0\2\u02a7"+
    "\120\0\1\u02a8\34\0\1\u02a9\71\0\1\u02aa\37\0\2\u02aa"+
    "\55\0\1\u02ab\66\0\1\u0286\1\u025d\12\0\1\u02ac\23\0"+
    "\2\u0286\70\0\1\u02ad\67\0\1\u02ae\73\0\1\u02af\104\0"+
    "\1\u02b0\122\0\1\u02b1\76\0\1\u02b2\100\0\1\u02b3\67\0"+
    "\1\u02b4\105\0\1\u02b5\101\0\1\u02b6\67\0\3\132\1\u02b7"+
    "\13\132\1\133\21\132\1\136\1\132\2\u02b7\1\132\1\0"+
    "\15\132\1\137\16\132\11\u01a9\1\u02b8\5\u01a9\1\u01df\26\u01a9"+
    "\1\0\53\u01a9\1\u02b9\26\u01a9\1\0\34\u01a9\14\132\1\u02ba"+
    "\2\132\1\133\26\132\1\0\37\132\1\u02bb\13\132\1\133"+
    "\23\132\2\u02bb\1\132\1\0\37\132\1\u0297\1\u02bc\12\132"+
    "\1\u02bd\23\132\2\u0297\1\132\1\0\53\132\1\133\12\132"+
    "\1\u02be\13\132\1\0\45\132\1\u02bf\5\132\1\133\26\132"+
    "\1\0\53\132\1\133\11\132\1\u02c0\14\132\1\0\45\132"+
    "\1\u02c1\5\132\1\133\26\132\1\0\34\132\56\0\1\u02c2"+
    "\60\0\1\u02c3\47\0\1\157\1\0\1\u02a7\2\0\10\157"+
    "\1\160\17\157\2\0\3\157\2\u02a7\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\1\u02c4"+
    "\16\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\6\157\1\u02c5\1\157\1\160"+
    "\17\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\1\0\1\157\4\0\10\157\1\160\13\157\1\u02c6"+
    "\3\157\2\0\3\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\11\0\1\u02c7\74\0\1\u02c8\13\0\1\u02a4\17\0"+
    "\1\u02a4\3\0\2\u02c8\61\0\1\u02c9\73\0\1\u02ca\71\0"+
    "\1\u02a7\1\u0281\12\0\1\u02cb\23\0\2\u02a7\72\0\1\u02cc"+
    "\73\0\1\u02cd\73\0\1\u02ce\103\0\1\u02cf\74\0\1\u02d0"+
    "\110\0\1\u02d1\102\0\1\u02d2\77\0\1\u02d3\120\0\1\u02d4"+
    "\104\0\1\u02d5\100\0\1\u02d6\67\0\1\u02d7\124\0\1\u02d8"+
    "\64\0\1\u02d9\111\0\1\u02da\50\0\3\132\1\u02b7\1\u02db"+
    "\12\132\1\u02dc\23\132\2\u02b7\1\132\1\0\34\132\17\u01a9"+
    "\1\u01df\21\u01a9\1\u02dd\4\u01a9\1\0\51\u01a9\1\u02de\1\u01a9"+
    "\1\u01df\21\u01a9\1\u020f\4\u01a9\1\0\15\u01a9\1\u0210\16\u01a9"+
    "\17\132\1\133\5\132\1\u02df\20\132\1\0\52\132\1\u02e0"+
    "\1\133\26\132\1\0\37\132\1\u0297\13\132\1\133\23\132"+
    "\2\u0297\1\132\1\0\45\132\1\u02e1\5\132\1\133\21\132"+
    "\1\136\4\132\1\0\15\132\1\137\35\132\1\u02e2\26\132"+
    "\1\0\53\132\1\133\11\132\1\u02e3\14\132\1\0\53\132"+
    "\1\u02e4\26\132\1\0\53\132\1\133\21\132\1\u02e5\4\132"+
    "\1\0\34\132\17\0\1\u02e6\106\0\1\u02e7\60\0\1\157"+
    "\4\0\10\157\1\160\1\u02e8\16\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\6\157\1\u02e9\10\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\1\u02ea\16\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\17\0\1\u02eb\66\0\1\u02c8"+
    "\1\u02ec\12\0\1\u02ed\23\0\2\u02c8\64\0\1\u02ee\77\0"+
    "\1\u02ef\70\0\1\u02f0\114\0\1\u02f1\120\0\1\u02f2\44\0"+
    "\1\u02f3\37\0\2\u02f3\44\0\1\u02f4\176\0\1\u02f5\71\0"+
    "\1\u02f6\27\0\1\u02f7\116\0\1\u02f8\104\0\1\u02f9\65\0"+
    "\1\u02fa\106\0\1\u02fb\105\0\1\u02fc\100\0\1\u02fd\113\0"+
    "\1\u02fe\45\0\3\132\1\u02b7\13\132\1\133\23\132\2\u02b7"+
    "\1\132\1\0\45\132\1\u02ff\5\132\1\133\21\132\1\136"+
    "\4\132\1\0\15\132\1\137\16\132\17\u01a9\1\u01a7\26\u01a9"+
    "\1\0\45\u01a9\1\u0300\5\u01a9\1\u01df\26\u01a9\1\0\34\u01a9"+
    "\17\132\1\133\21\132\1\u0301\4\132\1\0\37\132\1\u0302"+
    "\13\132\1\133\23\132\2\u0302\1\132\1\0\53\132\1\133"+
    "\26\132\1\0\33\132\1\u0303\17\132\1\133\21\132\1\136"+
    "\4\132\1\0\15\132\1\137\4\132\1\u0304\30\132\1\u0305"+
    "\26\132\1\0\53\132\1\133\21\132\1\136\4\132\1\0"+
    "\13\132\1\u0306\1\132\1\137\31\132\1\u0307\3\132\1\133"+
    "\26\132\1\0\34\132\55\0\1\u021d\102\0\1\u0308\26\0"+
    "\1\157\4\0\10\157\1\u0309\17\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\17\157\2\0\1\157\1\u030a\1\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\17\157\2\0\3\157\2\0\1\157\1\0"+
    "\6\157\4\0\6\157\1\160\1\157\1\u030b\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\35\0\1\u030c\50\0\1\u02c8"+
    "\37\0\2\u02c8\41\0\1\u030d\13\0\1\u02ed\23\0\2\u030d"+
    "\55\0\1\u030e\73\0\1\u030f\174\0\1\u0310\17\0\1\u0311"+
    "\102\0\1\u0312\66\0\1\u0313\37\0\2\u0313\50\0\1\u0314"+
    "\100\0\1\u0315\103\0\1\u0316\71\0\46\u02f7\1\0\34\u02f7"+
    "\54\0\1\u0317\51\0\1\u0318\105\0\1\u0319\75\0\1\u031a"+
    "\72\0\1\u031b\125\0\1\u031c\65\0\1\u031d\63\0\17\132"+
    "\1\133\26\132\1\0\33\132\1\u031e\17\u01a9\1\u01df\26\u01a9"+
    "\1\0\13\u01a9\1\u031f\20\u01a9\17\132\1\u0320\26\132\1\0"+
    "\37\132\1\u0321\13\132\1\133\23\132\2\u0321\1\132\1\0"+
    "\44\132\1\u0322\6\132\1\133\26\132\1\0\45\132\1\u0323"+
    "\5\132\1\133\26\132\1\0\53\132\1\133\21\132\1\136"+
    "\4\132\1\0\13\132\1\u0324\1\132\1\137\35\132\1\133"+
    "\14\132\1\u0325\11\132\1\0\53\132\1\133\12\132\1\u0326"+
    "\13\132\1\0\34\132\26\0\1\u0327\73\0\1\u0328\64\0"+
    "\1\157\4\0\10\157\1\160\1\u0329\16\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\1\0\1\157"+
    "\4\0\3\157\1\u032a\4\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\6\157\1\160\2\157"+
    "\2\0\2\157\1\0\1\157\1\0\2\157\34\0\1\u032b"+
    "\51\0\1\u030d\1\u032c\36\0\2\u030d\26\0\1\u032d\52\0"+
    "\1\u032e\65\0\1\u032f\64\0\1\u0330\170\0\1\u0331\22\0"+
    "\1\u0332\75\0\1\u0333\116\0\1\u0334\74\0\1\u0335\102\0"+
    "\1\u0336\74\0\1\u0337\103\0\1\u0338\102\0\1\u0339\107\0"+
    "\1\u033a\71\0\1\u033b\74\0\10\132\1\u033c\6\132\1\133"+
    "\26\132\1\0\34\132\17\u01a9\1\u01df\12\u01a9\1\u01a7\13\u01a9"+
    "\1\0\34\u01a9\17\132\1\133\21\132\1\136\4\132\1\0"+
    "\15\132\1\137\11\132\1\u033d\22\132\1\u033e\1\133\26\132"+
    "\1\0\45\132\1\u033f\5\132\1\133\26\132\1\0\53\132"+
    "\1\133\5\132\1\u0340\20\132\1\0\53\132\1\133\14\132"+
    "\1\u0341\11\132\1\0\53\132\1\133\3\132\1\u0342\22\132"+
    "\1\0\53\132\1\133\6\132\1\u0343\17\132\1\0\34\132"+
    "\57\0\1\u0344\23\0\46\u0328\1\0\34\u0328\1\0\1\157"+
    "\4\0\10\157\1\160\17\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\u0331\1\157\1\0\2\157\1\0\1\157\4\0\10\157"+
    "\1\160\6\157\1\u0345\10\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\21\0\1\u0346\64\0\1\u030d"+
    "\37\0\2\u030d\102\0\1\u0347\55\0\1\u0348\74\0\1\u0349"+
    "\131\0\1\u034a\45\0\1\u034b\37\0\2\u034b\61\0\1\u034c"+
    "\111\0\1\u034d\125\0\1\u034e\30\0\1\u034f\37\0\2\u034f"+
    "\50\0\1\u0350\122\0\1\u0351\102\0\1\u0352\122\0\1\u0353"+
    "\42\0\1\u0354\70\0\11\132\1\u0355\5\132\1\133\26\132"+
    "\1\0\53\132\1\133\20\132\1\u0356\5\132\1\0\37\132"+
    "\1\u0357\13\132\1\133\23\132\2\u0357\1\132\1\0\53\132"+
    "\1\133\3\132\1\u0358\22\132\1\0\53\132\1\133\12\132"+
    "\1\u0359\13\132\1\0\53\132\1\133\3\132\1\u035a\22\132"+
    "\1\0\53\132\1\u035b\26\132\1\0\53\132\1\u035c\26\132"+
    "\1\0\34\132\17\0\1\u035d\64\0\1\157\4\0\10\157"+
    "\1\160\13\157\1\u035e\3\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\17\0\1\u035f\127\0\1\u0360"+
    "\70\0\1\u0361\73\0\1\u0362\156\0\1\u0363\6\0\1\u0364"+
    "\37\0\2\u0364\51\0\1\u0365\106\0\1\u0366\66\0\1\u0367"+
    "\37\0\2\u0367\41\0\1\u034f\1\u0336\36\0\2\u034f\70\0"+
    "\1\u0368\76\0\1\u02d8\110\0\1\u0369\102\0\1\u036a\62\0"+
    "\1\u036b\66\0\17\132\1\133\3\132\1\u036c\22\132\1\0"+
    "\53\132\1\133\26\132\1\0\30\132\1\u036d\6\132\1\u036e"+
    "\13\132\1\133\23\132\2\u036e\1\132\1\0\47\132\1\u036f"+
    "\3\132\1\133\26\132\1\0\53\132\1\u0370\26\132\1\0"+
    "\53\132\1\u0371\26\132\1\0\37\132\1\u0372\13\132\1\133"+
    "\21\132\1\136\1\132\2\u0372\1\132\1\0\15\132\1\137"+
    "\32\132\1\u0373\2\132\1\133\21\132\1\136\4\132\1\0"+
    "\15\132\1\137\16\132\16\0\1\u0374\65\0\1\157\4\0"+
    "\10\157\1\160\1\u0375\16\157\2\0\3\157\2\0\1\157"+
    "\1\0\6\157\4\0\6\157\1\160\2\157\2\0\2\157"+
    "\1\0\1\157\1\0\2\157\13\0\1\u0376\132\0\1\u0377"+
    "\73\0\1\u0378\61\0\1\u0379\125\0\1\u037a\144\0\1\u037b"+
    "\13\0\1\u037c\112\0\1\u037d\17\0\1\u037e\44\0\1\u0367"+
    "\1\u034e\12\0\1\u037f\23\0\2\u0367\72\0\1\u0380\71\0"+
    "\1\u0381\74\0\1\u0382\112\0\1\u0383\55\0\13\132\1\u0384"+
    "\3\132\1\133\26\132\1\0\53\132\1\133\16\132\1\u0385"+
    "\7\132\1\0\53\132\1\133\26\132\1\0\31\132\1\u0386"+
    "\13\132\1\u0387\5\132\1\133\26\132\1\0\53\132\1\133"+
    "\1\132\1\u0388\17\132\1\u0389\4\132\1\0\15\132\1\137"+
    "\21\132\1\u038a\13\132\1\133\21\132\1\136\1\132\2\u038a"+
    "\1\132\1\0\15\132\1\137\21\132\1\u0372\1\u038b\12\132"+
    "\1\u038c\23\132\2\u0372\1\132\1\0\53\132\1\133\5\132"+
    "\1\u038d\20\132\1\0\34\132\46\u0374\1\0\34\u0374\1\0"+
    "\1\157\4\0\10\157\1\160\2\157\1\u038e\14\157\2\0"+
    "\1\157\1\u038f\1\157\2\0\1\157\1\0\6\157\4\0"+
    "\6\157\1\160\2\157\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\25\0\1\u0390\74\0\1\u0391\102\0\1\u0392\74\0"+
    "\1\u0393\74\0\1\u0394\37\0\2\u0394\54\0\1\u0395\111\0"+
    "\1\u0396\65\0\1\u0397\126\0\1\u0398\122\0\1\u0399\51\0"+
    "\1\u039a\76\0\1\u039b\124\0\1\u039c\41\0\11\132\1\u039d"+
    "\5\132\1\133\26\132\1\0\37\132\1\u039e\13\132\1\133"+
    "\23\132\2\u039e\1\132\1\0\52\132\1\u039f\1\133\26\132"+
    "\1\0\53\132\1\133\5\132\1\u03a0\20\132\1\0\44\132"+
    "\1\u03a1\6\132\1\133\26\132\1\0\53\132\1\133\14\132"+
    "\1\u03a2\11\132\1\0\37\132\1\u038a\1\u03a3\12\132\1\u03a4"+
    "\23\132\2\u038a\1\132\1\0\37\132\1\u0372\13\132\1\133"+
    "\23\132\2\u0372\1\132\1\0\46\132\1\u03a5\4\132\1\133"+
    "\21\132\1\136\4\132\1\0\15\132\1\137\35\132\1\133"+
    "\21\132\1\u03a6\4\132\1\0\34\132\1\0\1\157\4\0"+
    "\2\157\1\u03a7\5\157\1\160\17\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\1\0\1\157\4\0"+
    "\10\157\1\160\15\157\1\u03a8\1\157\2\0\3\157\2\0"+
    "\1\157\1\0\6\157\4\0\6\157\1\160\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\2\157\32\0\1\u03a9\107\0"+
    "\1\u03aa\71\0\1\u03ab\101\0\1\u03ac\60\0\1\u03ad\37\0"+
    "\2\u03ad\134\0\1\u03ae\16\0\1\u03af\107\0\1\u03b0\154\0"+
    "\1\u03b1\45\0\1\u03b2\65\0\1\u03b3\101\0\1\u03b4\64\0"+
    "\17\132\1\133\5\132\1\u03b5\20\132\1\0\37\132\1\u03b6"+
    "\13\132\1\133\23\132\2\u03b6\1\132\1\0\53\132\1\133"+
    "\26\132\1\0\27\132\1\u03b7\16\132\1\u03b8\4\132\1\133"+
    "\26\132\1\0\53\132\1\u03b9\26\132\1\0\46\132\1\315"+
    "\4\132\1\133\26\132\1\0\22\132\1\u03ba\14\132\1\u038a"+
    "\13\132\1\133\23\132\2\u038a\1\132\1\0\46\132\1\u03bb"+
    "\4\132\1\133\21\132\1\136\4\132\1\0\15\132\1\137"+
    "\35\132\1\133\3\132\1\u03bc\22\132\1\0\53\132\1\u03bd"+
    "\26\132\1\0\34\132\1\0\1\157\4\0\10\157\1\160"+
    "\1\u03be\16\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\1\0\1\157\4\0\10\157\1\160\17\157"+
    "\2\0\3\157\2\0\1\157\1\0\6\157\4\0\6\157"+
    "\1\160\1\157\1\u03bf\2\0\2\157\1\0\1\157\1\0"+
    "\2\157\11\0\1\u03c0\130\0\1\u03c1\54\0\1\u03c2\103\0"+
    "\1\u03c3\106\0\1\u03c4\67\0\1\u03c5\37\0\2\u03c5\47\0"+
    "\1\u03c6\152\0\1\u03c7\46\0\1\u0397\65\0\1\u03c8\75\0"+
    "\1\u03c9\37\0\2\u03c9\55\0\1\u03ca\63\0\12\132\1\u03cb"+
    "\4\132\1\133\26\132\1\0\52\132\1\u03cc\1\133\26\132"+
    "\1\0\37\132\1\u03cd\13\132\1\133\23\132\2\u03cd\1\132"+
    "\1\0\45\132\1\u03ce\5\132\1\133\26\132\1\0\53\132"+
    "\1\133\21\132\1\136\4\132\1\0\12\132\1\u03cf\2\132"+
    "\1\137\35\132\1\133\5\132\1\u03a1\20\132\1\0\53\132"+
    "\1\133\3\132\1\u03d0\22\132\1\0\45\132\1\u03d1\5\132"+
    "\1\133\26\132\1\0\37\132\1\u03d2\13\132\1\133\21\132"+
    "\1\136\1\132\2\u03d2\1\132\1\0\15\132\1\137\16\132"+
    "\1\0\1\157\4\0\10\157\1\160\17\157\2\0\3\157"+
    "\2\0\1\157\1\0\6\157\4\0\1\u03d3\5\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\1\0"+
    "\1\157\4\0\10\157\1\160\6\157\1\u03a7\10\157\2\0"+
    "\3\157\2\0\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\23\0"+
    "\1\u03d4\115\0\1\u03d5\56\0\1\u03d6\101\0\1\u03d7\74\0"+
    "\1\u03d8\37\0\2\u03d8\41\0\1\u03c5\1\u03ae\36\0\2\u03c5"+
    "\33\0\1\u03d9\21\0\1\u03da\120\0\1\u03db\73\0\1\u03dc"+
    "\57\0\1\u03c9\1\u03b3\36\0\2\u03c9\41\0\1\u03dd\37\0"+
    "\2\u03dd\36\0\11\132\1\u03de\5\132\1\133\26\132\1\0"+
    "\37\132\1\u03df\13\132\1\133\23\132\2\u03df\1\132\1\0"+
    "\37\132\1\u03cd\1\u03b7\12\132\1\133\23\132\2\u03cd\1\132"+
    "\1\0\31\132\1\u03e0\21\132\1\u03e1\26\132\1\0\53\132"+
    "\1\133\15\132\1\u03e2\10\132\1\0\45\132\1\u03e3\5\132"+
    "\1\133\26\132\1\0\53\132\1\133\21\132\1\u03e4\4\132"+
    "\1\0\37\132\1\u03d2\1\u03e5\12\132\1\u03e6\23\132\2\u03d2"+
    "\1\132\1\0\34\132\1\0\1\157\4\0\10\157\1\160"+
    "\16\157\1\u03e7\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\11\0\1\u03e8\127\0\1\u03e9\76\0\1\u03ea"+
    "\67\0\1\u03eb\66\0\1\u03ec\37\0\2\u03ec\46\0\1\u03ed"+
    "\111\0\1\u03ee\67\0\1\u03ef\101\0\1\u03dd\1\u03ca\36\0"+
    "\2\u03dd\36\0\17\132\1\u03f0\26\132\1\0\37\132\1\u03f1"+
    "\13\132\1\133\23\132\2\u03f1\1\132\1\0\44\132\1\u03f2"+
    "\6\132\1\133\21\132\1\136\4\132\1\0\15\132\1\137"+
    "\35\132\1\u03f3\26\132\1\0\53\132\1\133\21\132\1\u03f4"+
    "\4\132\1\0\47\132\1\u03f5\3\132\1\133\26\132\1\0"+
    "\37\132\1\u03d2\13\132\1\133\23\132\2\u03d2\1\132\1\0"+
    "\45\132\1\u03f6\5\132\1\133\21\132\1\136\4\132\1\0"+
    "\15\132\1\137\16\132\1\0\1\157\4\0\10\157\1\160"+
    "\1\u03f7\16\157\2\0\3\157\2\0\1\157\1\0\6\157"+
    "\4\0\6\157\1\160\2\157\2\0\2\157\1\0\1\157"+
    "\1\0\2\157\26\0\1\u03f8\110\0\1\u03f9\56\0\1\u03fa"+
    "\110\0\1\u03fb\120\0\1\u03fc\51\0\1\u03fd\37\0\2\u03fd"+
    "\55\0\1\u03fe\63\0\10\132\1\u03ff\6\132\1\133\21\132"+
    "\1\136\4\132\1\0\15\132\1\137\34\132\1\u0400\1\133"+
    "\26\132\1\0\53\132\1\133\14\132\1\u0401\11\132\1\0"+
    "\37\132\1\u0402\13\132\1\133\21\132\1\136\1\132\2\u0402"+
    "\1\132\1\0\15\132\1\137\31\132\1\u0403\3\132\1\133"+
    "\26\132\1\0\53\132\1\133\12\132\1\u0404\13\132\1\0"+
    "\53\132\1\133\11\132\1\u0405\14\132\1\0\34\132\1\0"+
    "\1\157\1\0\1\u03fd\2\0\10\157\1\160\17\157\2\0"+
    "\3\157\2\u03fd\1\157\1\0\6\157\4\0\6\157\1\160"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\2\157\32\0"+
    "\1\u0406\73\0\1\u0407\113\0\1\u0408\51\0\1\u0409\37\0"+
    "\2\u0409\51\0\1\u040a\72\0\1\u03fd\1\u03ee\12\0\1\u040b"+
    "\23\0\2\u03fd\41\0\1\u040c\37\0\2\u040c\36\0\17\132"+
    "\1\133\14\132\1\u040d\11\132\1\0\37\132\1\u040e\13\132"+
    "\1\133\23\132\2\u040e\1\132\1\0\47\132\1\u040f\3\132"+
    "\1\133\26\132\1\0\37\132\1\u0402\1\u0410\12\132\1\u0411"+
    "\23\132\2\u0402\1\132\1\0\53\132\1\133\12\132\1\u0412"+
    "\13\132\1\0\53\132\1\133\6\132\1\u0413\17\132\1\0"+
    "\44\132\1\u0414\6\132\1\133\26\132\1\0\34\132\11\0"+
    "\1\u0415\146\0\1\u0416\40\0\1\u0417\72\0\1\u0418\37\0"+
    "\2\u0418\63\0\1\u0419\65\0\1\u041a\75\0\1\u040c\1\u03fe"+
    "\12\0\1\u041b\23\0\2\u040c\36\0\13\132\1\u041c\3\132"+
    "\1\133\26\132\1\0\37\132\1\u041d\13\132\1\133\23\132"+
    "\2\u041d\1\132\1\0\53\132\1\133\5\132\1\u041e\20\132"+
    "\1\0\37\132\1\u0402\13\132\1\133\23\132\2\u0402\1\132"+
    "\1\0\44\132\1\u041f\6\132\1\133\21\132\1\136\4\132"+
    "\1\0\15\132\1\137\35\132\1\133\6\132\1\u0420\17\132"+
    "\1\0\41\132\1\u0421\11\132\1\133\26\132\1\0\53\132"+
    "\1\133\12\132\1\u0422\13\132\1\0\34\132\41\0\1\u0423"+
    "\67\0\1\u0424\101\0\1\u0425\155\0\1\u0426\34\0\1\u0427"+
    "\104\0\1\u0428\100\0\1\u0429\50\0\17\132\1\133\5\132"+
    "\1\u042a\20\132\1\0\53\132\1\133\26\132\1\0\31\132"+
    "\1\u042b\21\132\1\133\12\132\1\u042c\13\132\1\0\53\132"+
    "\1\133\14\132\1\u042d\11\132\1\0\41\132\1\u042e\11\132"+
    "\1\133\26\132\1\0\53\132\1\133\15\132\1\u042f\10\132"+
    "\1\0\34\132\57\0\1\u0430\55\0\1\u0431\66\0\1\u0432"+
    "\141\0\1\u0433\40\0\1\u0434\110\0\1\u0435\61\0\17\132"+
    "\1\133\12\132\1\u0436\13\132\1\0\52\132\1\u0437\1\133"+
    "\26\132\1\0\53\132\1\133\26\132\1\0\6\132\1\u0438"+
    "\40\132\1\u0439\3\132\1\133\26\132\1\0\53\132\1\u043a"+
    "\26\132\1\0\34\132\17\0\1\u043b\140\0\1\u043c\123\0"+
    "\1\u043d\32\0\1\u043e\101\0\1\u043f\100\0\1\u0440\57\0"+
    "\17\132\1\133\26\132\1\0\6\132\1\u0441\44\132\1\133"+
    "\26\132\1\0\27\132\1\u0442\23\132\1\133\6\132\1\u0443"+
    "\17\132\1\0\53\132\1\133\5\132\1\u0444\20\132\1\0"+
    "\46\132\1\u0445\4\132\1\133\21\132\1\136\4\132\1\0"+
    "\15\132\1\137\16\132\16\0\1\u0446\112\0\1\u0447\57\0"+
    "\1\u0448\37\0\2\u0448\115\0\1\u0449\55\0\1\u044a\75\0"+
    "\1\u044b\55\0\17\132\1\133\6\132\1\u044c\17\132\1\0"+
    "\37\132\1\u044d\13\132\1\133\23\132\2\u044d\1\132\1\0"+
    "\53\132\1\133\26\132\1\0\10\132\1\u044e\42\132\1\133"+
    "\12\132\1\u044f\13\132\1\0\50\132\1\u0450\2\132\1\133"+
    "\26\132\1\0\34\132\46\u0446\1\0\34\u0446\57\0\1\u0451"+
    "\26\0\1\u0448\1\u043d\36\0\2\u0448\33\0\1\u0452\7\0"+
    "\1\u0453\123\0\1\u0454\54\0\17\132\1\133\26\132\1\0"+
    "\10\132\1\u0455\26\132\1\u044d\1\u0442\12\132\1\133\23\132"+
    "\2\u044d\1\132\1\0\31\132\1\u0456\7\132\1\u0457\11\132"+
    "\1\133\26\132\1\0\53\132\1\133\3\132\1\u0458\22\132"+
    "\1\0\34\132\5\0\1\u0459\154\0\1\u045a\23\0\5\132"+
    "\1\u045b\11\132\1\133\26\132\1\0\53\132\1\133\4\132"+
    "\1\u045c\21\132\1\0\34\132\17\0\1\u045d\63\0\17\132"+
    "\1\133\14\132\1\u045e\11\132\1\0\34\132\62\0\1\u045f"+
    "\20\0\17\132\1\u0460\26\132\1\0\34\132\23\0\1\u0461"+
    "\57\0\17\132\1\133\21\132\1\136\4\132\1\0\5\132"+
    "\1\u0462\7\132\1\137\16\132\34\0\1\u0463\46\0\17\132"+
    "\1\133\14\132\1\u0464\11\132\1\0\34\132\31\0\1\u0465"+
    "\51\0\15\132\1\u0466\1\132\1\133\26\132\1\0\34\132"+
    "\17\0\1\u0467\63\0\17\132\1\133\21\132\1\u0468\4\132"+
    "\1\0\34\132\26\0\1\u0469\54\0\17\132\1\133\6\132"+
    "\1\u046a\17\132\1\0\34\132\11\0\1\u046b\103\0\1\u046c"+
    "\122\0\1\u046d\104\0\1\u046e\71\0\1\u046f\76\0\1\u0470"+
    "\66\0\1\u0471\37\0\2\u0471\41\0\1\u0471\1\u0470\12\0"+
    "\1\u0472\23\0\2\u0471\70\0\1\u0473\104\0\1\u0474\65\0"+
    "\1\u0475\111\0\1\u0476\65\0\1\u0477\103\0\1\u0478\122\0"+
    "\1\u0479\104\0\1\u047a\71\0\1\u047b\76\0\1\u047c\66\0"+
    "\1\u047d\37\0\2\u047d\41\0\1\u047d\1\u047c\12\0\1\u047e"+
    "\23\0\2\u047d\51\0\1\u047f\115\0\1\u0480\72\0\1\u0481"+
    "\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[74772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\11\35\1\1\11\6\1\1\11\7\1\1\11"+
    "\11\1\62\0\1\1\2\0\1\1\25\0\1\11\23\0"+
    "\1\1\5\0\1\1\71\0\2\1\1\0\1\1\151\0"+
    "\1\1\1\0\1\1\4\0\1\1\55\0\1\1\34\0"+
    "\1\1\1\0\1\1\30\0\1\1\34\0\1\1\52\0"+
    "\1\11\4\0\2\1\6\0\1\1\1\0\1\1\3\0"+
    "\2\1\15\0\1\1\22\0\2\1\11\0\1\1\1\0"+
    "\1\1\35\0\2\1\23\0\1\11\21\0\1\1\1\0"+
    "\2\1\16\0\1\11\24\0\2\1\36\0\1\11\4\0"+
    "\2\1\30\0\1\1\10\0\1\1\20\0\1\11\2\0"+
    "\1\11\12\0\1\1\10\0\1\1\4\0\1\11\41\0"+
    "\1\1\44\0\1\1\16\0\1\11\30\0\1\11\54\0"+
    "\1\1\17\0\1\11\3\0\1\1\2\0\1\1\10\0"+
    "\1\11\67\0\1\1\1\0\1\11\12\0\1\1\27\0"+
    "\1\1\3\0\1\11\4\0\1\1\2\0\2\11\2\0"+
    "\2\1\1\0\1\11\1\0\1\1\16\0\1\1\26\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private boolean firstCommand = true; 
  
   private TradeParser tradeParser;
   private SectorDisplayParser sectorDisplayParser;
   private StatusParser statusParser;
   private ScanParser scanParser;
   private ComputerParser computerParser;
   private CimParser cimParser;
   private PlanetParser planetParser;
   private StreamReader streamReader;
   private ShipTypeDao shipTypeDao;
   private Logger log;
    
    
    public void setStreamReader(StreamReader sr) {
        this.streamReader = sr;
    }  
   
    public void setTradeParser(TradeParser tp) {
        tradeParser = tp;
    }
    
    public void setComputerParser(ComputerParser cp) {
        this.computerParser = cp;
    }    
    
    public void setShipTypeDao(ShipTypeDao dao) {
      this.shipTypeDao = dao;
    }
    
    public void setPlanetParser(PlanetParser pp) {
        planetParser = pp;
    }
    
    public void setCimParser(CimParser tp) {
        cimParser = tp;
    }
    
    public void setSectorDisplayParser(SectorDisplayParser sd) {
        sectorDisplayParser = sd;
    }
    
    public void setStatusParser(StatusParser sp) {
        statusParser = sp;
    }
    
    public void setScanParser(ScanParser sp) {
        scanParser = sp;
    }

    public void setFirstCommand(boolean first) {
        this.firstCommand = first;
    }    

   public void init()
   {
       log = Logger.getLogger(getClass());
       log.info("Initializing lexer debug:"+log.isDebugEnabled());
       setState(DUMMYSTATE);
   }   
   
   public void setState(int state) {
     yybegin(state);
     if (state != DUMMYSTATE) {
      setFirstCommand(false);
     } 
   }
   
   public int getState() {
    return yystate();
   } 
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TWLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TWLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { log.debug("Starting deployed fighters");
	yybegin(DEPLOYEDFTRS);
          }
        case 51: break;
        case 21: 
          { sectorDisplayParser.parsePorts(yytext());
          }
        case 52: break;
        case 48: 
          { statusParser.parseLoseExperience(yytext());
          }
        case 53: break;
        case 22: 
          { sectorDisplayParser.parseSectorNumber(yytext());
    log.debug("Starting sector display");
    yybegin(SECTORDISPLAY);
          }
        case 54: break;
        case 10: 
          { statusParser.parseInfoLine(yytext());
          }
        case 55: break;
        case 46: 
          { if (log.isDebugEnabled()) {
    log.debug("Starting computer state");
  }
  yybegin(COMPUTER);
          }
        case 56: break;
        case 43: 
          { tradeParser.parseSell(yytext());
          }
        case 57: break;
        case 26: 
          { log.debug("Ending cim");
    yybegin(YYINITIAL);
          }
        case 58: break;
        case 32: 
          { cimParser.parsePort(yytext());
          }
        case 59: break;
        case 49: 
          { tradeParser.parseCreditsAndHolds(yytext());
          }
        case 60: break;
        case 11: 
          { computerParser.parseShipEntry(yytext());
          }
        case 61: break;
        case 8: 
          { cimParser.parseCoursePlot(yytext());
    log.debug("Starting cim from course plot");
    yybegin(CIM);
          }
        case 62: break;
        case 24: 
          { sectorDisplayParser.parseNavHaz(yytext());
          }
        case 63: break;
        case 38: 
          { log.debug("At command prompt");
    
    // Initialize the session on first command prompt
    if (firstCommand) {
      if (shipTypeDao.getAll().size() == 0) {
        streamReader.write("CC?QQ".getBytes("Cp1252"));
      }  
      streamReader.write("I".getBytes("Cp1252"));
      streamReader.write("/#".getBytes("Cp1252"));
      streamReader.write("V".getBytes("Cp1252"));
      // streamReader.write("CTQ".getBytes("Cp1252"));
      firstCommand = false;
    }

    statusParser.parseCommandPrompt(yytext());
    yybegin(YYINITIAL);
          }
        case 64: break;
        case 17: 
          { tradeParser.parseReportLine(yytext());
          }
        case 65: break;
        case 13: 
          { yybegin(CIMCOURSEPLOT);
          }
        case 66: break;
        case 4: 
          { log.debug("Ending sector display");
    yybegin(YYINITIAL);
          }
        case 67: break;
        case 44: 
          { scanParser.parseSectorWarps(yytext());
          }
        case 68: break;
        case 2: 
          { String l = yytext();
    log.debug("parsing line:"+l+":"+l.length());
    if (l.length() < 5) {
        StringBuffer sb = new StringBuffer();
        for (int x=0; x<yytext().length(); x++) {
            sb.append("code "+(int)yytext().charAt(x)+":");
        }
        log.debug("code: "+sb.toString());
    }
            
    statusParser.parseCompactStatus(yytext());
          }
        case 69: break;
        case 50: 
          { // cimParser.parseComputerPlot(yytext());
    log.debug("Starting course plot");
    yybegin(COURSEPLOT);
          }
        case 70: break;
        case 34: 
          { sectorDisplayParser.parseWarps(yytext());
          }
        case 71: break;
        case 5: 
          { log.debug("Ending density scan");
	yybegin(YYINITIAL);
          }
        case 72: break;
        case 33: 
          { statusParser.parseWarpMove(yytext());
          }
        case 73: break;
        case 15: 
          { scanParser.parseDensityScan(yytext());
          }
        case 74: break;
        case 35: 
          { log.debug("Starting density scan");
	yybegin(DENSITYSCAN);
          }
        case 75: break;
        case 42: 
          { if (log.isDebugEnabled()) {
    log.debug("Starting ship catalog");
  }
  yybegin(SHIPCATALOG);
          }
        case 76: break;
        case 39: 
          { log.debug("starting ether probing");
  scanParser.parseEtherProbe(yytext());
          }
        case 77: break;
        case 12: 
          { cimParser.parseWarps(yytext());
          }
        case 78: break;
        case 27: 
          { log.debug("end ether probing");
  scanParser.endEtherProbe();
          }
        case 79: break;
        case 14: 
          { statusParser.reset();
   statusParser.parseCompactStatus(yytext());
   log.debug("Starting status report");
   yybegin(STATUS);
          }
        case 80: break;
        case 3: 
          { log.debug("Ending status report");
    yybegin(YYINITIAL);
          }
        case 81: break;
        case 25: 
          { statusParser.parseTurnsLeft(yytext());
          }
        case 82: break;
        case 7: 
          { cimParser.parseCoursePlot(yytext());
    log.debug("Ending course plot");
    yybegin(YYINITIAL);
          }
        case 83: break;
        case 40: 
          { log.debug("Starting initial state");
    yybegin(YYINITIAL);
          }
        case 84: break;
        case 47: 
          { statusParser.parseGainExperience(yytext());
          }
        case 85: break;
        case 37: 
          { statusParser.parseAutoWarpMove(yytext());
          }
        case 86: break;
        case 19: 
          { sectorDisplayParser.parseBeacon(yytext());
          }
        case 87: break;
        case 36: 
          { tradeParser.parseBusted(yytext());
          }
        case 88: break;
        case 29: 
          { tradeParser.reset();
    log.debug("Starting commerce report");
	yybegin(COMMERCEREPORT);
          }
        case 89: break;
        case 6: 
          { scanParser.parseDeployedFighters(yytext());
          }
        case 90: break;
        case 31: 
          { statusParser.parseInfoLine(yytext());
    yybegin(YYINITIAL);
          }
        case 91: break;
        case 20: 
          { sectorDisplayParser.parsePlanets(yytext());
          }
        case 92: break;
        case 9: 
          { log.debug("Starting cim");
    yybegin(CIM);
          }
        case 93: break;
        case 18: 
          { statusParser.parseStardockPrompt(yytext());
    log.debug("Starting stardock");
	yybegin(STARDOCK);
          }
        case 94: break;
        case 45: 
          { statusParser.parseChangeAlignment(yytext());
          }
        case 95: break;
        case 41: 
          { tradeParser.parseBuy(yytext());
          }
        case 96: break;
        case 28: 
          { statusParser.reset();
    statusParser.parseInfoLine(yytext());
    log.debug("Starting info report");
    yybegin(INFO);
          }
        case 97: break;
        case 16: 
          { tradeParser.parseLastDocked(yytext());
          }
        case 98: break;
        case 23: 
          { sectorDisplayParser.parseFighters(yytext());
          }
        case 99: break;
        case 1: 
          { 
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
