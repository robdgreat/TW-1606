/* The following code was generated by JFlex 1.4.3 on 10/2/11 8:58 PM */

   
package org.twdata.TW1606U.tw;
import java.io.PipedInputStream;
import org.twdata.TW1606U.tw.data.*;
import org.twdata.TW1606U.data.*;
import org.twdata.TW1606U.tw.model.*;
import org.apache.log4j.Logger;
import org.twdata.TW1606U.Lexer;
import org.twdata.TW1606U.StreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/2/11 8:58 PM from the specification file
 * <tt>TWLexer.flex</tt>
 */
public class TWLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SECTORDISPLAY = 6;
  public static final int INFO = 8;
  public static final int STATUS = 4;
  public static final int PLANETLAND = 30;
  public static final int COURSEPLOT = 18;
  public static final int CIM = 22;
  public static final int CIMCOURSEPLOT = 20;
  public static final int DENSITYSCAN = 14;
  public static final int STARDOCK = 28;
  public static final int SHIPCATALOG = 12;
  public static final int PLANETDISPLAY = 24;
  public static final int PLANETPOP = 32;
  public static final int DEPLOYEDFTRS = 16;
  public static final int DUMMYSTATE = 34;
  public static final int COMPUTER = 10;
  public static final int YYINITIAL = 0;
  public static final int PLANETPROMPT = 26;
  public static final int COMMERCEREPORT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  8,  9,  9, 10, 11, 
    12, 12, 13, 13, 14, 14, 15, 15, 16, 17,  3,  3,  3,  3,  3,  3, 
     3,  3, 18, 18
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\47\2\0\1\61\22\0\1\17\1\36\1\0\1\73\1\0"+
    "\1\101\1\0\1\2\1\56\1\60\1\36\1\0\1\4\1\40\1\5"+
    "\1\0\1\45\1\3\1\44\7\3\1\16\1\0\1\57\1\37\1\70"+
    "\1\71\1\0\1\46\1\7\1\33\1\64\1\27\1\20\1\103\1\53"+
    "\1\102\2\104\1\65\1\104\1\51\1\22\1\50\1\67\1\72\1\6"+
    "\1\41\2\104\1\43\1\104\1\100\1\104\1\74\1\0\1\75\3\0"+
    "\1\14\1\62\1\12\1\42\1\11\1\63\1\24\1\55\1\13\1\76"+
    "\1\77\1\15\1\31\1\25\1\34\1\10\1\30\1\23\1\26\1\32"+
    "\1\21\1\52\1\66\1\1\1\35\1\54\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\42\1\1\2\1\3\6\1\1\4\10\1\1\5"+
    "\1\6\1\7\1\1\1\10\7\1\4\11\1\1\72\0"+
    "\1\7\2\0\1\10\10\0\4\11\26\0\1\12\25\0"+
    "\1\13\6\0\1\14\14\0\4\11\72\0\1\7\1\10"+
    "\1\0\1\15\6\0\4\11\104\0\4\11\73\0\1\15"+
    "\1\0\1\16\4\0\4\11\4\0\1\17\67\0\1\20"+
    "\10\0\3\11\37\0\1\21\1\0\1\22\33\0\1\15"+
    "\3\0\2\11\43\0\1\22\34\0\1\11\27\0\1\23"+
    "\7\0\2\22\7\0\1\23\2\0\1\24\3\0\1\25"+
    "\1\26\13\0\1\27\3\0\1\30\32\0\2\22\13\0"+
    "\1\31\1\0\1\32\46\0\2\22\26\0\1\33\31\0"+
    "\1\33\1\0\2\22\21\0\1\34\34\0\2\22\46\0"+
    "\1\35\7\0\2\22\33\0\1\36\20\0\1\22\22\0"+
    "\1\37\2\0\1\40\22\0\1\22\12\0\1\41\4\0"+
    "\1\42\55\0\1\43\66\0\1\44\25\0\1\45\40\0"+
    "\1\46\40\0\1\47\35\0\1\50\1\0\1\47\1\51"+
    "\24\0\1\52\7\0\1\53\5\0\1\52\12\0\1\54"+
    "\17\0\1\52\22\0\1\55\5\0\2\52\27\0\2\52"+
    "\21\0\1\56\5\0\2\52\3\0\1\57\1\56\1\0"+
    "\1\60\16\0\2\52\2\0\1\61\14\0\1\62\2\0"+
    "\2\52\20\0\2\52\3\0\1\63\3\0\1\64\10\0"+
    "\1\52\1\0\1\64\2\0\1\65\1\66\7\0\1\65"+
    "\1\52\1\66\1\0\1\67\3\0\1\70\1\0\1\71"+
    "\1\67\40\0\1\72\40\0\1\73\26\0\1\74\7\0"+
    "\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[1604];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u051f\0\u0e8e"+
    "\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u051f\0\u102c\0\u1071"+
    "\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u051f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u0a83\0\u0b52\0\u1c92"+
    "\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u102c\0\u223b\0\u2280\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u12de"+
    "\0\u24ed\0\u2532\0\u1368\0\u2577\0\u25bc\0\u2601\0\u2646\0\u13f2"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u051f"+
    "\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519"+
    "\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741"+
    "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91"+
    "\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1"+
    "\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209"+
    "\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431"+
    "\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659"+
    "\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881"+
    "\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9"+
    "\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1"+
    "\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9"+
    "\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121"+
    "\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349"+
    "\0\u538e\0\u53d3\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571"+
    "\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799"+
    "\0\u57de\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1"+
    "\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11"+
    "\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u6039"+
    "\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7\0\u621c\0\u6261"+
    "\0\u62a6\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u6489"+
    "\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u6627\0\u666c\0\u66b1"+
    "\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9"+
    "\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u6a77\0\u6abc\0\u6b01"+
    "\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29"+
    "\0\u6d6e\0\u6db3\0\u6df8\0\u6e3d\0\u6e82\0\u6ec7\0\u6f0c\0\u6f51"+
    "\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa\0\u70ef\0\u7134\0\u7179"+
    "\0\u71be\0\u7203\0\u7248\0\u728d\0\u72d2\0\u7317\0\u735c\0\u73a1"+
    "\0\u73e6\0\u742b\0\u7470\0\u74b5\0\u74fa\0\u753f\0\u7584\0\u75c9"+
    "\0\u760e\0\u7653\0\u7698\0\u76dd\0\u7722\0\u7767\0\u77ac\0\u77f1"+
    "\0\u7836\0\u787b\0\u78c0\0\u7905\0\u794a\0\u798f\0\u79d4\0\u7a19"+
    "\0\u7a5e\0\u7aa3\0\u7ae8\0\u7b2d\0\u7b72\0\u7bb7\0\u7bfc\0\u7c41"+
    "\0\u7c86\0\u7ccb\0\u7d10\0\u7d55\0\u7d9a\0\u7ddf\0\u7e24\0\u7e69"+
    "\0\u7eae\0\u7ef3\0\u7f38\0\u7f7d\0\u7fc2\0\u8007\0\u804c\0\u8091"+
    "\0\u80d6\0\u811b\0\u8160\0\u81a5\0\u81ea\0\u822f\0\u8274\0\u82b9"+
    "\0\u82fe\0\u8343\0\u8388\0\u83cd\0\u8412\0\u8457\0\u849c\0\u84e1"+
    "\0\u8526\0\u856b\0\u85b0\0\u85f5\0\u863a\0\u867f\0\u86c4\0\u8709"+
    "\0\u874e\0\u8793\0\u87d8\0\u881d\0\u8862\0\u88a7\0\u88ec\0\u8931"+
    "\0\u8976\0\u89bb\0\u8a00\0\u8a45\0\u8a8a\0\u8acf\0\u8b14\0\u8b59"+
    "\0\u8b9e\0\u8be3\0\u8c28\0\u8c6d\0\u8cb2\0\u8cf7\0\u8d3c\0\u8d81"+
    "\0\u8dc6\0\u8e0b\0\u8e50\0\u8e95\0\u8eda\0\u8f1f\0\u8f64\0\u8fa9"+
    "\0\u8fee\0\u9033\0\u9078\0\u90bd\0\u9102\0\u9147\0\u918c\0\u91d1"+
    "\0\u9216\0\u925b\0\u92a0\0\u92e5\0\u932a\0\u936f\0\u93b4\0\u93f9"+
    "\0\u943e\0\u9483\0\u94c8\0\u950d\0\u9552\0\u9597\0\u95dc\0\u9621"+
    "\0\u9666\0\u96ab\0\u96f0\0\u9735\0\u977a\0\u97bf\0\u9804\0\u9849"+
    "\0\u988e\0\u98d3\0\u9918\0\u995d\0\u99a2\0\u99e7\0\u9a2c\0\u9a71"+
    "\0\u9ab6\0\u9afb\0\u9b40\0\u9b85\0\u9bca\0\u9c0f\0\u9c54\0\u9c99"+
    "\0\u9cde\0\u9d23\0\u9d68\0\u9dad\0\u9df2\0\u9e37\0\u9e7c\0\u9ec1"+
    "\0\u9f06\0\u9f4b\0\u9f90\0\u9fd5\0\ua01a\0\ua05f\0\ua0a4\0\ua0e9"+
    "\0\ua12e\0\ua173\0\ua1b8\0\ua1fd\0\ua242\0\ua287\0\ua2cc\0\ua311"+
    "\0\ua356\0\ua39b\0\ua3e0\0\ua425\0\ua46a\0\ua4af\0\ua4f4\0\ua539"+
    "\0\ua57e\0\ua5c3\0\ua608\0\ua64d\0\ua692\0\ua6d7\0\ua71c\0\ua761"+
    "\0\ua7a6\0\ua7eb\0\ua830\0\ua875\0\ua8ba\0\ua8ff\0\ua944\0\ua989"+
    "\0\ua9ce\0\uaa13\0\uaa58\0\uaa9d\0\uaae2\0\uab27\0\uab6c\0\uabb1"+
    "\0\uabf6\0\uac3b\0\uac80\0\uacc5\0\uad0a\0\uad4f\0\uad94\0\uadd9"+
    "\0\uae1e\0\uae63\0\uaea8\0\uaeed\0\uaf32\0\uaf77\0\uafbc\0\ub001"+
    "\0\ub046\0\ub08b\0\ub0d0\0\ub115\0\ub15a\0\ub19f\0\u051f\0\ub1e4"+
    "\0\ub229\0\ub26e\0\ub2b3\0\ub2f8\0\ub33d\0\ub382\0\ub3c7\0\ub40c"+
    "\0\ub451\0\ub496\0\ub4db\0\ub520\0\ub565\0\ub5aa\0\ub5ef\0\u0a83"+
    "\0\ub634\0\ub679\0\ub6be\0\ub703\0\ub748\0\ub78d\0\ub7d2\0\ub817"+
    "\0\ub85c\0\ub8a1\0\ub8e6\0\ub92b\0\ub970\0\ub9b5\0\ub9fa\0\uba3f"+
    "\0\uba84\0\ubac9\0\ubb0e\0\ubb53\0\ubb98\0\ubbdd\0\ubc22\0\ubc67"+
    "\0\ubcac\0\ubcf1\0\ubd36\0\ubd7b\0\ubdc0\0\ube05\0\ube4a\0\ube8f"+
    "\0\ubed4\0\ubf19\0\ubf5e\0\ubfa3\0\ubfe8\0\uc02d\0\uc072\0\uc0b7"+
    "\0\uc0fc\0\uc141\0\uc186\0\uc1cb\0\uc210\0\uc255\0\uc29a\0\uc2df"+
    "\0\uc324\0\uc369\0\uc3ae\0\uc3f3\0\uc438\0\uc47d\0\uc4c2\0\uc507"+
    "\0\uc54c\0\uc591\0\uc5d6\0\uc61b\0\uc660\0\uc6a5\0\uc6ea\0\uc72f"+
    "\0\uc774\0\uc7b9\0\uc7fe\0\uc843\0\uc888\0\uc8cd\0\uc912\0\uc957"+
    "\0\uc99c\0\uc9e1\0\uca26\0\uca6b\0\ucab0\0\ucaf5\0\ucb3a\0\ucb7f"+
    "\0\ucbc4\0\ucc09\0\ucc4e\0\ucc93\0\uccd8\0\ucd1d\0\ucd62\0\ucda7"+
    "\0\ucdec\0\uce31\0\uce76\0\ucebb\0\ucf00\0\ucf45\0\ucf8a\0\ucfcf"+
    "\0\ud014\0\ud059\0\ud09e\0\ud0e3\0\ud128\0\ud16d\0\ud1b2\0\ud1f7"+
    "\0\ud23c\0\ud281\0\ud2c6\0\ud30b\0\ud350\0\ud395\0\ud3da\0\ud41f"+
    "\0\ud464\0\ud4a9\0\ud4ee\0\ud533\0\ud578\0\ud5bd\0\ud602\0\ud647"+
    "\0\ud68c\0\ud6d1\0\ud716\0\ud75b\0\ud7a0\0\ud7e5\0\ud82a\0\ud86f"+
    "\0\u051f\0\ud8b4\0\ud8f9\0\ud93e\0\ud983\0\ud9c8\0\uda0d\0\uda52"+
    "\0\uda97\0\udadc\0\udb21\0\udb66\0\udbab\0\udbf0\0\udc35\0\udc7a"+
    "\0\udcbf\0\udd04\0\udd49\0\udd8e\0\uddd3\0\ude18\0\ude5d\0\udea2"+
    "\0\udee7\0\udf2c\0\u0a83\0\udf71\0\udfb6\0\udffb\0\ue040\0\ue085"+
    "\0\ue0ca\0\ue10f\0\ue154\0\ue199\0\ue1de\0\ue223\0\ue268\0\ue2ad"+
    "\0\ue2f2\0\ue337\0\ue37c\0\ue3c1\0\ue406\0\ue44b\0\ue490\0\u051f"+
    "\0\ue4d5\0\ue51a\0\ue55f\0\ue5a4\0\ue5e9\0\ue62e\0\ue673\0\ue6b8"+
    "\0\ue6fd\0\ue742\0\ue787\0\ue7cc\0\ue811\0\ue856\0\ue89b\0\ue8e0"+
    "\0\ue925\0\ue96a\0\ue9af\0\ue9f4\0\uea39\0\uea7e\0\ueac3\0\ueb08"+
    "\0\ueb4d\0\ueb92\0\uebd7\0\uec1c\0\uec61\0\ueca6\0\ueceb\0\ued30"+
    "\0\ued75\0\uedba\0\uedff\0\uee44\0\uee89\0\ueece\0\uef13\0\uef58"+
    "\0\uef9d\0\uefe2\0\uf027\0\uf06c\0\uf0b1\0\uf0f6\0\uf13b\0\uf180"+
    "\0\uf1c5\0\uf20a\0\uf24f\0\uf294\0\uf2d9\0\uf31e\0\uf363\0\uf3a8"+
    "\0\uf3ed\0\uf432\0\uf477\0\uf4bc\0\uf501\0\uf546\0\uf58b\0\uf5d0"+
    "\0\uf615\0\uf65a\0\uf69f\0\uf6e4\0\u051f\0\uf729\0\uf76e\0\uf7b3"+
    "\0\uf7f8\0\uf83d\0\uf882\0\uf8c7\0\uf90c\0\uf951\0\uf996\0\uf9db"+
    "\0\ufa20\0\ufa65\0\ufaaa\0\ufaef\0\ufb34\0\ufb79\0\ufbbe\0\ufc03"+
    "\0\ufc48\0\ufc8d\0\ufcd2\0\ufd17\0\ufd5c\0\ufda1\0\ufde6\0\ufe2b"+
    "\0\ufe70\0\ufeb5\0\ufefa\0\uff3f\0\uff84\0\uffc9\1\16\1\123"+
    "\1\230\1\335\1\u0122\1\u0167\1\u01ac\1\u01f1\1\u0236\1\u027b"+
    "\1\u02c0\1\u0305\1\u034a\1\u038f\1\u03d4\1\u0419\1\u045e\1\u04a3"+
    "\1\u04e8\1\u052d\1\u0572\1\u05b7\1\u05fc\1\u0641\1\u0686\1\u06cb"+
    "\1\u0710\1\u0755\1\u079a\1\u07df\1\u0824\1\u0869\1\u08ae\1\u08f3"+
    "\1\u0938\1\u097d\1\u09c2\1\u0a07\1\u0a4c\0\u051f\1\u0a91\1\u0ad6"+
    "\0\u051f\1\u0b1b\1\u0b60\1\u0ba5\1\u0bea\1\u0c2f\1\u0c74\1\u0cb9"+
    "\1\u0cfe\1\u0d43\1\u0d88\1\u0dcd\1\u0e12\1\u0e57\1\u0e9c\1\u0ee1"+
    "\1\u0f26\1\u0f6b\1\u0fb0\1\u0ff5\1\u103a\1\u107f\1\u10c4\1\u1109"+
    "\1\u114e\1\u1193\1\u11d8\1\u121d\1\u1262\1\u12a7\1\u12ec\1\u1331"+
    "\1\u1376\1\u13bb\1\u1400\0\u051f\1\u1445\1\u148a\1\u14cf\1\u1514"+
    "\1\u1559\1\u159e\1\u15e3\1\u1628\1\u166d\1\u16b2\1\u16f7\1\u173c"+
    "\1\u1781\1\u17c6\1\u180b\1\u1850\1\u1895\1\u18da\1\u191f\1\u1964"+
    "\1\u19a9\1\u19ee\1\u1a33\1\u1a78\1\u1abd\1\u1b02\1\u1b47\1\u1b8c"+
    "\1\u1bd1\1\u1c16\1\u1c5b\1\u1ca0\1\u1ce5\1\u1d2a\1\u1d6f\1\u1db4"+
    "\1\u1df9\1\u1e3e\1\u1e83\1\u1ec8\1\u1f0d\1\u1f52\1\u1f97\1\u1fdc"+
    "\1\u2021\1\u2066\1\u20ab\1\u20f0\1\u2135\1\u217a\1\u21bf\1\u2204"+
    "\1\u2249\1\u228e\1\u22d3\1\u2318\1\u235d\1\u23a2\1\u23e7\1\u242c"+
    "\1\u2471\1\u24b6\1\u24fb\1\u2540\1\u2585\1\u25ca\1\u260f\1\u2654"+
    "\1\u2699\1\u26de\1\u2723\1\u2768\1\u27ad\1\u27f2\1\u2837\1\u287c"+
    "\1\u28c1\1\u2906\1\u294b\1\u2990\1\u29d5\1\u2a1a\1\u2a5f\1\u2aa4"+
    "\1\u2ae9\1\u2b2e\1\u2b73\1\u2bb8\1\u2bfd\1\u2c42\1\u2c87\1\u2ccc"+
    "\1\u2d11\1\u2d56\1\u2d9b\1\u2de0\1\u2e25\1\u2e6a\1\u2eaf\1\u2ef4"+
    "\1\u2f39\1\u2f7e\1\u2fc3\1\u3008\1\u304d\1\u3092\1\u30d7\1\u311c"+
    "\1\u3161\1\u31a6\1\u31eb\1\u3230\1\u3275\1\u32ba\1\u32ff\1\u3344"+
    "\1\u3389\1\u33ce\1\u3413\1\u3458\1\u349d\1\u34e2\0\u051f\1\u3527"+
    "\1\u356c\1\u35b1\1\u35f6\1\u363b\1\u3680\1\u36c5\1\u370a\1\u374f"+
    "\1\u3794\1\u37d9\1\u381e\1\u3863\1\u38a8\1\u38ed\1\u3932\1\u3977"+
    "\1\u39bc\1\u3a01\1\u3a46\1\u3a8b\1\u3ad0\1\u3b15\1\u3b5a\1\u3b9f"+
    "\1\u3be4\1\u3c29\1\u3c6e\1\u3cb3\1\u3cf8\1\u3d3d\1\u3d82\0\u051f"+
    "\1\u3dc7\1\u3e0c\1\u3e51\1\u3e96\1\u3edb\1\u3f20\1\u3f65\1\u3faa"+
    "\1\u3fef\1\u4034\1\u4079\1\u40be\1\u4103\1\u4148\1\u418d\1\u41d2"+
    "\1\u4217\1\u425c\1\u42a1\1\u42e6\1\u432b\1\u4370\1\u43b5\1\u43fa"+
    "\1\u443f\1\u4484\1\u44c9\1\u450e\1\u4553\1\u4598\1\u45dd\1\u4622"+
    "\1\u4667\1\u46ac\1\u46f1\1\u4736\1\u477b\1\u47c0\1\u4805\1\u484a"+
    "\1\u488f\1\u48d4\1\u4919\1\u495e\1\u49a3\1\u49e8\1\u4a2d\1\u4a72"+
    "\1\u4ab7\1\u4afc\1\u4b41\1\u4b86\1\u4bcb\1\u4c10\1\u4c55\1\u4c9a"+
    "\1\u4cdf\1\u4d24\1\u4d69\1\u4dae\1\u4df3\1\u4e38\1\u4e7d\1\u4ec2"+
    "\1\u4f07\1\u4667\1\u4f4c\1\u4f91\1\u4fd6\1\u501b\1\u5060\1\u50a5"+
    "\1\u50ea\1\u512f\1\u5174\1\u51b9\1\u51fe\1\u5243\1\u5288\1\u52cd"+
    "\1\u5312\1\u5357\1\u539c\1\u53e1\1\u5426\1\u546b\1\u54b0\1\u54f5"+
    "\1\u553a\1\u557f\1\u55c4\1\u5609\1\u564e\1\u5693\1\u56d8\1\u571d"+
    "\1\u5762\1\u57a7\1\u57ec\1\u5831\1\u5876\1\u58bb\1\u5900\1\u5945"+
    "\1\u598a\1\u59cf\1\u5a14\1\u5a59\1\u5a9e\1\u5ae3\1\u5b28\0\u051f"+
    "\1\u5b6d\1\u5bb2\1\u5bf7\1\u5c3c\1\u5c81\1\u5cc6\1\u5d0b\1\u5d50"+
    "\1\u5d95\1\u5dda\1\u5e1f\1\u5e64\1\u5ea9\1\u5eee\1\u5f33\1\u5f78"+
    "\1\u5fbd\1\u6002\1\u6047\1\u608c\1\u60d1\1\u6116\1\u615b\1\u61a0"+
    "\1\u61e5\1\u622a\1\u626f\1\u62b4\1\u62f9\1\u633e\1\u6383\1\u63c8"+
    "\1\u640d\1\u6452\1\u6497\1\u64dc\1\u6521\1\u6566\1\u65ab\1\u65f0"+
    "\1\u6635\1\u667a\1\u66bf\1\u6704\1\u6749\1\u678e\1\u67d3\1\u6818"+
    "\1\u6497\1\u685d\1\u68a2\1\u68e7\1\u692c\1\u6971\1\u69b6\1\u69fb"+
    "\1\u6a40\1\u6a85\1\u6aca\1\u6b0f\1\u6b54\1\u6b99\1\u6bde\1\u6c23"+
    "\1\u6c68\1\u6cad\1\u6cf2\1\u6d37\1\u6d7c\1\u6dc1\1\u6e06\1\u6e4b"+
    "\1\u6e90\1\u6ed5\1\u6f1a\1\u6f5f\1\u6fa4\1\u6fe9\1\u702e\1\u7073"+
    "\1\u70b8\1\u70fd\1\u7142\1\u7187\0\u051f\1\u71cc\1\u7211\1\u7256"+
    "\1\u729b\1\u72e0\1\u7325\1\u736a\1\u73af\1\u73f4\1\u7439\0\u0a83"+
    "\0\u0a83\1\u747e\0\u051f\1\u74c3\1\u7508\1\u754d\1\u7592\1\u75d7"+
    "\1\u761c\1\u7661\1\u76a6\1\u76eb\1\u7730\1\u7775\1\u77ba\1\u77ff"+
    "\1\u7844\1\u7889\1\u78ce\1\u7913\1\u7958\0\u0a83\1\u799d\1\u79e2"+
    "\1\u7a27\1\u7a6c\1\u7ab1\1\u7af6\1\u7b3b\1\u7b80\1\u7bc5\1\u7c0a"+
    "\1\u7c4f\1\u7c94\0\u051f\1\u7cd9\1\u7d1e\1\u7d63\1\u7da8\1\u7ded"+
    "\1\u7e32\1\u7e77\1\u7ebc\1\u7f01\1\u7f46\1\u7f8b\1\u7fd0\1\u8015"+
    "\1\u805a\1\u809f\1\u80e4\1\u8129\1\u816e\1\u81b3\1\u81f8\1\u823d"+
    "\1\u8282\1\u82c7\1\u830c\1\u8351\1\u8396\1\u83db\1\u8420\1\u8465"+
    "\0\u051f\1\u84aa\1\u84ef\1\u8534\1\u8579\1\u85be\1\u8603\1\u8648"+
    "\1\u868d\1\u86d2\1\u8717\0\u0a83\1\u875c\1\u87a1\0\u051f\0\u051f"+
    "\1\u87e6\1\u882b\1\u8870\1\u88b5\1\u88fa\1\u893f\1\u8984\0\u0a83"+
    "\1\u89c9\0\u0a83\1\u8a0e\0\u051f\1\u8a53\1\u8a98\1\u8add\0\u051f"+
    "\1\u8b22\0\u051f\0\u0a83\1\u8b67\1\u8bac\1\u8bf1\1\u8c36\1\u8c7b"+
    "\1\u8cc0\1\u8d05\1\u8d4a\1\u8d8f\1\u8dd4\1\u8e19\1\u8e5e\1\u8ea3"+
    "\1\u8ee8\1\u8f2d\1\u8f72\1\u8fb7\1\u8ffc\1\u9041\1\u9086\1\u90cb"+
    "\1\u9110\1\u9155\1\u919a\1\u91df\1\u9224\1\u9269\1\u92ae\1\u92f3"+
    "\1\u9338\1\u937d\1\u93c2\0\u0a83\1\u9407\1\u944c\1\u9491\1\u94d6"+
    "\1\u951b\1\u9560\1\u95a5\1\u95ea\1\u962f\1\u9674\1\u96b9\1\u96fe"+
    "\1\u9743\1\u9788\1\u97cd\1\u9812\1\u9857\1\u989c\1\u98e1\1\u9926"+
    "\1\u996b\1\u99b0\1\u99f5\1\u9a3a\1\u9a7f\1\u9ac4\1\u9b09\1\u9b4e"+
    "\1\u9b93\1\u9bd8\1\u9c1d\1\u9c62\0\u051f\1\u9ca7\1\u9cec\1\u9d31"+
    "\1\u9d76\1\u9dbb\1\u9e00\1\u9e45\1\u9e8a\1\u9ecf\1\u9f14\1\u9f59"+
    "\1\u9f9e\1\u9fe3\1\ua028\1\ua06d\1\ua0b2\1\ua0f7\1\ua13c\1\ua181"+
    "\1\ua1c6\1\ua20b\1\ua250\0\u051f\1\ua295\1\ua2da\1\ua31f\1\ua364"+
    "\1\ua3a9\1\ua3ee\1\ua433\0\u051f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1604];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\24\1\25\1\24\1\26\5\24\1\27\2\24\1\30"+
    "\11\24\1\31\1\24\1\32\1\33\1\34\3\24\1\35"+
    "\1\24\1\36\2\24\1\37\1\24\1\40\6\24\1\41"+
    "\3\24\1\42\1\43\1\44\4\24\1\45\5\24\1\46"+
    "\10\24\1\25\1\24\1\26\5\24\1\27\1\24\1\47"+
    "\1\30\11\24\1\31\1\24\1\32\1\33\1\34\3\24"+
    "\1\35\1\24\1\36\2\24\1\37\1\24\1\40\6\24"+
    "\1\41\3\24\1\42\1\43\1\44\4\24\1\45\5\24"+
    "\1\46\4\24\4\50\1\51\7\50\1\52\2\50\1\53"+
    "\1\54\1\50\1\55\4\50\1\56\3\50\1\57\1\50"+
    "\1\60\5\50\1\61\3\50\1\24\1\62\6\50\1\63"+
    "\20\50\1\64\4\50\4\24\1\25\7\24\1\27\16\24"+
    "\1\32\1\24\1\34\12\24\1\65\6\24\1\41\31\24"+
    "\1\25\7\24\1\27\2\24\1\66\13\24\1\32\1\24"+
    "\1\34\12\24\1\65\6\24\1\41\1\24\1\67\27\24"+
    "\1\25\2\24\1\70\4\24\1\27\2\24\1\71\1\72"+
    "\12\24\1\32\1\24\1\34\5\24\1\73\4\24\1\74"+
    "\1\75\5\24\1\41\31\24\1\25\2\24\1\70\4\24"+
    "\1\27\2\24\1\71\1\72\12\24\1\32\1\24\1\34"+
    "\5\24\1\73\4\24\1\74\1\75\5\24\1\41\1\24"+
    "\1\76\24\24\1\77\2\24\1\25\1\24\6\77\1\100"+
    "\1\77\1\24\14\77\1\101\1\77\1\102\3\24\3\77"+
    "\2\24\1\77\1\24\1\103\5\77\1\24\1\41\2\24"+
    "\6\77\2\24\1\77\3\24\3\77\1\24\3\77\4\24"+
    "\1\25\7\24\1\27\16\24\1\32\1\24\1\34\5\24"+
    "\1\104\4\24\1\65\6\24\1\41\31\24\1\25\7\24"+
    "\1\27\16\24\1\32\1\24\1\34\12\24\1\65\6\24"+
    "\1\105\31\24\1\25\1\24\1\106\5\24\1\27\16\24"+
    "\1\32\1\24\1\34\12\24\1\65\6\24\1\41\31\24"+
    "\1\25\1\24\1\106\5\24\1\27\16\24\1\32\1\24"+
    "\1\34\11\24\1\107\1\65\6\24\1\41\30\24\1\110"+
    "\1\25\7\24\1\27\16\24\1\32\1\24\1\34\6\24"+
    "\2\110\2\24\1\65\6\24\1\41\30\24\1\111\1\25"+
    "\7\24\1\27\16\24\1\32\1\24\1\34\6\24\2\111"+
    "\2\24\1\65\5\24\1\112\1\41\30\24\1\113\1\25"+
    "\7\24\1\27\16\24\1\32\1\24\1\34\6\24\2\113"+
    "\2\24\1\65\5\24\1\114\1\41\31\24\1\25\7\24"+
    "\1\27\1\24\1\115\1\116\13\24\1\32\1\24\1\34"+
    "\3\24\1\117\6\24\1\65\6\24\1\41\31\24\1\25"+
    "\7\24\1\27\3\24\1\120\1\24\1\121\4\24\1\122"+
    "\3\24\1\32\1\24\1\34\12\24\1\65\6\24\1\41"+
    "\31\24\1\25\1\24\2\123\4\24\1\27\3\24\1\124"+
    "\1\24\1\125\4\24\1\126\3\24\1\123\1\24\1\34"+
    "\3\24\1\123\1\24\1\123\2\24\1\123\1\24\2\123"+
    "\1\24\1\123\3\24\1\41\4\24\2\123\1\24\1\123"+
    "\2\24\1\123\5\24\1\123\1\24\3\123\4\24\1\25"+
    "\7\24\1\27\16\24\1\32\1\24\1\34\1\24\1\127"+
    "\10\24\1\65\6\24\1\41\25\24\124\0\1\130\76\0"+
    "\1\131\120\0\1\132\65\0\1\133\107\0\1\134\127\0"+
    "\1\135\105\0\1\136\103\0\1\137\73\0\1\140\31\0"+
    "\1\141\43\0\1\142\105\0\1\143\3\0\1\144\100\0"+
    "\1\145\5\0\1\146\67\0\1\147\111\0\1\150\125\0"+
    "\1\151\64\0\1\152\101\0\1\153\127\0\1\154\67\0"+
    "\1\155\65\0\17\156\1\157\27\156\1\0\54\156\1\160"+
    "\27\156\1\0\54\156\1\157\5\156\1\161\21\156\1\0"+
    "\54\156\1\157\22\156\1\162\4\156\1\0\26\156\1\163"+
    "\25\156\1\157\1\156\1\164\25\156\1\0\54\156\1\157"+
    "\3\156\1\165\23\156\1\0\54\156\1\157\10\156\1\166"+
    "\16\156\1\0\54\156\1\157\14\156\1\167\12\156\1\0"+
    "\54\156\1\157\14\156\1\170\12\156\1\0\46\156\1\171"+
    "\5\156\1\157\27\156\1\0\52\156\1\172\1\156\1\157"+
    "\27\156\1\0\43\156\1\173\10\156\1\157\27\156\1\0"+
    "\54\156\1\157\14\156\1\174\12\156\1\0\35\156\15\0"+
    "\1\175\67\0\47\66\1\0\35\66\11\0\1\176\112\0"+
    "\1\177\100\0\1\200\105\0\1\201\105\0\1\202\16\0"+
    "\1\203\64\0\1\204\71\0\1\205\4\0\10\205\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\6\205\1\207\10\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\4\205\1\210\10\205\1\211"+
    "\1\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\15\205\1\212\1\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\7\205\1\213\1\206\17\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\55\0\1\214\35\0"+
    "\1\215\1\216\10\0\1\216\1\0\1\216\4\0\1\216"+
    "\3\0\1\216\5\0\1\216\1\0\1\216\2\0\1\216"+
    "\1\0\2\216\1\0\1\216\10\0\2\216\4\0\1\216"+
    "\5\0\1\216\1\0\3\216\11\0\1\217\73\0\47\110"+
    "\1\0\35\110\3\0\1\111\1\220\12\0\1\221\24\0"+
    "\2\111\10\0\1\220\1\0\1\222\27\0\1\111\40\0"+
    "\2\111\42\0\1\113\1\223\12\0\1\224\24\0\2\113"+
    "\10\0\1\223\1\0\1\225\27\0\1\113\40\0\2\113"+
    "\56\0\1\226\70\0\1\227\13\0\1\230\24\0\2\227"+
    "\61\0\1\231\75\0\1\232\5\0\1\233\106\0\1\234"+
    "\111\0\1\235\54\0\47\123\1\0\50\123\1\236\5\123"+
    "\1\237\25\123\1\0\60\123\1\240\23\123\1\0\65\123"+
    "\1\241\16\123\1\0\35\123\37\0\1\242\50\0\1\243"+
    "\40\0\2\243\51\0\1\244\134\0\1\245\53\0\1\246"+
    "\116\0\1\247\112\0\1\250\64\0\1\251\114\0\1\252"+
    "\77\0\1\253\101\0\1\254\116\0\1\255\76\0\1\256"+
    "\121\0\1\257\66\0\1\260\124\0\1\261\102\0\1\262"+
    "\77\0\1\263\76\0\1\264\112\0\1\265\74\0\1\266"+
    "\110\0\1\267\144\0\1\270\23\0\3\156\1\271\13\156"+
    "\1\157\22\156\1\162\1\156\2\271\1\156\1\0\26\156"+
    "\1\163\25\156\1\157\22\156\1\272\4\156\1\0\54\156"+
    "\1\157\14\156\1\273\12\156\1\0\54\156\1\157\1\156"+
    "\1\274\25\156\1\0\46\156\1\275\5\156\1\157\27\156"+
    "\1\0\54\156\1\157\4\156\1\276\22\156\1\0\54\156"+
    "\1\157\1\156\1\277\25\156\1\0\54\156\1\157\11\156"+
    "\1\300\15\156\1\0\54\156\1\157\1\156\1\301\25\156"+
    "\1\0\37\156\1\302\14\156\1\157\27\156\1\0\51\156"+
    "\1\303\2\156\1\157\27\156\1\0\54\156\1\157\12\156"+
    "\1\304\14\156\1\0\54\156\1\157\1\156\1\305\25\156"+
    "\1\0\35\156\14\0\1\306\104\0\1\307\107\0\1\310"+
    "\111\0\1\311\103\0\1\312\75\0\1\313\113\0\1\314"+
    "\133\0\1\315\51\0\1\316\66\0\1\205\4\0\10\205"+
    "\1\206\17\205\3\0\1\205\1\317\1\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\3\205\1\320"+
    "\4\205\1\206\17\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\10\205\1\206\12\205"+
    "\1\321\4\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\10\205\1\206\2\205\1\322"+
    "\14\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\6\205\1\323\1\205\1\206\17\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\13\0"+
    "\1\324\123\0\1\262\35\0\1\325\104\0\1\325\26\0"+
    "\1\326\162\0\1\327\17\0\1\111\13\0\1\221\24\0"+
    "\2\111\10\0\1\220\116\0\1\330\17\0\1\113\13\0"+
    "\1\224\24\0\2\113\10\0\1\223\55\0\1\331\60\0"+
    "\1\227\1\332\12\0\1\333\20\0\1\334\3\0\2\227"+
    "\56\0\1\335\111\0\1\336\71\0\1\337\117\0\1\340"+
    "\101\0\1\341\63\0\24\123\1\342\22\123\1\0\46\123"+
    "\1\343\35\123\1\0\61\123\1\344\22\123\1\0\56\123"+
    "\1\345\25\123\1\0\35\123\40\0\1\346\47\0\1\243"+
    "\1\130\12\0\1\347\24\0\2\243\71\0\1\350\71\0"+
    "\1\351\77\0\1\352\104\0\1\353\102\0\1\354\20\0"+
    "\1\355\115\0\1\356\61\0\1\357\3\0\1\360\123\0"+
    "\1\361\61\0\1\362\3\0\1\363\71\0\1\364\113\0"+
    "\1\365\121\0\1\366\75\0\1\367\141\0\1\370\36\0"+
    "\1\371\101\0\1\372\130\0\1\373\111\0\1\374\56\0"+
    "\1\375\113\0\1\376\61\0\3\156\1\271\1\377\12\156"+
    "\1\u0100\24\156\2\271\1\156\1\0\54\156\1\u0101\27\156"+
    "\1\0\47\156\1\u0102\4\156\1\157\27\156\1\0\54\156"+
    "\1\157\6\156\1\u0103\20\156\1\0\52\156\1\u0104\1\156"+
    "\1\157\27\156\1\0\51\156\1\u0105\2\156\1\157\27\156"+
    "\1\0\50\156\1\u0106\3\156\1\157\27\156\1\0\45\156"+
    "\1\u0107\6\156\1\157\11\156\1\u0108\15\156\1\0\54\156"+
    "\1\u0109\3\156\1\u010a\23\156\1\0\52\156\1\u010b\1\156"+
    "\1\157\27\156\1\0\54\156\1\157\5\156\1\u010c\21\156"+
    "\1\0\51\156\1\u010d\2\156\1\157\27\156\1\0\54\156"+
    "\1\u010e\27\156\1\0\35\156\25\0\1\u010f\71\0\1\u0110"+
    "\111\0\1\u0111\142\0\1\u0112\37\0\1\u0113\121\0\1\u0114"+
    "\111\0\1\u0115\125\0\1\u0116\31\0\47\316\1\0\35\316"+
    "\1\0\1\205\4\0\10\205\1\206\1\u0117\16\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\17\205\3\0\1\205\1\u0118\1\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\2\205\1\u0119\5\205\1\206\12\205\1\u011a\4\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\1\u011b\3\205\1\u011c\12\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\6\205\1\u011d\10\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\12\0\1\u011e\72\0"+
    "\47\325\1\0\35\325\32\0\1\u011f\71\0\1\u0120\104\0"+
    "\1\u0121\136\0\1\u0122\36\0\1\227\40\0\2\227\42\0"+
    "\1\u0123\13\0\1\333\20\0\1\334\3\0\2\u0123\42\0"+
    "\1\u0124\13\0\1\334\20\0\1\334\3\0\2\u0124\127\0"+
    "\1\u0125\71\0\1\u0126\44\0\1\u0127\103\0\1\u0128\103\0"+
    "\1\u0129\71\0\47\123\1\0\5\123\1\u012a\44\123\1\u012b"+
    "\31\123\1\0\51\123\1\u012c\32\123\1\0\50\123\1\u012d"+
    "\33\123\1\0\35\123\40\0\1\u012e\76\0\1\u012f\106\0"+
    "\1\u0130\105\0\1\u0131\101\0\1\u0132\63\0\1\u0133\114\0"+
    "\1\u0134\77\0\1\u0135\107\0\1\u0136\110\0\1\u0137\100\0"+
    "\1\u0138\76\0\1\u0139\121\0\1\u013a\4\0\1\u013b\62\0"+
    "\1\u013c\106\0\1\u013d\77\0\1\u013e\115\0\1\u013f\76\0"+
    "\1\u0140\104\0\1\u0141\116\0\1\u0142\107\0\1\u0143\112\0"+
    "\1\u0144\67\0\1\u0145\117\0\1\u0146\71\0\1\u0147\65\0"+
    "\3\156\1\271\13\156\1\157\24\156\2\271\1\156\1\0"+
    "\54\156\1\157\12\156\1\u0148\7\156\1\162\4\156\1\0"+
    "\26\156\1\163\25\156\1\157\15\156\1\u0149\4\156\1\162"+
    "\4\156\1\0\26\156\1\163\25\156\1\157\27\156\1\0"+
    "\27\156\1\u014a\24\156\1\157\12\156\1\u014b\14\156\1\0"+
    "\54\156\1\u014c\27\156\1\0\54\156\1\157\5\156\1\u014d"+
    "\21\156\1\0\45\156\1\u014e\6\156\1\157\27\156\1\0"+
    "\54\156\1\157\1\156\1\u014f\25\156\1\0\51\156\1\u0150"+
    "\2\156\1\157\27\156\1\0\54\156\1\157\3\156\1\u0151"+
    "\16\156\1\162\4\156\1\0\26\156\1\163\25\156\1\u0152"+
    "\27\156\1\0\52\156\1\u0153\1\156\1\157\27\156\1\0"+
    "\46\156\1\u0154\5\156\1\157\27\156\1\0\54\156\1\157"+
    "\3\156\1\u0155\23\156\1\0\54\156\1\157\22\156\1\162"+
    "\4\156\1\0\5\156\1\u0156\20\156\1\163\6\156\11\0"+
    "\1\u0157\127\0\1\u0158\67\0\1\u0159\117\0\1\u015a\100\0"+
    "\1\u015b\67\0\1\u015c\121\0\1\u015d\72\0\1\u015e\71\0"+
    "\1\205\4\0\10\205\1\206\16\205\1\u015f\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\5\205\1\u0160\2\205\1\206\17\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\2\205\1\u0161\14\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\6\205\1\u0162"+
    "\1\205\1\206\17\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\10\205\1\206\4\205"+
    "\1\u0163\12\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\10\205\1\206\1\u0164\16\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\3\205\1\u0165\4\205\1\206\17\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\55\0\1\u0166"+
    "\63\0\1\u0167\53\0\1\111\40\0\2\111\10\0\1\220"+
    "\31\0\1\113\40\0\2\113\10\0\1\223\112\0\1\u0168"+
    "\23\0\1\u0123\1\u0169\12\0\1\u016a\24\0\2\u0123\42\0"+
    "\1\u0124\1\u016b\12\0\1\u016c\24\0\2\u0124\56\0\1\u016d"+
    "\117\0\1\u016e\71\0\1\u016f\112\0\1\u0170\67\0\1\u0171"+
    "\74\0\32\123\1\u0172\14\123\1\0\54\123\1\u0173\27\123"+
    "\1\0\62\123\1\u0174\21\123\1\0\45\123\1\u0175\36\123"+
    "\1\0\35\123\17\0\1\u0176\106\0\1\u0177\106\0\1\u0178"+
    "\115\0\1\u0179\67\0\1\u017a\104\0\1\u017b\117\0\1\u017c"+
    "\77\0\1\u017d\76\0\1\u017e\76\0\1\u017f\107\0\1\u0180"+
    "\113\0\1\u0181\136\0\1\u0182\63\0\1\u0183\67\0\1\u0184"+
    "\112\0\1\u0185\114\0\1\u0186\112\0\1\u0187\73\0\1\u0188"+
    "\71\0\1\u0189\151\0\1\u018a\37\0\1\u018b\106\0\1\u018c"+
    "\117\0\1\u018d\63\0\1\u018e\117\0\1\u018f\56\0\17\156"+
    "\1\157\1\156\1\u0190\25\156\1\0\54\156\1\157\14\156"+
    "\1\u0191\12\156\1\0\46\156\1\u0192\5\156\1\157\27\156"+
    "\1\0\54\156\1\u0193\27\156\1\0\54\156\1\157\2\156"+
    "\1\u0194\17\156\1\162\4\156\1\0\26\156\1\163\21\156"+
    "\1\u0195\3\156\1\157\27\156\1\0\54\156\1\157\11\156"+
    "\1\u0196\15\156\1\0\54\156\1\157\12\156\1\u0197\14\156"+
    "\1\0\54\156\1\157\5\156\1\u0198\21\156\1\0\46\156"+
    "\1\u0199\5\156\1\157\27\156\1\0\51\156\1\u019a\2\156"+
    "\1\157\22\156\1\162\4\156\1\0\26\156\1\163\25\156"+
    "\1\u019b\27\156\1\0\54\156\1\157\12\156\1\u019c\14\156"+
    "\1\0\54\156\1\157\27\156\1\0\14\156\1\u019d\34\156"+
    "\1\u019e\2\156\1\157\27\156\1\0\35\156\32\0\1\u019f"+
    "\77\0\1\u01a0\76\0\1\u01a1\76\0\1\u01a2\112\0\1\u01a3"+
    "\117\0\1\u01a4\71\0\1\u01a5\141\0\1\u01a6\31\0\1\205"+
    "\4\0\10\205\1\206\15\205\1\u01a7\1\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\10\205\1\206\13\205\1\u01a8\3\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\13\205\1\u01a9\3\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\6\205\1\u01aa\10\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\3\205\1\u01ab\4\205"+
    "\1\206\17\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\6\205\1\u01ac\1\205\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\13\205\1\u01ad\3\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\17\0"+
    "\1\u01ae\110\0\1\u01af\163\0\1\u01b0\5\0\1\u0123\40\0"+
    "\2\u0123\42\0\1\u01b1\13\0\1\u016a\24\0\2\u01b1\42\0"+
    "\1\u0124\40\0\2\u0124\42\0\1\u01b2\13\0\1\u016c\24\0"+
    "\2\u01b2\42\0\1\u01b3\40\0\2\u01b3\50\0\1\u01b4\115\0"+
    "\1\u01b5\75\0\1\u01b6\122\0\1\u01b7\53\0\11\123\1\u01b8"+
    "\35\123\1\0\57\123\1\u01b9\24\123\1\0\50\123\1\u01ba"+
    "\33\123\1\0\66\123\1\u01bb\15\123\1\0\35\123\41\0"+
    "\1\u01bc\66\0\1\u01bd\100\0\1\u01be\106\0\1\u01bf\66\0"+
    "\1\u01c0\40\0\2\u01c0\62\0\1\u01c1\72\0\1\u01c2\135\0"+
    "\1\u01c3\62\0\1\u01c4\76\0\1\u01c5\107\0\1\u01c6\106\0"+
    "\1\u01c7\121\0\1\u01c8\65\0\1\u01c9\103\0\1\u01ca\114\0"+
    "\1\u01cb\106\0\1\u01cc\72\0\1\u01cd\107\0\1\u01ce\73\0"+
    "\1\u01cf\2\0\1\u01d0\52\0\1\u01d1\54\0\1\u01d2\105\0"+
    "\1\u01d3\66\0\1\u01d4\112\0\1\u01d5\131\0\1\u01d6\43\0"+
    "\1\u01d7\73\0\17\156\1\157\3\156\1\u01d8\23\156\1\0"+
    "\54\156\1\157\1\156\1\u01d9\25\156\1\0\54\156\1\157"+
    "\22\156\1\u01da\4\156\1\0\52\156\1\u01db\1\156\1\157"+
    "\22\156\1\162\4\156\1\0\26\156\1\163\25\156\1\157"+
    "\3\156\1\u01dc\23\156\1\0\47\156\1\u01dd\4\156\1\157"+
    "\27\156\1\0\46\156\1\u01de\5\156\1\157\27\156\1\0"+
    "\46\156\1\u01df\5\156\1\157\27\156\1\0\54\156\1\157"+
    "\22\156\1\u01e0\4\156\1\0\47\156\1\u01e1\4\156\1\157"+
    "\27\156\1\0\52\156\1\u01e2\1\156\1\157\27\156\1\0"+
    "\54\156\1\157\6\156\1\u01e3\13\156\1\162\4\156\1\0"+
    "\12\156\1\u01e4\13\156\1\163\25\156\1\u01e5\27\156\1\0"+
    "\54\156\1\157\14\156\1\u01e6\12\156\1\0\54\156\1\157"+
    "\27\156\1\0\2\156\1\u01e7\32\156\17\0\1\u01e8\104\0"+
    "\1\u01e9\104\0\1\u01ea\110\0\1\u01eb\113\0\1\u01ec\71\0"+
    "\1\u01e8\6\0\1\u01ed\75\0\1\u01ee\104\0\1\u01ef\66\0"+
    "\1\205\4\0\10\205\1\206\2\205\1\u01f0\14\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\7\205\1\u01f1\7\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\3\205\1\u01f2\4\205\1\206\17\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\17\205\3\0\1\205\1\u01f3\1\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\4\205\1\u01f4"+
    "\3\205\1\206\17\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\7\205\1\u01f5\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\1\u01f6\16\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\26\0\1\u01f7"+
    "\75\0\1\u01f8\136\0\1\u01f9\36\0\1\u01b1\1\u01fa\12\0"+
    "\1\u01fb\24\0\2\u01b1\33\0\1\u01fc\6\0\1\u01b2\1\u01fd"+
    "\37\0\2\u01b2\33\0\1\u01fc\6\0\1\u01b3\1\u016d\37\0"+
    "\2\u01b3\62\0\1\u01fe\104\0\1\u01ff\73\0\1\u01fe\103\0"+
    "\1\u0200\73\0\23\123\1\u0201\23\123\1\0\60\123\1\u0202"+
    "\23\123\1\0\47\123\1\u0201\34\123\1\0\46\123\1\u0203"+
    "\35\123\1\0\35\123\23\0\1\u0204\106\0\1\u0205\62\0"+
    "\1\u0206\13\0\1\u0207\24\0\2\u0206\56\0\1\u0208\65\0"+
    "\47\u01c0\1\0\35\u01c0\11\0\1\u0209\116\0\1\u020a\100\0"+
    "\1\u020b\100\0\1\u020c\102\0\1\u020d\106\0\1\u020e\142\0"+
    "\1\u020f\56\0\1\u0210\115\0\1\u0211\73\0\1\u0212\100\0"+
    "\1\u0213\117\0\1\u0214\75\0\1\u0215\73\0\1\u0216\60\0"+
    "\1\u0217\22\0\1\u0218\120\0\1\u0219\70\0\1\u021a\105\0"+
    "\1\u021b\126\0\1\u021c\136\0\1\u021d\35\0\1\u021e\76\0"+
    "\1\u021f\121\0\1\u0220\56\0\17\156\1\157\5\156\1\u0221"+
    "\21\156\1\0\54\156\1\u0222\27\156\1\0\54\156\1\u0223"+
    "\27\156\1\0\46\156\1\u0224\5\156\1\157\27\156\1\0"+
    "\46\156\1\u0225\5\156\1\157\27\156\1\0\54\156\1\157"+
    "\6\156\1\u0225\20\156\1\0\54\156\1\157\5\156\1\u0226"+
    "\21\156\1\0\54\156\1\157\3\156\1\u0227\23\156\1\0"+
    "\54\156\1\u0228\27\156\1\0\46\156\1\u0229\5\156\1\157"+
    "\27\156\1\0\50\156\1\u022a\3\156\1\157\27\156\1\0"+
    "\46\156\1\u022b\5\156\1\157\27\156\1\0\54\156\1\157"+
    "\1\156\1\u022c\25\156\1\0\47\156\1\u022d\4\156\1\157"+
    "\22\156\1\162\4\156\1\0\26\156\1\163\20\156\1\u022e"+
    "\4\156\1\157\27\156\1\0\46\156\1\u022f\5\156\1\157"+
    "\27\156\1\0\35\156\12\0\1\u0230\111\0\1\u0231\104\0"+
    "\1\u0232\113\0\1\u0233\112\0\1\u0234\67\0\1\u0235\104\0"+
    "\1\u0236\104\0\1\u0237\66\0\1\205\4\0\10\205\1\206"+
    "\1\u0238\16\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\10\205\1\206\1\u0239\16\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\4\205\1\u023a\12\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\1\u023b\16\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\3\205"+
    "\1\u023c\4\205\1\206\17\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\5\205\1\u023d"+
    "\2\205\1\206\17\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\4\205\1\u023e\3\205"+
    "\1\206\17\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\55\0\1\u023f\27\0\47\u01f8\1\0\35\u01f8\41\0"+
    "\1\u0240\46\0\1\u01b1\40\0\2\u01b1\42\0\1\u0241\13\0"+
    "\1\u01fb\24\0\2\u0241\56\0\1\u0242\20\0\1\u0242\47\0"+
    "\1\u01b2\40\0\2\u01b2\65\0\1\u0243\67\0\1\u0243\120\0"+
    "\1\u0244\57\0\26\123\1\u0245\20\123\1\0\46\123\1\u0245"+
    "\35\123\1\0\62\123\1\u0246\21\123\1\0\35\123\14\0"+
    "\1\u0247\107\0\1\u0248\6\0\1\u0249\61\0\1\u0206\1\u024a"+
    "\12\0\1\u024b\24\0\2\u0206\55\0\1\u024c\153\0\1\u024d"+
    "\27\0\1\u024e\113\0\1\u024f\161\0\1\u0250\34\0\1\u0251"+
    "\73\0\1\u0252\115\0\1\u0253\74\0\1\u0254\122\0\1\u0255"+
    "\77\0\1\u0256\70\0\1\u0257\125\0\1\u0258\63\0\1\u0259"+
    "\103\0\1\u025a\130\0\1\u025b\53\0\1\u025c\40\0\2\u025c"+
    "\54\0\1\u025d\121\0\1\u025e\100\0\1\u025f\155\0\1\u0260"+
    "\26\0\1\u0261\77\0\1\u0262\156\0\1\u0263\35\0\1\u0264"+
    "\113\0\1\u0265\56\0\17\156\1\u0266\6\156\1\u0267\20\156"+
    "\1\0\54\156\1\157\22\156\1\162\4\156\1\0\15\156"+
    "\1\u0268\10\156\1\163\6\156\47\u0223\1\0\35\u0223\17\156"+
    "\1\157\27\156\1\0\13\156\1\u0269\21\156\17\u0225\1\u026a"+
    "\27\u0225\1\0\35\u0225\17\156\1\157\12\156\1\u0225\14\156"+
    "\1\0\54\156\1\u026b\27\156\1\0\54\156\1\157\22\156"+
    "\1\162\4\156\1\0\24\156\1\u026c\1\156\1\163\21\156"+
    "\1\u026d\3\156\1\157\27\156\1\0\54\156\1\157\4\156"+
    "\1\u026e\22\156\1\0\52\156\1\u026f\1\156\1\157\27\156"+
    "\1\0\54\156\1\157\15\156\1\u0270\11\156\1\0\54\156"+
    "\1\157\14\156\1\u0271\12\156\1\0\54\156\1\157\27\156"+
    "\1\0\27\156\1\u0272\24\156\1\u0273\27\156\1\0\35\156"+
    "\34\0\1\u0274\66\0\1\u0275\105\0\1\u0276\103\0\1\u0277"+
    "\105\0\1\u0278\103\0\1\u0279\104\0\1\u027a\104\0\1\u027b"+
    "\67\0\1\205\4\0\10\205\1\206\17\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\3\205\1\u027c\2\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\1\u027d\16\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\10\205\1\206\1\u027e\16\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\1\u0250\1\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\5\205\1\u027f\2\205\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\5\205\1\u0280\11\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\15\205\1\u0281\1\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\13\0\1\u0282"+
    "\120\0\1\u0283\60\0\1\u0241\1\u0284\12\0\1\u01fb\24\0"+
    "\2\u0241\42\0\1\u0285\13\0\1\u0242\20\0\1\u0242\3\0"+
    "\2\u0285\56\0\1\u0286\117\0\1\u0243\52\0\17\123\1\u0287"+
    "\27\123\1\0\67\123\1\u0245\14\123\1\0\35\123\42\0"+
    "\1\u0288\57\0\1\u0289\106\0\1\u0248\70\0\1\u0206\40\0"+
    "\2\u0206\114\0\1\u028a\46\0\1\u028b\107\0\1\u028c\116\0"+
    "\1\u028d\62\0\1\u028e\133\0\1\u028f\120\0\1\u0290\101\0"+
    "\1\u0291\57\0\1\u0292\110\0\1\u0293\64\0\1\u0294\106\0"+
    "\1\u0295\110\0\1\u0296\121\0\1\u0297\101\0\1\u0298\66\0"+
    "\1\u0299\122\0\1\u029a\56\0\1\u025c\1\u0217\12\0\1\u029b"+
    "\24\0\2\u025c\122\0\1\u029c\32\0\1\u029d\125\0\1\u029e"+
    "\142\0\1\u029f\33\0\1\u02a0\112\0\1\u02a1\134\0\1\u02a2"+
    "\113\0\1\u02a3\33\0\1\u02a4\71\0\15\156\1\u02a5\1\156"+
    "\1\157\22\156\1\162\4\156\1\0\26\156\1\163\25\156"+
    "\1\u0266\27\156\1\0\54\156\1\157\2\156\1\u02a6\24\156"+
    "\1\0\54\156\1\157\12\156\1\u0223\14\156\1\0\35\156"+
    "\17\u0225\1\u026a\22\u0225\1\u02a7\4\u0225\1\0\26\u0225\1\u02a8"+
    "\6\u0225\12\156\1\u02a9\4\156\1\157\22\156\1\162\4\156"+
    "\1\0\26\156\1\163\25\156\1\157\21\156\1\u02aa\5\156"+
    "\1\0\54\156\1\157\27\156\1\0\2\156\1\u02ab\51\156"+
    "\1\157\5\156\1\u02ac\21\156\1\0\52\156\1\u02ad\1\156"+
    "\1\157\27\156\1\0\54\156\1\u02ae\27\156\1\0\54\156"+
    "\1\157\11\156\1\u02af\15\156\1\0\54\156\1\157\27\156"+
    "\1\0\20\156\1\u02b0\17\156\1\u02b1\13\156\1\157\22\156"+
    "\1\162\1\156\2\u02b1\1\156\1\0\26\156\1\163\6\156"+
    "\31\0\1\u02b2\72\0\1\u02b3\104\0\1\u02b4\104\0\1\u02b5"+
    "\73\0\1\u02b6\115\0\1\u02b7\104\0\1\u02b8\104\0\1\u02b9"+
    "\66\0\1\205\4\0\10\205\1\206\3\205\1\u02ba\13\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\1\u02bb\16\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\4\205\1\u02bc\3\205\1\206\17\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\17\205\3\0\3\205\2\0\1\205\1\0\2\205"+
    "\1\u02bd\3\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\6\205\1\u02be\10\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\10\205\1\206\12\205"+
    "\1\u02bf\4\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\10\0\1\u02c0\166\0\1\u02c1\15\0\1\u0241\40\0"+
    "\2\u0241\42\0\1\u0285\1\u02c2\12\0\1\u02c3\24\0\2\u0285"+
    "\42\0\1\u02c4\13\0\1\u0286\24\0\2\u02c4\3\0\1\u02c4"+
    "\33\0\3\123\1\u02c4\13\123\1\u0287\24\123\2\u02c4\1\123"+
    "\1\0\1\123\1\u02c4\33\123\11\0\1\u02c5\104\0\1\u02c6"+
    "\107\0\1\u02c7\73\0\1\u02c8\40\0\2\u02c8\45\0\1\u02c9"+
    "\121\0\1\u02ca\115\0\1\u02cb\135\0\1\u02cc\51\0\1\u02cd"+
    "\63\0\1\u02ce\124\0\1\u02cf\64\0\1\u02d0\121\0\1\u02d1"+
    "\104\0\1\u02d2\70\0\1\u02d3\111\0\1\u02d4\113\0\1\u02d5"+
    "\103\0\1\u02d6\110\0\1\u02d7\66\0\1\u02d8\110\0\1\u02d9"+
    "\110\0\1\u02da\104\0\1\u02db\64\0\1\u02dc\40\0\2\u02dc"+
    "\71\0\1\u02dd\65\0\1\u02de\102\0\1\u02df\127\0\1\u02e0"+
    "\50\0\11\156\1\u02e1\5\156\1\157\27\156\1\0\43\156"+
    "\1\u02e2\10\156\1\157\27\156\1\0\35\156\17\u0225\1\u026a"+
    "\14\u0225\1\u02e3\12\u0225\1\0\54\u0225\1\u026a\1\u0225\1\u02e4"+
    "\25\u0225\1\0\35\u0225\17\156\1\157\14\156\1\u02e5\12\156"+
    "\1\0\54\156\1\157\27\156\1\0\15\156\1\u02e6\30\156"+
    "\1\u02e7\5\156\1\157\27\156\1\0\54\156\1\157\11\156"+
    "\1\u02e8\15\156\1\0\54\156\1\u02e9\27\156\1\0\54\156"+
    "\1\157\12\156\1\u02ea\7\156\1\162\4\156\1\0\26\156"+
    "\1\163\25\156\1\157\11\156\1\u02eb\15\156\1\0\40\156"+
    "\1\u02b1\1\u02ec\12\156\1\u02ed\24\156\2\u02b1\1\156\1\0"+
    "\35\156\31\0\1\u02ee\53\0\47\u02b3\1\0\35\u02b3\56\0"+
    "\1\u02b7\1\u02ef\30\0\1\u02f0\40\0\2\u02f0\50\0\1\u02f1"+
    "\73\0\47\u02b7\1\0\35\u02b7\47\u02b8\1\0\35\u02b8\3\0"+
    "\1\u02f2\40\0\2\u02f2\40\0\1\205\4\0\1\u02f3\7\205"+
    "\1\206\17\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\10\205\1\206\1\u02f4\16\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\15\205\1\u02f5\1\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\3\205\1\u02f6\4\205\1\206\17\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\10\205\1\206\12\205\1\u02f7\4\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\12\205\1\u02f8\4\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\17\0\1\u02f9\157\0\1\u02fa\15\0"+
    "\1\u0285\40\0\2\u0285\42\0\1\u02fb\13\0\1\u02c3\24\0"+
    "\2\u02fb\37\0\47\u02c4\1\0\35\u02c4\17\0\1\u02fc\150\0"+
    "\1\u02fd\47\0\1\u02fe\56\0\47\u02c8\1\0\35\u02c8\27\0"+
    "\1\u02ff\107\0\1\u0300\103\0\1\u0301\112\0\1\u0302\56\0"+
    "\1\u0303\112\0\1\u0304\76\0\1\u0305\112\0\1\u0306\117\0"+
    "\1\u0307\104\0\1\u0308\73\0\1\u0309\71\0\1\u030a\115\0"+
    "\1\u030b\111\0\1\u030c\74\0\1\u030d\115\0\1\u030e\143\0"+
    "\1\u030f\33\0\1\u0310\125\0\1\u0311\53\0\1\u02dc\1\u02a0"+
    "\12\0\1\u0312\24\0\2\u02dc\56\0\1\u0313\77\0\1\u0314"+
    "\117\0\1\u0315\104\0\1\u0316\57\0\17\156\1\157\27\156"+
    "\1\0\13\156\1\u0317\40\156\1\157\7\156\1\u0318\17\156"+
    "\1\0\35\156\12\u0225\1\u0319\4\u0225\1\u026a\27\u0225\1\0"+
    "\54\u0225\1\u026a\6\u0225\1\u031a\20\u0225\1\0\35\u0225\17\156"+
    "\1\157\11\156\1\u031b\15\156\1\0\54\156\1\157\17\156"+
    "\1\u031c\7\156\1\0\54\156\1\u031d\27\156\1\0\46\156"+
    "\1\u031e\5\156\1\157\27\156\1\0\54\156\1\157\12\156"+
    "\1\u031f\7\156\1\162\4\156\1\0\26\156\1\163\25\156"+
    "\1\157\27\156\1\0\5\156\1\u0320\43\156\1\u0321\2\156"+
    "\1\157\27\156\1\0\40\156\1\u02b1\13\156\1\157\24\156"+
    "\2\u02b1\1\156\1\0\47\156\1\u0322\4\156\1\157\22\156"+
    "\1\162\4\156\1\0\26\156\1\163\6\156\14\0\1\u0323"+
    "\147\0\1\u0324\25\0\47\u02f0\1\0\35\u02f0\12\0\1\u0325"+
    "\75\0\1\u02f2\1\u02b9\37\0\2\u02f2\40\0\1\205\4\0"+
    "\10\205\1\206\10\205\1\u0326\6\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\1\u0327\16\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\10\205\1\206\12\205"+
    "\1\u0328\4\205\3\0\3\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\10\205\1\206\1\u0329\16\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\3\205\1\u032a\4\205\1\206\17\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\6\205\1\u032b\1\205\1\206\17\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\14\0\1\u032c\112\0"+
    "\1\u032d\65\0\1\u02fb\1\u032e\37\0\2\u02fb\33\0\1\u032f"+
    "\46\0\1\u0330\73\0\1\u0331\71\0\1\u0332\104\0\1\u0333"+
    "\104\0\1\u0334\116\0\1\u0335\56\0\1\u0336\40\0\2\u0336"+
    "\62\0\1\u0337\64\0\1\u0338\40\0\2\u0338\64\0\1\u0339"+
    "\76\0\1\u033a\104\0\1\u033b\113\0\1\u033c\101\0\1\u033d"+
    "\72\0\1\u033e\165\0\1\u033f\31\0\1\u0340\112\0\1\u0341"+
    "\76\0\1\u0342\76\0\1\u0343\120\0\1\u0344\114\0\1\u0345"+
    "\102\0\1\u0346\103\0\1\u0347\127\0\1\u0348\55\0\1\u0349"+
    "\75\0\1\u034a\65\0\17\156\1\157\12\156\1\u034b\14\156"+
    "\1\0\54\156\1\u034c\27\156\1\0\35\156\17\u0225\1\u026a"+
    "\27\u0225\1\0\27\u0225\1\u034d\24\u0225\1\u026a\12\u0225\1\u034e"+
    "\14\u0225\1\0\35\u0225\17\156\1\157\11\156\1\u034f\15\156"+
    "\1\0\40\156\1\u0350\13\156\1\157\24\156\2\u0350\1\156"+
    "\1\0\40\156\1\u0351\13\156\1\157\22\156\1\162\1\156"+
    "\2\u0351\1\156\1\0\26\156\1\163\25\156\1\157\5\156"+
    "\1\u0352\21\156\1\0\54\156\1\157\27\156\1\0\5\156"+
    "\1\u0353\40\156\1\u0354\5\156\1\157\27\156\1\0\54\156"+
    "\1\157\5\156\1\u0355\21\156\1\0\54\156\1\157\3\156"+
    "\1\u0356\23\156\1\0\35\156\25\0\1\u0357\136\0\1\u0358"+
    "\57\0\1\u0359\53\0\1\205\4\0\10\205\1\206\1\u035a"+
    "\16\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\1\u035b\16\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\12\205\1\u035c\4\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\1\0"+
    "\1\u0338\2\0\10\205\1\206\17\205\3\0\3\205\2\u0338"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\6\205\1\u035d\10\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\6\205\1\u035e\10\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\23\0\1\u035f\164\0\1\u0360\4\0\1\u02fb"+
    "\40\0\2\u02fb\56\0\1\u0361\20\0\1\u0361\60\0\1\u0362"+
    "\156\0\1\u0363\21\0\1\u0364\40\0\2\u0364\122\0\1\u0365"+
    "\35\0\1\u0366\73\0\1\u0367\40\0\2\u0367\56\0\1\u0368"+
    "\70\0\1\u0338\1\u0304\12\0\1\u0369\24\0\2\u0338\71\0"+
    "\1\u036a\71\0\1\u036b\75\0\1\u036c\113\0\1\u036d\110\0"+
    "\1\u036e\73\0\1\u036f\103\0\1\u0370\125\0\1\u0371\114\0"+
    "\1\u0372\70\0\1\u0373\104\0\1\u0374\102\0\1\u0375\71\0"+
    "\1\u0376\107\0\1\u0377\124\0\1\u0378\67\0\1\u0379\100\0"+
    "\1\u037a\157\0\1\u037b\16\0\3\156\1\u037c\13\156\1\157"+
    "\22\156\1\162\1\156\2\u037c\1\156\1\0\26\156\1\163"+
    "\6\156\11\u0225\1\u037d\5\u0225\1\u026a\27\u0225\1\0\54\u0225"+
    "\1\u037e\27\u0225\1\0\35\u0225\14\156\1\u037f\2\156\1\157"+
    "\27\156\1\0\40\156\1\u0380\13\156\1\157\24\156\2\u0380"+
    "\1\156\1\0\40\156\1\u0351\1\u0381\12\156\1\u0382\24\156"+
    "\2\u0351\1\156\1\0\54\156\1\157\12\156\1\u0383\14\156"+
    "\1\0\46\156\1\u0384\5\156\1\157\27\156\1\0\54\156"+
    "\1\157\11\156\1\u0385\15\156\1\0\54\156\1\157\22\156"+
    "\1\u0386\4\156\1\0\46\156\1\u0387\5\156\1\157\27\156"+
    "\1\0\35\156\42\0\1\u0388\121\0\1\u0389\61\0\1\u038a"+
    "\51\0\1\205\1\0\1\u0364\2\0\10\205\1\206\17\205"+
    "\3\0\3\205\2\u0364\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\1\0"+
    "\1\205\4\0\10\205\1\206\1\u038b\16\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\6\205\1\u038c\1\205\1\206\17\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\1\0\1\205\4\0\10\205"+
    "\1\206\13\205\1\u038d\3\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\17\205\3\0\1\205\1\u038e\1\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\11\0\1\u038f\76\0\1\u0390\13\0\1\u0361"+
    "\20\0\1\u0361\3\0\2\u0390\62\0\1\u0391\75\0\1\u0392"+
    "\73\0\1\u0364\1\u0333\12\0\1\u0393\24\0\2\u0364\73\0"+
    "\1\u0394\75\0\1\u0395\75\0\1\u0396\105\0\1\u0397\76\0"+
    "\1\u0398\112\0\1\u0399\104\0\1\u039a\101\0\1\u039b\153\0"+
    "\1\u039c\32\0\1\u039d\125\0\1\u039e\66\0\1\u039f\124\0"+
    "\1\u03a0\67\0\1\u03a1\76\0\1\u03a2\125\0\1\u03a3\71\0"+
    "\1\u03a4\127\0\1\u03a5\65\0\1\u03a6\100\0\1\u03a7\75\0"+
    "\1\u03a8\126\0\1\u03a9\65\0\1\u03aa\71\0\3\156\1\u037c"+
    "\1\u03ab\12\156\1\u03ac\24\156\2\u037c\1\156\1\0\35\156"+
    "\17\u0225\1\u026a\22\u0225\1\u03ad\4\u0225\1\0\52\u0225\1\u03ae"+
    "\1\u0225\1\u026a\22\u0225\1\u02a7\4\u0225\1\0\26\u0225\1\u02a8"+
    "\6\u0225\17\156\1\157\5\156\1\u03af\21\156\1\0\53\156"+
    "\1\u03b0\1\157\27\156\1\0\40\156\1\u0351\13\156\1\157"+
    "\24\156\2\u0351\1\156\1\0\46\156\1\u03b1\5\156\1\157"+
    "\22\156\1\162\4\156\1\0\26\156\1\163\25\156\1\u03b2"+
    "\27\156\1\0\54\156\1\157\11\156\1\u03b3\15\156\1\0"+
    "\54\156\1\u03b4\27\156\1\0\54\156\1\u03b5\27\156\1\0"+
    "\54\156\1\157\22\156\1\u03b6\4\156\1\0\35\156\17\0"+
    "\1\u03b7\104\0\1\u03b8\110\0\1\u03b9\62\0\1\205\4\0"+
    "\10\205\1\206\1\u03ba\16\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\6\205\1\u03bb\10\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\10\205\1\206\1\u03bc"+
    "\16\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\1\u03bd\16\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\17\0\1\u03be"+
    "\70\0\1\u0390\1\u03bf\12\0\1\u03c0\24\0\2\u0390\65\0"+
    "\1\u03c1\101\0\1\u03c2\72\0\1\u03c3\116\0\1\u03c4\123\0"+
    "\1\u03c5\45\0\1\u03c6\40\0\2\u03c6\45\0\1\u03c7\77\0"+
    "\1\u03c8\171\0\1\u03c9\34\0\1\u03ca\120\0\1\u03cb\65\0"+
    "\1\u03cc\116\0\1\u03cd\113\0\1\u03ce\112\0\1\u03cf\61\0"+
    "\1\u03d0\143\0\1\u03d1\40\0\1\u03d2\115\0\1\u03d3\107\0"+
    "\1\u03d4\102\0\1\u03d5\71\0\1\u03d6\110\0\1\u03d7\124\0"+
    "\1\u03d8\64\0\1\u03d9\67\0\3\156\1\u037c\13\156\1\157"+
    "\24\156\2\u037c\1\156\1\0\46\156\1\u03da\5\156\1\157"+
    "\22\156\1\162\4\156\1\0\26\156\1\163\6\156\17\u0225"+
    "\1\u0223\27\u0225\1\0\46\u0225\1\u03db\5\u0225\1\u026a\27\u0225"+
    "\1\0\35\u0225\17\156\1\157\22\156\1\u03dc\4\156\1\0"+
    "\40\156\1\u03dd\13\156\1\157\24\156\2\u03dd\1\156\1\0"+
    "\36\156\1\u03de\15\156\1\157\27\156\1\0\54\156\1\157"+
    "\22\156\1\162\4\156\1\0\16\156\1\u03df\7\156\1\163"+
    "\25\156\1\u03e0\27\156\1\0\54\156\1\157\22\156\1\162"+
    "\4\156\1\0\13\156\1\u03e1\12\156\1\163\25\156\1\157"+
    "\22\156\1\162\4\156\1\0\6\156\1\u03e2\17\156\1\163"+
    "\21\156\1\u03e3\3\156\1\157\27\156\1\0\35\156\56\0"+
    "\1\u03e4\104\0\1\u02b7\104\0\1\u03e5\27\0\1\205\4\0"+
    "\10\205\1\u03e6\17\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\1\0\1\205\4\0\10\205\1\206\17\205"+
    "\3\0\1\205\1\u03e7\1\205\2\0\1\205\1\0\6\205"+
    "\4\0\6\205\2\0\1\205\1\206\2\0\3\205\1\0"+
    "\3\205\1\0\1\205\4\0\10\205\1\206\17\205\3\0"+
    "\3\205\2\0\1\205\1\0\6\205\4\0\4\205\1\u03e8"+
    "\1\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\17\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\1\u03e4\3\0\6\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\35\0\1\u03e9"+
    "\52\0\1\u0390\40\0\2\u0390\42\0\1\u03ea\13\0\1\u03c0"+
    "\24\0\2\u03ea\56\0\1\u03eb\75\0\1\u03ec\75\0\1\u03ed"+
    "\122\0\1\u03ee\104\0\1\u03ef\70\0\1\u03f0\40\0\2\u03f0"+
    "\51\0\1\u03f1\102\0\1\u03f2\105\0\1\u03f3\73\0\47\u03ca"+
    "\1\0\35\u03ca\55\0\1\u03f4\44\0\1\u03f5\121\0\1\u03f6"+
    "\75\0\1\u03f7\116\0\1\u03f8\75\0\1\u03f9\147\0\1\u03fa"+
    "\45\0\1\u03fb\73\0\1\u03fc\74\0\1\u03fd\127\0\1\u03fe"+
    "\75\0\1\u03ff\73\0\1\u0400\107\0\1\u0401\102\0\1\u0402"+
    "\67\0\1\156\1\u0403\15\156\1\157\27\156\1\0\35\156"+
    "\17\u0225\1\u026a\27\u0225\1\0\13\u0225\1\u0404\21\u0225\17\156"+
    "\1\u0405\27\156\1\0\40\156\1\u0406\13\156\1\157\24\156"+
    "\2\u0406\1\156\1\0\45\156\1\u0407\6\156\1\157\27\156"+
    "\1\0\46\156\1\u0408\5\156\1\157\27\156\1\0\54\156"+
    "\1\157\22\156\1\162\4\156\1\0\13\156\1\u0409\12\156"+
    "\1\163\25\156\1\157\14\156\1\u040a\12\156\1\0\54\156"+
    "\1\157\27\156\1\0\21\156\1\u040b\32\156\1\157\12\156"+
    "\1\u040c\14\156\1\0\35\156\71\0\1\u040d\41\0\1\u040e"+
    "\75\0\1\u040f\66\0\1\205\4\0\10\205\1\206\1\u0410"+
    "\16\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\3\205\1\u0411\4\205\1\206\17\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\34\0"+
    "\1\u0412\53\0\1\u03ea\1\u0413\37\0\2\u03ea\33\0\1\u0414"+
    "\47\0\1\u0415\66\0\1\u0416\66\0\1\u0417\170\0\1\u0418"+
    "\26\0\1\u0419\77\0\1\u041a\120\0\1\u041b\76\0\1\u041c"+
    "\76\0\1\u041d\110\0\1\u041e\106\0\1\u041f\71\0\1\u0420"+
    "\111\0\1\u0421\132\0\1\u0422\101\0\1\u0423\62\0\1\u0424"+
    "\104\0\1\u0425\111\0\1\u0426\111\0\1\u0427\105\0\1\u0428"+
    "\65\0\1\u0429\115\0\1\u042a\65\0\10\156\1\u042b\6\156"+
    "\1\157\27\156\1\0\35\156\17\u0225\1\u026a\12\u0225\1\u0223"+
    "\14\u0225\1\0\35\u0225\17\156\1\157\22\156\1\162\4\156"+
    "\1\0\24\156\1\u042c\1\156\1\163\24\156\1\u042d\1\157"+
    "\27\156\1\0\46\156\1\u042e\5\156\1\157\27\156\1\0"+
    "\54\156\1\157\5\156\1\u042f\21\156\1\0\54\156\1\157"+
    "\14\156\1\u0430\12\156\1\0\54\156\1\157\3\156\1\u0431"+
    "\23\156\1\0\54\156\1\157\17\156\1\u0432\7\156\1\0"+
    "\54\156\1\157\6\156\1\u0433\20\156\1\0\35\156\37\0"+
    "\1\u0434\125\0\1\u0435\24\0\47\u040f\1\0\35\u040f\1\0"+
    "\1\205\4\0\10\205\1\206\17\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\1\u0418\1\0\3\205\1\0\3\205\1\0\1\205\4\0"+
    "\10\205\1\206\6\205\1\u0436\10\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\21\0\1\u0437\66\0\1\u03ea"+
    "\40\0\2\u03ea\104\0\1\u0438\56\0\1\u0439\76\0\1\u043a"+
    "\134\0\1\u043b\46\0\1\u043c\40\0\2\u043c\62\0\1\u043d"+
    "\113\0\1\u043e\130\0\1\u043f\45\0\1\u0440\122\0\1\u0441"+
    "\52\0\1\u0442\40\0\2\u0442\56\0\1\u0443\77\0\1\u0444"+
    "\147\0\1\u0445\52\0\1\u0446\113\0\1\u0447\104\0\1\u0448"+
    "\125\0\1\u0449\45\0\1\u044a\101\0\1\u044b\105\0\1\u044c"+
    "\154\0\1\u044d\22\0\11\156\1\u044e\5\156\1\157\27\156"+
    "\1\0\54\156\1\157\21\156\1\u044f\5\156\1\0\40\156"+
    "\1\u0450\13\156\1\157\24\156\2\u0450\1\156\1\0\54\156"+
    "\1\157\3\156\1\u0451\23\156\1\0\54\156\1\157\12\156"+
    "\1\u0452\14\156\1\0\54\156\1\157\3\156\1\u0453\23\156"+
    "\1\0\54\156\1\u0454\27\156\1\0\54\156\1\157\27\156"+
    "\1\0\5\156\1\u0455\46\156\1\u0456\27\156\1\0\35\156"+
    "\55\0\1\u0457\46\0\1\u0458\66\0\1\205\4\0\10\205"+
    "\1\206\13\205\1\u0459\3\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\17\0\1\u045a\132\0\1\u045b\71\0"+
    "\1\u045c\75\0\1\u045d\146\0\1\u045e\22\0\1\u045f\40\0"+
    "\2\u045f\52\0\1\u0460\110\0\1\u0461\70\0\1\u0462\40\0"+
    "\2\u0462\53\0\1\u0463\107\0\1\u0464\70\0\1\u0442\1\u041f"+
    "\37\0\2\u0442\65\0\1\u0465\110\0\1\u0466\63\0\1\u0467"+
    "\112\0\1\u0468\113\0\1\u03a5\112\0\1\u0469\104\0\1\u046a"+
    "\74\0\1\u046b\112\0\1\u046c\66\0\1\u046d\101\0\1\u046e"+
    "\73\0\17\156\1\157\3\156\1\u046f\23\156\1\0\54\156"+
    "\1\157\27\156\1\0\15\156\1\u0470\22\156\1\u0471\13\156"+
    "\1\157\24\156\2\u0471\1\156\1\0\50\156\1\u0472\3\156"+
    "\1\157\27\156\1\0\54\156\1\u0473\27\156\1\0\54\156"+
    "\1\u0474\27\156\1\0\40\156\1\u0475\13\156\1\157\22\156"+
    "\1\162\1\156\2\u0475\1\156\1\0\26\156\1\163\17\156"+
    "\1\u0476\5\156\1\157\27\156\1\0\51\156\1\u0477\2\156"+
    "\1\157\22\156\1\162\4\156\1\0\26\156\1\163\6\156"+
    "\11\0\1\u0478\111\0\1\u0479\67\0\1\205\4\0\10\205"+
    "\1\206\1\u047a\16\205\3\0\3\205\2\0\1\205\1\0"+
    "\6\205\4\0\6\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\13\0\1\u047b\135\0\1\u047c\74\0\1\u047d"+
    "\63\0\1\u047e\130\0\1\u047f\142\0\1\u0480\20\0\1\u0481"+
    "\114\0\1\u0482\20\0\1\u0483\45\0\1\u0462\1\u043f\12\0"+
    "\1\u0484\24\0\2\u0462\121\0\1\u0485\25\0\1\u0486\40\0"+
    "\2\u0486\114\0\1\u0487\63\0\1\u0488\65\0\1\u0489\72\0"+
    "\1\u048a\40\0\2\u048a\62\0\1\u048b\76\0\1\u048c\100\0"+
    "\1\u048d\112\0\1\u048e\112\0\1\u048f\76\0\1\u0490\65\0"+
    "\13\156\1\u0491\3\156\1\157\27\156\1\0\54\156\1\157"+
    "\17\156\1\u0492\7\156\1\0\54\156\1\157\27\156\1\0"+
    "\25\156\1\u0493\20\156\1\u0494\5\156\1\157\27\156\1\0"+
    "\54\156\1\157\1\156\1\u0495\20\156\1\u0496\4\156\1\0"+
    "\26\156\1\163\11\156\1\u0497\13\156\1\157\22\156\1\162"+
    "\1\156\2\u0497\1\156\1\0\26\156\1\163\11\156\1\u0475"+
    "\1\u0498\12\156\1\u0499\24\156\2\u0475\1\156\1\0\52\156"+
    "\1\u049a\1\156\1\157\27\156\1\0\54\156\1\157\5\156"+
    "\1\u049b\21\156\1\0\35\156\15\0\1\u049c\67\0\47\u0479"+
    "\1\0\35\u0479\1\0\1\205\4\0\10\205\1\206\2\205"+
    "\1\u049d\14\205\3\0\1\205\1\u049e\1\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\25\0\1\u049f\76\0\1\u04a0\104\0"+
    "\1\u04a1\76\0\1\u04a2\76\0\1\u04a3\40\0\2\u04a3\55\0"+
    "\1\u04a4\113\0\1\u04a5\67\0\1\u04a6\130\0\1\u04a7\125\0"+
    "\1\u04a8\63\0\1\u04a9\53\0\1\u0486\1\u0464\12\0\1\u04aa"+
    "\24\0\2\u0486\53\0\1\u04ab\113\0\1\u04ac\71\0\1\u04ad"+
    "\77\0\1\u048a\1\u0468\11\0\1\u04ae\25\0\2\u048a\56\0"+
    "\1\u04af\127\0\1\u04b0\61\0\1\u04b1\144\0\1\u04b2\57\0"+
    "\1\u04b3\52\0\11\156\1\u04b4\5\156\1\157\27\156\1\0"+
    "\40\156\1\u04b5\13\156\1\157\24\156\2\u04b5\1\156\1\0"+
    "\53\156\1\u04b6\1\157\27\156\1\0\54\156\1\157\5\156"+
    "\1\u04b7\21\156\1\0\45\156\1\u04b8\6\156\1\157\27\156"+
    "\1\0\54\156\1\157\14\156\1\u04b9\12\156\1\0\40\156"+
    "\1\u0497\1\u04ba\12\156\1\u04bb\24\156\2\u0497\1\156\1\0"+
    "\40\156\1\u0475\13\156\1\157\24\156\2\u0475\1\156\1\0"+
    "\47\156\1\u04bc\4\156\1\157\22\156\1\162\4\156\1\0"+
    "\26\156\1\163\16\156\1\u04bd\6\156\1\157\27\156\1\0"+
    "\54\156\1\157\22\156\1\u04be\4\156\1\0\35\156\10\0"+
    "\1\u04bf\75\0\1\205\4\0\2\205\1\u04c0\5\205\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\1\0\1\205\4\0\10\205\1\206\15\205\1\u04c1\1\205"+
    "\3\0\3\205\2\0\1\205\1\0\6\205\4\0\6\205"+
    "\2\0\1\205\1\206\2\0\3\205\1\0\3\205\32\0"+
    "\1\u04c2\112\0\1\u04c3\72\0\1\u04c4\103\0\1\u04c5\62\0"+
    "\1\u04c6\40\0\2\u04c6\133\0\1\u04c7\22\0\1\u04c8\111\0"+
    "\1\u04c9\153\0\1\u04ca\52\0\1\u04cb\64\0\1\u04cc\102\0"+
    "\1\u04cd\107\0\1\u04ce\106\0\1\u04cf\145\0\1\u04d0\43\0"+
    "\1\u04d1\103\0\1\u04d2\120\0\1\u04d3\141\0\1\u04d4\26\0"+
    "\1\u04d5\73\0\17\156\1\157\5\156\1\u04d6\21\156\1\0"+
    "\40\156\1\u04d7\13\156\1\157\24\156\2\u04d7\1\156\1\0"+
    "\54\156\1\157\27\156\1\0\24\156\1\u04d8\22\156\1\u04d9"+
    "\4\156\1\157\27\156\1\0\54\156\1\u04da\27\156\1\0"+
    "\47\156\1\u0102\4\156\1\157\27\156\1\0\16\156\1\u04db"+
    "\21\156\1\u0497\13\156\1\157\24\156\2\u0497\1\156\1\0"+
    "\47\156\1\u04dc\4\156\1\157\22\156\1\162\4\156\1\0"+
    "\26\156\1\163\25\156\1\157\3\156\1\u04dd\23\156\1\0"+
    "\54\156\1\157\27\156\1\0\10\156\1\u04de\43\156\1\u04df"+
    "\27\156\1\0\35\156\60\0\1\u04e0\25\0\1\205\4\0"+
    "\10\205\1\206\1\u04e1\16\205\3\0\3\205\2\0\1\205"+
    "\1\0\6\205\4\0\6\205\2\0\1\205\1\206\2\0"+
    "\3\205\1\0\3\205\1\0\1\205\4\0\10\205\1\206"+
    "\17\205\3\0\3\205\2\0\1\205\1\0\6\205\4\0"+
    "\4\205\1\u04e2\1\205\2\0\1\205\1\206\2\0\3\205"+
    "\1\0\3\205\11\0\1\u04e3\133\0\1\u04e4\55\0\1\u04e5"+
    "\105\0\1\u04e6\110\0\1\u04e7\71\0\1\u04e8\40\0\2\u04e8"+
    "\50\0\1\u04e9\155\0\1\u04ea\47\0\1\u04a6\67\0\1\u04eb"+
    "\117\0\1\u04ec\115\0\1\u04ed\65\0\1\u04ee\72\0\1\u04ef"+
    "\40\0\2\u04ef\56\0\1\u04f0\65\0\1\u04f1\3\u04f2\1\u04f1"+
    "\11\u04f2\1\u04f1\20\u04f2\1\u04f1\7\u04f2\1\0\6\u04f2\4\u04f1"+
    "\6\u04f2\2\u04f1\1\u04f2\3\u04f1\3\u04f2\1\u04f1\3\u04f2\17\0"+
    "\1\u04f3\142\0\1\u04f4\46\0\1\u04f5\110\0\1\u04f6\61\0"+
    "\12\156\1\u04f7\4\156\1\157\27\156\1\0\53\156\1\u04f8"+
    "\1\157\27\156\1\0\40\156\1\u04f9\13\156\1\157\24\156"+
    "\2\u04f9\1\156\1\0\46\156\1\u04fa\5\156\1\157\27\156"+
    "\1\0\54\156\1\157\22\156\1\162\4\156\1\0\12\156"+
    "\1\u04fb\13\156\1\163\25\156\1\157\5\156\1\u04b8\21\156"+
    "\1\0\54\156\1\157\3\156\1\u04fc\23\156\1\0\46\156"+
    "\1\u04fd\5\156\1\157\27\156\1\0\54\156\1\u04fe\27\156"+
    "\1\0\40\156\1\u04ff\13\156\1\157\22\156\1\162\1\156"+
    "\2\u04ff\1\156\1\0\26\156\1\163\6\156\17\0\1\u0500"+
    "\66\0\1\205\4\0\10\205\1\206\17\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\1\u0501\5\205\2\0"+
    "\1\205\1\206\2\0\3\205\1\0\3\205\1\0\1\205"+
    "\4\0\10\205\1\206\6\205\1\u04c0\10\205\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\23\0\1\u0502\120\0"+
    "\1\u0503\57\0\1\u0504\103\0\1\u0505\76\0\1\u0506\40\0"+
    "\2\u0506\42\0\1\u04e8\1\u04c7\37\0\2\u04e8\27\0\1\u0507"+
    "\26\0\1\u0508\122\0\1\u0509\75\0\1\u050a\120\0\1\u050b"+
    "\57\0\1\u050c\106\0\1\u050d\70\0\1\u04ef\1\u04cf\37\0"+
    "\2\u04ef\133\0\1\u050e\10\0\47\u04f1\1\0\35\u04f1\3\0"+
    "\1\u050f\40\0\2\u050f\50\0\1\u0510\125\0\1\u0511\103\0"+
    "\1\u0512\53\0\11\156\1\u0513\5\156\1\157\27\156\1\0"+
    "\40\156\1\u0514\13\156\1\157\24\156\2\u0514\1\156\1\0"+
    "\40\156\1\u04f9\1\u04d8\12\156\1\157\24\156\2\u04f9\1\156"+
    "\1\0\25\156\1\u0515\26\156\1\u0516\27\156\1\0\54\156"+
    "\1\157\15\156\1\u0517\11\156\1\0\46\156\1\u0518\5\156"+
    "\1\157\27\156\1\0\54\156\1\157\22\156\1\u0519\4\156"+
    "\1\0\54\156\1\157\22\156\1\162\4\156\1\0\24\156"+
    "\1\u051a\1\156\1\163\11\156\1\u04ff\1\u051b\12\156\1\u051c"+
    "\24\156\2\u04ff\1\156\1\0\35\156\74\0\1\u051d\11\0"+
    "\1\205\4\0\10\205\1\206\16\205\1\u051e\3\0\3\205"+
    "\2\0\1\205\1\0\6\205\4\0\6\205\2\0\1\205"+
    "\1\206\2\0\3\205\1\0\3\205\11\0\1\u051f\132\0"+
    "\1\u0520\77\0\1\u0521\71\0\1\u0522\70\0\1\u0523\40\0"+
    "\2\u0523\37\0\47\u0507\1\0\35\u0507\10\0\1\u0524\113\0"+
    "\1\u0525\71\0\1\u0526\117\0\1\u0527\121\0\1\u0528\136\0"+
    "\1\u0529\102\0\1\u052a\23\0\1\u050f\1\u04f3\37\0\2\u050f"+
    "\56\0\1\u052b\121\0\1\u052c\63\0\1\u052d\71\0\17\156"+
    "\1\u052e\27\156\1\0\40\156\1\u052f\13\156\1\157\24\156"+
    "\2\u052f\1\156\1\0\35\156\17\u0515\1\u0530\27\u0515\1\0"+
    "\35\u0515\10\156\1\u0531\6\156\1\157\22\156\1\162\4\156"+
    "\1\0\26\156\1\163\25\156\1\u0532\27\156\1\0\54\156"+
    "\1\157\22\156\1\u0533\4\156\1\0\50\156\1\u0534\3\156"+
    "\1\157\27\156\1\0\54\156\1\157\27\156\1\0\14\156"+
    "\1\u0535\23\156\1\u04ff\13\156\1\157\24\156\2\u04ff\1\156"+
    "\1\0\46\156\1\u0536\5\156\1\157\22\156\1\162\4\156"+
    "\1\0\26\156\1\163\6\156\64\0\1\u0537\21\0\1\205"+
    "\4\0\10\205\1\206\1\u0538\16\205\3\0\3\205\2\0"+
    "\1\205\1\0\6\205\4\0\6\205\2\0\1\205\1\206"+
    "\2\0\3\205\1\0\3\205\26\0\1\u0539\112\0\1\u053a"+
    "\60\0\1\u053b\112\0\1\u053c\122\0\1\u053d\53\0\1\u053e"+
    "\40\0\2\u053e\56\0\1\u053f\122\0\1\u0540\74\0\1\u0541"+
    "\70\0\1\u0542\170\0\1\u0543\50\0\1\u0544\62\0\1\u0545"+
    "\112\0\1\u0546\57\0\10\156\1\u0547\6\156\1\157\22\156"+
    "\1\162\4\156\1\0\26\156\1\163\24\156\1\u0548\1\157"+
    "\27\156\1\0\35\156\17\u0515\1\u0530\22\u0515\1\u0549\4\u0515"+
    "\1\0\26\u0515\1\u054a\6\u0515\17\156\1\157\14\156\1\u054b"+
    "\12\156\1\0\40\156\1\u054c\13\156\1\157\22\156\1\162"+
    "\1\156\2\u054c\1\156\1\0\26\156\1\163\21\156\1\u054d"+
    "\3\156\1\157\27\156\1\0\54\156\1\157\12\156\1\u054e"+
    "\14\156\1\0\54\156\1\157\27\156\1\0\25\156\1\u054f"+
    "\26\156\1\157\11\156\1\u0550\15\156\1\0\35\156\75\0"+
    "\1\u0551\10\0\1\205\1\0\1\u053e\2\0\10\205\1\206"+
    "\17\205\3\0\3\205\2\u053e\1\205\1\0\6\205\4\0"+
    "\6\205\2\0\1\205\1\206\2\0\3\205\1\0\3\205"+
    "\32\0\1\u0552\75\0\1\u0553\115\0\1\u0554\53\0\1\u0555"+
    "\40\0\2\u0555\52\0\1\u0556\74\0\1\u053e\1\u0525\12\0"+
    "\1\u0557\24\0\2\u053e\42\0\1\u0558\40\0\2\u0558\73\0"+
    "\1\u0559\63\0\1\u055a\110\0\1\u055b\104\0\1\u055c\110\0"+
    "\1\u055d\75\0\1\u055e\104\0\1\u055f\70\0\17\156\1\157"+
    "\14\156\1\u0560\12\156\1\0\40\156\1\u0561\13\156\1\157"+
    "\24\156\2\u0561\1\156\1\0\35\156\17\u0515\1\u0530\14\u0515"+
    "\1\u0562\12\u0515\1\0\54\u0515\1\u0530\1\u0515\1\u0563\25\u0515"+
    "\1\0\35\u0515\13\156\1\u0564\3\156\1\157\27\156\1\0"+
    "\40\156\1\u054c\1\u0565\12\156\1\u0566\24\156\2\u054c\1\156"+
    "\1\0\54\156\1\157\12\156\1\u0567\14\156\1\0\54\156"+
    "\1\157\6\156\1\u0568\20\156\1\0\54\156\1\u0569\27\156"+
    "\1\0\45\156\1\u056a\6\156\1\157\27\156\1\0\35\156"+
    "\11\0\1\u056b\151\0\1\u056c\41\0\1\u056d\74\0\1\u056e"+
    "\40\0\2\u056e\64\0\1\u056f\67\0\1\u0570\77\0\1\u0558"+
    "\1\u053f\12\0\1\u0571\24\0\2\u0558\60\0\1\u0572\111\0"+
    "\1\u0573\67\0\1\u0574\164\0\1\u0575\27\0\1\u0576\152\0"+
    "\1\u0577\54\0\1\u0578\52\0\13\156\1\u0579\3\156\1\157"+
    "\27\156\1\0\40\156\1\u057a\13\156\1\157\24\156\2\u057a"+
    "\1\156\1\0\35\156\12\u0515\1\u057b\4\u0515\1\u0530\27\u0515"+
    "\1\0\54\u0515\1\u0530\6\u0515\1\u057c\20\u0515\1\0\35\u0515"+
    "\17\156\1\157\5\156\1\u057d\21\156\1\0\40\156\1\u054c"+
    "\13\156\1\157\24\156\2\u054c\1\156\1\0\45\156\1\u057e"+
    "\6\156\1\157\22\156\1\162\4\156\1\0\26\156\1\163"+
    "\25\156\1\157\6\156\1\u057f\20\156\1\0\42\156\1\u0580"+
    "\11\156\1\157\27\156\1\0\54\156\1\157\22\156\1\162"+
    "\4\156\1\0\21\156\1\u0581\4\156\1\163\25\156\1\157"+
    "\12\156\1\u0582\14\156\1\0\35\156\42\0\1\u0583\70\0"+
    "\1\u0584\103\0\1\u0585\154\0\1\u0586\41\0\1\u0587\106\0"+
    "\1\u0588\102\0\1\u0589\75\0\1\u058a\113\0\1\u058b\77\0"+
    "\1\u058c\104\0\1\u058d\113\0\1\u058e\61\0\1\u058f\73\0"+
    "\17\156\1\157\5\156\1\u0590\21\156\1\0\54\156\1\157"+
    "\27\156\1\0\25\156\1\u0591\7\156\17\u0515\1\u0530\27\u0515"+
    "\1\0\27\u0515\1\u0592\24\u0515\1\u0530\12\u0515\1\u0593\14\u0515"+
    "\1\0\35\u0515\17\156\1\157\12\156\1\u0594\14\156\1\0"+
    "\54\156\1\157\14\156\1\u0595\12\156\1\0\42\156\1\u0596"+
    "\11\156\1\157\27\156\1\0\54\156\1\157\15\156\1\u0597"+
    "\11\156\1\0\35\156\60\0\1\u0598\56\0\1\u0599\70\0"+
    "\1\u059a\144\0\1\u059b\41\0\1\u059c\112\0\1\u059d\102\0"+
    "\1\u059e\113\0\1\u059f\102\0\1\u05a0\106\0\1\u05a1\101\0"+
    "\1\u05a2\123\0\1\u05a3\42\0\17\156\1\157\12\156\1\u05a4"+
    "\14\156\1\0\53\156\1\u05a5\1\157\27\156\1\0\35\156"+
    "\11\u0515\1\u05a6\5\u0515\1\u0530\27\u0515\1\0\54\u0515\1\u05a7"+
    "\27\u0515\1\0\35\u0515\17\156\1\157\27\156\1\0\6\156"+
    "\1\u05a8\41\156\1\u05a9\3\156\1\157\27\156\1\0\54\156"+
    "\1\u05aa\27\156\1\0\35\156\17\0\1\u05ab\143\0\1\u05ac"+
    "\122\0\1\u05ad\36\0\1\u05ae\103\0\1\u05af\102\0\1\u05b0"+
    "\107\0\1\u05b1\75\0\1\u05b2\101\0\1\u05b3\133\0\1\u05b4"+
    "\73\0\1\u05b5\52\0\17\156\1\157\27\156\1\0\6\156"+
    "\1\u05b6\45\156\1\157\27\156\1\0\24\156\1\u05b7\10\156"+
    "\17\u0515\1\u0530\22\u0515\1\u05b8\4\u0515\1\0\52\u0515\1\u05b9"+
    "\1\u0515\1\u0530\22\u0515\1\u0549\4\u0515\1\0\26\u0515\1\u054a"+
    "\6\u0515\17\156\1\157\6\156\1\u05ba\20\156\1\0\54\156"+
    "\1\157\5\156\1\u05bb\21\156\1\0\47\156\1\u05bc\4\156"+
    "\1\157\22\156\1\162\4\156\1\0\26\156\1\163\6\156"+
    "\16\0\1\u05bd\114\0\1\u05be\61\0\1\u05bf\40\0\2\u05bf"+
    "\117\0\1\u05c0\56\0\1\u05c1\77\0\1\u05c2\134\0\1\u05c3"+
    "\52\0\1\u05c4\105\0\1\u05c5\74\0\1\u05c6\160\0\1\u05c7"+
    "\14\0\17\156\1\157\6\156\1\u05c8\20\156\1\0\40\156"+
    "\1\u05c9\13\156\1\157\24\156\2\u05c9\1\156\1\0\35\156"+
    "\17\u0515\1\u0223\27\u0515\1\0\46\u0515\1\u05ca\5\u0515\1\u0530"+
    "\27\u0515\1\0\35\u0515\17\156\1\157\27\156\1\0\10\156"+
    "\1\u05cb\43\156\1\157\12\156\1\u05cc\14\156\1\0\51\156"+
    "\1\u05cd\2\156\1\157\27\156\1\0\35\156\47\u05bd\1\0"+
    "\35\u05bd\60\0\1\u05ce\27\0\1\u05bf\1\u05ad\37\0\2\u05bf"+
    "\27\0\1\u05cf\14\0\1\u05d0\125\0\1\u05d1\71\0\1\u05d2"+
    "\102\0\1\u05d3\104\0\1\u05d4\116\0\1\u05d5\100\0\1\u05d6"+
    "\65\0\17\156\1\157\27\156\1\0\10\156\1\u05d7\27\156"+
    "\1\u05c9\1\u05b7\12\156\1\157\24\156\2\u05c9\1\156\1\0"+
    "\25\156\1\u05d8\7\156\17\u0515\1\u0530\27\u0515\1\0\13\u0515"+
    "\1\u05d9\21\u0515\5\156\1\u05da\11\156\1\157\27\156\1\0"+
    "\54\156\1\157\3\156\1\u05db\23\156\1\0\35\156\5\0"+
    "\1\u05dc\157\0\1\u05dd\34\0\1\u05de\110\0\1\u05df\161\0"+
    "\1\u05e0\23\0\1\u05e1\165\0\1\u05e2\13\0\5\156\1\u05e3"+
    "\11\156\1\157\27\156\1\0\35\156\17\u0515\1\u0530\12\u0515"+
    "\1\u0223\14\u0515\1\0\35\u0515\17\156\1\157\4\156\1\u05e4"+
    "\22\156\1\0\35\156\17\0\1\u05e5\71\0\1\u05e6\142\0"+
    "\1\u05e7\61\0\1\u05e8\65\0\17\156\1\157\14\156\1\u05e9"+
    "\12\156\1\0\35\156\63\0\1\u05ea\40\0\1\u05eb\122\0"+
    "\1\u05ec\111\0\1\u05ed\42\0\17\156\1\u05ee\27\156\1\0"+
    "\35\156\23\0\1\u05ef\72\0\1\u05f0\112\0\1\u05f1\110\0"+
    "\1\u05f2\61\0\17\156\1\157\22\156\1\162\4\156\1\0"+
    "\5\156\1\u05f3\20\156\1\163\6\156\34\0\1\u05f4\64\0"+
    "\1\u05f5\122\0\1\u05f6\65\0\1\u05f7\71\0\17\156\1\157"+
    "\14\156\1\u05f8\12\156\1\0\35\156\31\0\1\u05f9\77\0"+
    "\1\u05fa\114\0\1\u05fb\122\0\1\u05c5\32\0\15\156\1\u05fc"+
    "\1\156\1\157\27\156\1\0\35\156\17\0\1\u05fd\76\0"+
    "\1\u05fe\112\0\1\u05ff\65\0\17\156\1\157\22\156\1\u0600"+
    "\4\156\1\0\35\156\26\0\1\u0601\101\0\1\u0602\76\0"+
    "\1\u0603\67\0\17\156\1\157\6\156\1\u0604\20\156\1\0"+
    "\35\156\11\0\1\u0605\112\0\1\u0606\76\0\1\u0607\105\0"+
    "\1\u0608\124\0\1\u0609\66\0\1\u060a\122\0\1\u060b\106\0"+
    "\1\u060c\122\0\1\u060d\66\0\1\u060e\67\0\1\u060f\76\0"+
    "\1\u0610\116\0\1\u0611\136\0\1\u0612\46\0\1\u0613\104\0"+
    "\1\u0614\76\0\1\u0615\134\0\1\u0616\46\0\1\u0617\40\0"+
    "\2\u0617\53\0\1\u0618\101\0\1\u0619\76\0\1\u0617\1\u0614"+
    "\12\0\1\u061a\24\0\2\u0617\101\0\1\u061b\65\0\1\u061c"+
    "\113\0\1\u061d\71\0\1\u061e\110\0\1\u061f\115\0\1\u0620"+
    "\104\0\1\u0621\64\0\1\u0622\107\0\1\u0623\106\0\1\u0624"+
    "\70\0\1\u0625\125\0\1\u0626\110\0\1\u0627\63\0\1\u0628"+
    "\112\0\1\u0629\77\0\1\u062a\124\0\1\u062b\104\0\1\u062c"+
    "\106\0\1\u062d\104\0\1\u062e\67\0\1\u062f\110\0\1\u0630"+
    "\106\0\1\u0631\76\0\1\u0632\76\0\1\u0633\76\0\1\u0634"+
    "\40\0\2\u0634\125\0\1\u0635\21\0\1\u0634\1\u0632\12\0"+
    "\1\u0636\24\0\2\u0634\56\0\1\u0637\100\0\1\u0638\154\0"+
    "\1\u0639\47\0\1\u063a\101\0\1\u063b\77\0\1\u063c\122\0"+
    "\1\u063d\75\0\1\u063e\111\0\1\u063f\65\0\1\u0640\102\0"+
    "\1\u0641\116\0\1\u0642\107\0\1\u0643\63\0\1\u0644\77\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[107640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\1\11\42\1\1\11\6\1\1\11\10\1\1\11"+
    "\20\1\72\0\1\1\2\0\1\1\10\0\4\1\26\0"+
    "\1\11\25\0\1\1\6\0\1\1\14\0\4\1\72\0"+
    "\2\1\1\0\1\1\6\0\4\1\104\0\4\1\73\0"+
    "\1\1\1\0\1\1\4\0\4\1\4\0\1\1\67\0"+
    "\1\1\10\0\3\1\37\0\1\1\1\0\1\1\33\0"+
    "\1\1\3\0\2\1\43\0\1\1\34\0\1\1\27\0"+
    "\1\11\7\0\2\1\7\0\1\1\2\0\1\1\3\0"+
    "\2\1\13\0\1\1\3\0\1\1\32\0\2\1\13\0"+
    "\1\1\1\0\1\1\46\0\2\1\26\0\1\11\31\0"+
    "\1\1\1\0\2\1\21\0\1\11\34\0\2\1\46\0"+
    "\1\11\7\0\2\1\33\0\1\1\20\0\1\1\22\0"+
    "\1\11\2\0\1\11\22\0\1\1\12\0\1\1\4\0"+
    "\1\11\55\0\1\1\66\0\1\1\25\0\1\11\40\0"+
    "\1\11\40\0\1\1\35\0\1\1\1\0\2\1\24\0"+
    "\1\1\7\0\1\1\5\0\1\1\12\0\1\11\17\0"+
    "\1\1\22\0\1\1\5\0\2\1\27\0\2\1\21\0"+
    "\1\11\5\0\2\1\3\0\2\1\1\0\1\11\16\0"+
    "\2\1\2\0\1\1\14\0\1\11\2\0\2\1\20\0"+
    "\2\1\3\0\1\1\3\0\1\11\10\0\1\1\1\0"+
    "\1\1\2\0\2\11\7\0\3\1\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\1\40\0\1\1\40\0\1\11"+
    "\26\0\1\11\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1604];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private boolean firstCommand = true; 

   private PopulationParser popParser;
   private TradeParser tradeParser;
   private SectorDisplayParser sectorDisplayParser;
   private StatusParser statusParser;
   private ScanParser scanParser;
   private ComputerParser computerParser;
   private CimParser cimParser;
   private PlanetParser planetParser;
   private StreamReader streamReader;
   private ShipTypeDao shipTypeDao;
   private Logger log;

    public void setPopulationParser(PopulationParser pop) {
        this.popParser = pop;
    }
    
    public void setStreamReader(StreamReader sr) {
        this.streamReader = sr;
    }  
   
    public void setTradeParser(TradeParser tp) {
        tradeParser = tp;
    }
    
    public void setComputerParser(ComputerParser cp) {
        this.computerParser = cp;
    }    
    
    public void setShipTypeDao(ShipTypeDao dao) {
      this.shipTypeDao = dao;
    }
    
    public void setPlanetParser(PlanetParser pp) {
        planetParser = pp;
    }
    
    public void setCimParser(CimParser tp) {
        cimParser = tp;
    }
    
    public void setSectorDisplayParser(SectorDisplayParser sd) {
        sectorDisplayParser = sd;
    }
    
    public void setStatusParser(StatusParser sp) {
        statusParser = sp;
    }
    
    public void setScanParser(ScanParser sp) {
        scanParser = sp;
    }

    public void setFirstCommand(boolean first) {
        this.firstCommand = first;
    }    

   public void init()
   {
       log = Logger.getLogger(getClass());
       log.info("Initializing lexer debug:"+log.isDebugEnabled());
       setState(DUMMYSTATE);
   }   
   
   public void setState(int state) {
     yybegin(state);
     if (state != DUMMYSTATE) {
      setFirstCommand(false);
     } 
   }
   
   public int getState() {
    return yystate();
   } 
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TWLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TWLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { log.debug("Starting deployed fighters");
	yybegin(DEPLOYEDFTRS);
          }
        case 62: break;
        case 22: 
          { sectorDisplayParser.parsePorts(yytext());
          }
        case 63: break;
        case 55: 
          { statusParser.parseLoseExperience(yytext());
          }
        case 64: break;
        case 24: 
          { sectorDisplayParser.parseSectorNumber(yytext());
    log.debug("Starting sector display");
    yybegin(SECTORDISPLAY);
          }
        case 65: break;
        case 41: 
          { popParser.Landing(yytext());
          }
        case 66: break;
        case 11: 
          { statusParser.parseInfoLine(yytext());
          }
        case 67: break;
        case 53: 
          { if (log.isDebugEnabled()) {
    log.debug("Starting computer state");
  }
  yybegin(COMPUTER);
          }
        case 68: break;
        case 28: 
          { log.debug("Ending cim");
    yybegin(YYINITIAL);
          }
        case 69: break;
        case 56: 
          { String response = popParser.Transwarp(yytext());
  if (response=="Y"){
    streamReader.write("Y");
  }
          }
        case 70: break;
        case 34: 
          { cimParser.parsePort(yytext());
          }
        case 71: break;
        case 58: 
          { tradeParser.parseCreditsAndHolds(yytext());
          }
        case 72: break;
        case 50: 
          { log.debug("Session Timeout received - Sending keepalive");
    streamReader.write(" ");
          }
        case 73: break;
        case 61: 
          { String response = popParser.ReturnHome();
  if (response!="") {
    streamReader.write(response);
  }
          }
        case 74: break;
        case 12: 
          { computerParser.parseShipEntry(yytext());
          }
        case 75: break;
        case 8: 
          { cimParser.parseCoursePlot(yytext());
    log.debug("Starting cim from course plot");
    yybegin(CIM);
          }
        case 76: break;
        case 26: 
          { sectorDisplayParser.parseNavHaz(yytext());
          }
        case 77: break;
        case 23: 
          { planetParser.parseProductDisplay(yytext());
          }
        case 78: break;
        case 18: 
          { tradeParser.parseReportLine(yytext());
          }
        case 79: break;
        case 39: 
          { planetParser.parsePlanetDisplay(yytext());
//    sessionDao.update(session);

    log.debug("Starting planet display");
    yybegin(PLANETDISPLAY);
          }
        case 80: break;
        case 14: 
          { yybegin(CIMCOURSEPLOT);
          }
        case 81: break;
        case 4: 
          { log.debug("Ending sector display");
    yybegin(YYINITIAL);
          }
        case 82: break;
        case 51: 
          { scanParser.parseSectorWarps(yytext());
          }
        case 83: break;
        case 2: 
          { String l = yytext();
    log.debug("parsing line:"+l+":"+l.length());
    if (l.length() < 5) {
        StringBuffer sb = new StringBuffer();
        for (int x=0; x<yytext().length(); x++) {
            sb.append("code "+(int)yytext().charAt(x)+":");
        }
        log.debug("code: "+sb.toString());
    }
            
    statusParser.parseCompactStatus(yytext());
          }
        case 84: break;
        case 59: 
          { String str = popParser.parseTerra(yytext());
    if (str=="TA") {
      streamReader.write("T^\n");
    }
          }
        case 85: break;
        case 36: 
          { sectorDisplayParser.parseWarps(yytext());
          }
        case 86: break;
        case 5: 
          { log.debug("Ending density scan");
	yybegin(YYINITIAL);
          }
        case 87: break;
        case 35: 
          { statusParser.parseWarpMove(yytext());
          }
        case 88: break;
        case 9: 
          { planetParser.parsePlanetDisplay(yytext());
          }
        case 89: break;
        case 16: 
          { scanParser.parseDensityScan(yytext());
          }
        case 90: break;
        case 47: 
          { String counter = tradeParser.parseBuy(yytext());
    if (counter!=""){
        streamReader.write(counter+"^\n");
    }
          }
        case 91: break;
        case 45: 
          { String response = popParser.Landed(yytext());
  if (response!=""){
    streamReader.write(response);
  }
          }
        case 92: break;
        case 37: 
          { log.debug("Starting density scan");
	yybegin(DENSITYSCAN);
          }
        case 93: break;
        case 48: 
          { if (log.isDebugEnabled()) {
    log.debug("Starting ship catalog");
  }
  yybegin(SHIPCATALOG);
          }
        case 94: break;
        case 43: 
          { log.debug("starting ether probing");
  scanParser.parseEtherProbe(yytext());
          }
        case 95: break;
        case 60: 
          { String response = popParser.ShortestPath(yytext());
    if (response!=""){
      streamReader.write(response);
    }
          }
        case 96: break;
        case 13: 
          { cimParser.parseWarps(yytext());
          }
        case 97: break;
        case 29: 
          { log.debug("end ether probing");
  scanParser.endEtherProbe();
          }
        case 98: break;
        case 49: 
          { String counter = tradeParser.parseSell(yytext());
    if (counter!=""){
        streamReader.write(counter+"^\n");
    }
          }
        case 99: break;
        case 15: 
          { statusParser.reset();
   statusParser.parseCompactStatus(yytext());
   log.debug("Starting status report");
   yybegin(STATUS);
          }
        case 100: break;
        case 3: 
          { log.debug("Ending status report");
    yybegin(YYINITIAL);
          }
        case 101: break;
        case 27: 
          { statusParser.parseTurnsLeft(yytext());
          }
        case 102: break;
        case 7: 
          { cimParser.parseCoursePlot(yytext());
    log.debug("Ending course plot");
    yybegin(YYINITIAL);
          }
        case 103: break;
        case 57: 
          { log.debug("Planet Landing");
    String which = popParser.LandingOnWhich(yytext());
    if (which!=""){
        streamReader.write(which);
    }
          }
        case 104: break;
        case 42: 
          { log.debug("At command prompt");
    
    // Initialize the session on first command prompt
    if (firstCommand) {
      if (shipTypeDao.getAll().size() == 0) {
        streamReader.write("CC?+QQ".getBytes("Cp1252"));
      }
      streamReader.write("TDRQ");
      streamReader.write("I".getBytes("Cp1252"));
      streamReader.write("/#".getBytes("Cp1252"));
      streamReader.write("V".getBytes("Cp1252"));
      // streamReader.write("CTQ".getBytes("Cp1252"));
      firstCommand = false;
    }

    statusParser.parseCommandPrompt(yytext());
    String response = popParser.parseCommandPrompt(yytext());
    if (response!=""){
        streamReader.write(response);
    }

    yybegin(YYINITIAL);
          }
        case 105: break;
        case 44: 
          { log.debug("Starting initial state");
    yybegin(YYINITIAL);
          }
        case 106: break;
        case 54: 
          { statusParser.parseGainExperience(yytext());
          }
        case 107: break;
        case 40: 
          { statusParser.parseAutoWarpMove(yytext());
          }
        case 108: break;
        case 20: 
          { sectorDisplayParser.parseBeacon(yytext());
          }
        case 109: break;
        case 46: 
          { statusParser.parsePlanetPrompt(yytext());
    log.debug("Starting planet prompt");
    yybegin(PLANETPROMPT);
          }
        case 110: break;
        case 38: 
          { tradeParser.parseBusted(yytext());
          }
        case 111: break;
        case 31: 
          { tradeParser.reset();
    log.debug("Starting commerce report");
	yybegin(COMMERCEREPORT);
          }
        case 112: break;
        case 6: 
          { scanParser.parseDeployedFighters(yytext());
          }
        case 113: break;
        case 33: 
          { statusParser.parseInfoLine(yytext());
    yybegin(YYINITIAL);
          }
        case 114: break;
        case 21: 
          { sectorDisplayParser.parsePlanets(yytext());
          }
        case 115: break;
        case 10: 
          { log.debug("Starting cim");
    yybegin(CIM);
          }
        case 116: break;
        case 19: 
          { statusParser.parseStardockPrompt(yytext());
    log.debug("Starting stardock");
	yybegin(STARDOCK);
          }
        case 117: break;
        case 52: 
          { statusParser.parseChangeAlignment(yytext());
          }
        case 118: break;
        case 30: 
          { statusParser.reset();
    statusParser.parseInfoLine(yytext());
    log.debug("Starting info report");
    yybegin(INFO);
          }
        case 119: break;
        case 17: 
          { tradeParser.parseLastDocked(yytext());
          }
        case 120: break;
        case 25: 
          { sectorDisplayParser.parseFighters(yytext());
          }
        case 121: break;
        case 1: 
          { 
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
